"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@stencil+core@2.5.2";
exports.ids = ["vendor-chunks/@stencil+core@2.5.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@stencil+core@2.5.2/node_modules/@stencil/core/internal/client/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stencil+core@2.5.2/node_modules/@stencil/core/internal/client/index.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUILD: () => (/* reexport safe */ _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD),\n/* harmony export */   Build: () => (/* binding */ Build),\n/* harmony export */   CSS: () => (/* binding */ CSS),\n/* harmony export */   Context: () => (/* binding */ Context),\n/* harmony export */   Env: () => (/* reexport safe */ _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.Env),\n/* harmony export */   Fragment: () => (/* binding */ Fragment),\n/* harmony export */   H: () => (/* binding */ H),\n/* harmony export */   HTMLElement: () => (/* binding */ H),\n/* harmony export */   Host: () => (/* binding */ Host),\n/* harmony export */   NAMESPACE: () => (/* reexport safe */ _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.NAMESPACE),\n/* harmony export */   STENCIL_DEV_MODE: () => (/* binding */ STENCIL_DEV_MODE),\n/* harmony export */   addHostEventListeners: () => (/* binding */ addHostEventListeners),\n/* harmony export */   attachShadow: () => (/* binding */ attachShadow),\n/* harmony export */   bootstrapLazy: () => (/* binding */ bootstrapLazy),\n/* harmony export */   cmpModules: () => (/* binding */ cmpModules),\n/* harmony export */   connectedCallback: () => (/* binding */ connectedCallback),\n/* harmony export */   consoleDevError: () => (/* binding */ consoleDevError),\n/* harmony export */   consoleDevInfo: () => (/* binding */ consoleDevInfo),\n/* harmony export */   consoleDevWarn: () => (/* binding */ consoleDevWarn),\n/* harmony export */   consoleError: () => (/* binding */ consoleError),\n/* harmony export */   createEvent: () => (/* binding */ createEvent),\n/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement),\n/* harmony export */   disconnectedCallback: () => (/* binding */ disconnectedCallback),\n/* harmony export */   doc: () => (/* binding */ doc),\n/* harmony export */   forceModeUpdate: () => (/* binding */ forceModeUpdate),\n/* harmony export */   forceUpdate: () => (/* binding */ forceUpdate),\n/* harmony export */   getAssetPath: () => (/* binding */ getAssetPath),\n/* harmony export */   getConnect: () => (/* binding */ getConnect),\n/* harmony export */   getContext: () => (/* binding */ getContext),\n/* harmony export */   getElement: () => (/* binding */ getElement),\n/* harmony export */   getHostRef: () => (/* binding */ getHostRef),\n/* harmony export */   getMode: () => (/* binding */ getMode),\n/* harmony export */   getRenderingRef: () => (/* binding */ getRenderingRef),\n/* harmony export */   getValue: () => (/* binding */ getValue),\n/* harmony export */   h: () => (/* binding */ h),\n/* harmony export */   insertVdomAnnotations: () => (/* binding */ insertVdomAnnotations),\n/* harmony export */   isMemberInElement: () => (/* binding */ isMemberInElement),\n/* harmony export */   loadModule: () => (/* binding */ loadModule),\n/* harmony export */   modeResolutionChain: () => (/* binding */ modeResolutionChain),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   parsePropertyValue: () => (/* binding */ parsePropertyValue),\n/* harmony export */   plt: () => (/* binding */ plt),\n/* harmony export */   postUpdateComponent: () => (/* binding */ postUpdateComponent),\n/* harmony export */   promiseResolve: () => (/* binding */ promiseResolve),\n/* harmony export */   proxyComponent: () => (/* binding */ proxyComponent),\n/* harmony export */   proxyCustomElement: () => (/* binding */ proxyCustomElement),\n/* harmony export */   readTask: () => (/* binding */ readTask),\n/* harmony export */   registerHost: () => (/* binding */ registerHost),\n/* harmony export */   registerInstance: () => (/* binding */ registerInstance),\n/* harmony export */   renderVdom: () => (/* binding */ renderVdom),\n/* harmony export */   setAssetPath: () => (/* binding */ setAssetPath),\n/* harmony export */   setErrorHandler: () => (/* binding */ setErrorHandler),\n/* harmony export */   setMode: () => (/* binding */ setMode),\n/* harmony export */   setPlatformOptions: () => (/* binding */ setPlatformOptions),\n/* harmony export */   setValue: () => (/* binding */ setValue),\n/* harmony export */   styles: () => (/* binding */ styles),\n/* harmony export */   supportsConstructibleStylesheets: () => (/* binding */ supportsConstructibleStylesheets),\n/* harmony export */   supportsListenerOptions: () => (/* binding */ supportsListenerOptions),\n/* harmony export */   supportsShadow: () => (/* binding */ supportsShadow),\n/* harmony export */   win: () => (/* binding */ win),\n/* harmony export */   writeTask: () => (/* binding */ writeTask)\n/* harmony export */ });\n/* harmony import */ var _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stencil/core/internal/app-data */ \"(ssr)/./node_modules/.pnpm/@stencil+core@2.5.2/node_modules/@stencil/core/internal/app-data/index.js\");\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet customError;\nlet i = 0;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet renderingRef = null;\nlet queueCongestion = 0;\nlet queuePending = false;\n/*\n Stencil Client Platform v2.5.2 | MIT Licensed | https://stenciljs.com\n */ \nconst win =  false ? 0 : {};\nconst CSS = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cssVarShim ? win.CSS : null;\nconst doc = win.document || {\n    head: {}\n};\nconst H = win.HTMLElement || class {\n};\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: \"\",\n    jmp: (h)=>h(),\n    raf: (h)=>requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts)=>el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts)=>el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts)=>new CustomEvent(eventName, opts)\n};\nconst supportsShadow = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDomShim && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom ? /*@__PURE__*/ (()=>(doc.head.attachShadow + \"\").indexOf(\"[native\") > -1)() : true;\nconst supportsListenerOptions = /*@__PURE__*/ (()=>{\n    let supportsListenerOptions = false;\n    try {\n        doc.addEventListener(\"e\", null, Object.defineProperty({}, \"passive\", {\n            get () {\n                supportsListenerOptions = true;\n            }\n        }));\n    } catch (e) {}\n    return supportsListenerOptions;\n})();\nconst promiseResolve = (v)=>Promise.resolve(v);\nconst supportsConstructibleStylesheets = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.constructableCSS ? /*@__PURE__*/ (()=>{\n    try {\n        new CSSStyleSheet();\n        return typeof new CSSStyleSheet().replace === \"function\";\n    } catch (e) {}\n    return false;\n})() : false;\nconst Context = {};\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners)=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hostListener && listeners) {\n        // this is called immediately within the element's constructor\n        // initialize our event listeners on the host element\n        // we do this now so that we can listen to events that may\n        // have fired even before the instance is ready\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hostListenerTargetParent) {\n            // this component may have event listeners that should be attached to the parent\n            if (attachParentListeners) {\n                // this is being ran from within the connectedCallback\n                // which is important so that we know the host element actually has a parent element\n                // filter out the listeners to only have the ones that ARE being attached to the parent\n                listeners = listeners.filter(([flags])=>flags & 32 /* TargetParent */ );\n            } else {\n                // this is being ran from within the component constructor\n                // everything BUT the parent element listeners should be attached at this time\n                // filter out the listeners that are NOT being attached to the parent\n                listeners = listeners.filter(([flags])=>!(flags & 32 /* TargetParent */ ));\n            }\n        }\n        listeners.map(([flags, name, method])=>{\n            const target = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(()=>plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName)=>(ev)=>{\n        try {\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad) {\n                if (hostRef.$flags$ & 256 /* isListenReady */ ) {\n                    // instance is ready, let's call it's member method for this event\n                    hostRef.$lazyInstance$[methodName](ev);\n                } else {\n                    (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([\n                        methodName,\n                        ev\n                    ]);\n                }\n            } else {\n                hostRef.$hostElement$[methodName](ev);\n            }\n        } catch (e) {\n            consoleError(e);\n        }\n    };\nconst getHostListenerTarget = (elm, flags)=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hostListenerTargetDocument && flags & 4 /* TargetDocument */ ) return doc;\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hostListenerTargetWindow && flags & 8 /* TargetWindow */ ) return win;\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hostListenerTargetBody && flags & 16 /* TargetBody */ ) return doc.body;\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hostListenerTargetParent && flags & 32 /* TargetParent */ ) return elm.parentElement;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags)=>supportsListenerOptions ? {\n        passive: (flags & 1 /* Passive */ ) !== 0,\n        capture: (flags & 2 /* Capture */ ) !== 0\n    } : (flags & 2 /* Capture */ ) !== 0;\nconst CONTENT_REF_ID = \"r\";\nconst ORG_LOCATION_ID = \"o\";\nconst SLOT_NODE_ID = \"s\";\nconst TEXT_NODE_ID = \"t\";\nconst HYDRATE_ID = \"s-id\";\nconst HYDRATED_STYLE_ID = \"sty-id\";\nconst HYDRATE_CHILD_ID = \"c-id\";\nconst HYDRATED_CSS = \"{visibility:hidden}.hydrated{visibility:inherit}\";\nconst XLINK_NS = \"http://www.w3.org/1999/xlink\";\nconst createTime = (fnName, tagName = \"\")=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.profile && performance.mark) {\n        const key = `st:${fnName}:${tagName}:${i++}`;\n        // Start\n        performance.mark(key);\n        // End\n        return ()=>performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n    } else {\n        return ()=>{\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText)=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.profile && performance.mark) {\n        if (performance.getEntriesByName(key).length === 0) {\n            performance.mark(key);\n        }\n        return ()=>{\n            if (performance.getEntriesByName(measureText).length === 0) {\n                performance.measure(measureText, key);\n            }\n        };\n    } else {\n        return ()=>{\n            return;\n        };\n    }\n};\nconst inspect = (ref)=>{\n    const hostRef = getHostRef(ref);\n    if (!hostRef) {\n        return undefined;\n    }\n    const flags = hostRef.$flags$;\n    const hostElement = hostRef.$hostElement$;\n    return {\n        renderCount: hostRef.$renderCount$,\n        flags: {\n            hasRendered: !!(flags & 2 /* hasRendered */ ),\n            hasConnected: !!(flags & 1 /* hasConnected */ ),\n            isWaitingForChildren: !!(flags & 4 /* isWaitingForChildren */ ),\n            isConstructingInstance: !!(flags & 8 /* isConstructingInstance */ ),\n            isQueuedForUpdate: !!(flags & 16 /* isQueuedForUpdate */ ),\n            hasInitializedComponent: !!(flags & 32 /* hasInitializedComponent */ ),\n            hasLoadedComponent: !!(flags & 64 /* hasLoadedComponent */ ),\n            isWatchReady: !!(flags & 128 /* isWatchReady */ ),\n            isListenReady: !!(flags & 256 /* isListenReady */ ),\n            needsRerender: !!(flags & 512 /* needsRerender */ )\n        },\n        instanceValues: hostRef.$instanceValues$,\n        ancestorComponent: hostRef.$ancestorComponent$,\n        hostElement,\n        lazyInstance: hostRef.$lazyInstance$,\n        vnode: hostRef.$vnode$,\n        modeName: hostRef.$modeName$,\n        onReadyPromise: hostRef.$onReadyPromise$,\n        onReadyResolve: hostRef.$onReadyResolve$,\n        onInstancePromise: hostRef.$onInstancePromise$,\n        onInstanceResolve: hostRef.$onInstanceResolve$,\n        onRenderResolve: hostRef.$onRenderResolve$,\n        queuedListeners: hostRef.$queuedListeners$,\n        rmListeners: hostRef.$rmListeners$,\n        [\"s-id\"]: hostElement[\"s-id\"],\n        [\"s-cr\"]: hostElement[\"s-cr\"],\n        [\"s-lr\"]: hostElement[\"s-lr\"],\n        [\"s-p\"]: hostElement[\"s-p\"],\n        [\"s-rc\"]: hostElement[\"s-rc\"],\n        [\"s-sc\"]: hostElement[\"s-sc\"]\n    };\n};\nconst installDevTools = ()=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.devTools) {\n        const stencil = win.stencil = win.stencil || {};\n        const originalInspect = stencil.inspect;\n        stencil.inspect = (ref)=>{\n            let result = inspect(ref);\n            if (!result && typeof originalInspect === \"function\") {\n                result = originalInspect(ref);\n            }\n            return result;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS)=>{\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = style || new CSSStyleSheet();\n        style.replace(cssText);\n    } else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm)=>{\n    let scopeId = getScopeId(cmpMeta, mode);\n    let style = styles.get(scopeId);\n    if (!_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.attachStyles) {\n        return scopeId;\n    }\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */  ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === \"string\") {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n            }\n            if (!appliedStyles.has(scopeId)) {\n                if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateClientSide && styleContainerNode.host && (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n                    // This is only happening on native shadow-dom, do not needs CSS var shim\n                    styleElm.innerHTML = style;\n                } else {\n                    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cssVarShim && plt.$cssShim$) {\n                        styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10 /* needsScopedEncapsulation */ ));\n                        const newScopeId = styleElm[\"s-sc\"];\n                        if (newScopeId) {\n                            scopeId = newScopeId;\n                            // we don't want to add this styleID to the appliedStyles Set\n                            // since the cssVarShim might need to apply several different\n                            // stylesheets for the same component\n                            appliedStyles = null;\n                        }\n                    } else {\n                        styleElm = doc.createElement(\"style\");\n                        styleElm.innerHTML = style;\n                    }\n                    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hotModuleReplacement) {\n                        styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector(\"link\"));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        } else if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [\n                ...styleContainerNode.adoptedStyleSheets,\n                style\n            ];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef)=>{\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime(\"attachStyles\", cmpMeta.$tagName$);\n    const scopeId = addStyle(_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\n    if ((_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.scoped) && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cssAnnotations && flags & 10 /* needsScopedEncapsulation */ ) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm[\"s-sc\"] = scopeId;\n        elm.classList.add(scopeId + \"-h\");\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.scoped && flags & 2 /* scopedCssEncapsulation */ ) {\n            elm.classList.add(scopeId + \"-s\");\n        }\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode)=>\"sc-\" + (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.mode && mode && cmp.$flags$ & 32 /* hasMode */  ? cmp.$tagName$ + \"-\" + mode : cmp.$tagName$);\nconst convertScopedToShadow = (css)=>css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, \"$1{\");\n// Private\nconst computeMode = (elm)=>modeResolutionChain.map((h)=>h(elm)).find((m)=>!!m);\n// Public\nconst setMode = (handler)=>modeResolutionChain.push(handler);\nconst getMode = (ref)=>getHostRef(ref).$modeName$;\n/**\n * Default style mode id\n */ /**\n * Reusable empty obj/array\n * Don't add values to these!!\n */ const EMPTY_OBJ = {};\n/**\n * Namespaces\n */ const SVG_NS = \"http://www.w3.org/2000/svg\";\nconst HTML_NS = \"http://www.w3.org/1999/xhtml\";\nconst isDef = (v)=>v != null;\nconst isComplexType = (o)=>{\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === \"object\" || o === \"function\";\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */ // const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children)=>{\n    let child = null;\n    let key = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    let vNodeChildren = [];\n    const walk = (c)=>{\n        for(let i = 0; i < c.length; i++){\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            } else if (child != null && typeof child !== \"boolean\") {\n                if (simple = typeof nodeName !== \"function\" && !isComplexType(child)) {\n                    child = String(child);\n                } else if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev && typeof nodeName !== \"function\" && child.$flags$ === undefined) {\n                    consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                } else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev && nodeName === \"input\") {\n            validateInputProperties(vnodeData);\n        }\n        // normalize class / classname attributes\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomKey && vnodeData.key) {\n            key = vnodeData.key;\n        }\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation && vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomClass) {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class = typeof classData !== \"object\" ? classData : Object.keys(classData).filter((k)=>classData[k]).join(\" \");\n            }\n        }\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev && vNodeChildren.some(isHost)) {\n        consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomFunctional && typeof nodeName === \"function\") {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomKey) {\n        vnode.$key$ = key;\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation) {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text)=>{\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null\n    };\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomAttribute) {\n        vnode.$attrs$ = null;\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomKey) {\n        vnode.$key$ = null;\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation) {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node)=>node && node.$tag$ === Host;\nconst vdomFnUtils = {\n    forEach: (children, cb)=>children.map(convertToPublic).forEach(cb),\n    map: (children, cb)=>children.map(convertToPublic).map(cb).map(convertToPrivate)\n};\nconst convertToPublic = (node)=>({\n        vattrs: node.$attrs$,\n        vchildren: node.$children$,\n        vkey: node.$key$,\n        vname: node.$name$,\n        vtag: node.$tag$,\n        vtext: node.$text$\n    });\nconst convertToPrivate = (node)=>{\n    if (typeof node.vtag === \"function\") {\n        const vnodeData = Object.assign({}, node.vattrs);\n        if (node.vkey) {\n            vnodeData.key = node.vkey;\n        }\n        if (node.vname) {\n            vnodeData.name = node.vname;\n        }\n        return h(node.vtag, vnodeData, ...node.vchildren || []);\n    }\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\nconst validateInputProperties = (vnodeData)=>{\n    const props = Object.keys(vnodeData);\n    const typeIndex = props.indexOf(\"type\");\n    const minIndex = props.indexOf(\"min\");\n    const maxIndex = props.indexOf(\"max\");\n    const stepIndex = props.indexOf(\"min\");\n    const value = props.indexOf(\"value\");\n    if (value === -1) {\n        return;\n    }\n    if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n        consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n    }\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */ const setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags)=>{\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomClass && memberName === \"class\") {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c)=>c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c)=>c && !oldClasses.includes(c)));\n        } else if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomStyle && memberName === \"style\") {\n            // update style attribute, css properties and values\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.updatable) {\n                for(const prop in oldValue){\n                    if (!newValue || newValue[prop] == null) {\n                        if (!_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide && prop.includes(\"-\")) {\n                            elm.style.removeProperty(prop);\n                        } else {\n                            elm.style[prop] = \"\";\n                        }\n                    }\n                }\n            }\n            for(const prop in newValue){\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (!_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide && prop.includes(\"-\")) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    } else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        } else if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomKey && memberName === \"key\") ;\n        else if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomRef && memberName === \"ref\") {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        } else if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomListener && (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) && memberName[0] === \"o\" && memberName[1] === \"n\") {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === \"-\") {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            } else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            } else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        } else if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomPropOrAttr) {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || isComplex && newValue !== null) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes(\"-\")) {\n                        let n = newValue == null ? \"\" : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === \"list\") {\n                            isProp = false;\n                        // tslint:disable-next-line: triple-equals\n                        } else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    } else {\n                        elm[memberName] = newValue;\n                    }\n                } catch (e) {}\n            }\n            /**\n             * Need to manually update attribute if:\n             * - memberName is not an attribute\n             * - if we are rendering the host element in order to reflect attribute\n             * - if it's a SVG, since properties might not work in <svg>\n             * - if the newValue is null/undefined or 'false'.\n             */ let xlink = false;\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomXlink) {\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, \"\"))) {\n                    memberName = ln;\n                    xlink = true;\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === \"\") {\n                    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomXlink && xlink) {\n                        elm.removeAttributeNS(XLINK_NS, memberName);\n                    } else {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            } else if ((!isProp || flags & 4 /* isHost */  || isSvg) && !isComplex) {\n                newValue = newValue === true ? \"\" : newValue;\n                if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomXlink && xlink) {\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\n                } else {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value)=>!value ? [] : value.split(parseClassListRegex);\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName)=>{\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */  && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n    const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.updatable) {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for(memberName in oldVnodeAttrs){\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for(memberName in newVnodeAttrs){\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm)=>{\n    // tslint:disable-next-line: prefer-const\n    let newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation && !useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === \"slot\") {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + \"-s\");\n            }\n            newVNode.$flags$ |= newVNode.$children$ ? 2 /* isSlotFallback */  : 1 /* isSlotReference */ ;\n        }\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev && newVNode.$elm$) {\n        consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomText && newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    } else if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation && newVNode.$flags$ & 1 /* isSlotReference */ ) {\n        // create a slot reference node\n        elm = newVNode.$elm$ = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDebug || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode(\"\");\n    } else {\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.svg && !isSvgMode) {\n            isSvgMode = newVNode.$tag$ === \"svg\";\n        }\n        // create element\n        elm = newVNode.$elm$ = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.svg ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation && newVNode.$flags$ & 2 /* isSlotFallback */  ? \"slot-fb\" : newVNode.$tag$) : doc.createElement(_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation && newVNode.$flags$ & 2 /* isSlotFallback */  ? \"slot-fb\" : newVNode.$tag$);\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.svg && isSvgMode && newVNode.$tag$ === \"foreignObject\") {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomAttribute) {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if ((_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.scoped) && isDef(scopeId) && elm[\"s-si\"] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add(elm[\"s-si\"] = scopeId);\n        }\n        if (newVNode.$children$) {\n            for(i = 0; i < newVNode.$children$.length; ++i){\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.svg) {\n            if (newVNode.$tag$ === \"svg\") {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            } else if (elm.tagName === \"foreignObject\") {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation) {\n        elm[\"s-hn\"] = hostTagName;\n        if (newVNode.$flags$ & (2 /* isSlotFallback */  | 1 /* isSlotReference */ )) {\n            // remember the content reference comment\n            elm[\"s-sr\"] = true;\n            // remember the content reference comment\n            elm[\"s-cr\"] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm[\"s-sn\"] = newVNode.$name$ || \"\";\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive)=>{\n    plt.$flags$ |= 1 /* isTmpDisconnected */ ;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for(let i = oldSlotChildNodes.length - 1; i >= 0; i--){\n        const childNode = oldSlotChildNodes[i];\n        if (childNode[\"s-hn\"] !== hostTagName && childNode[\"s-ol\"]) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot in need be\n            childNode[\"s-ol\"].remove();\n            childNode[\"s-ol\"] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* isTmpDisconnected */ ;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx)=>{\n    let containerElm = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation && parentElm[\"s-cr\"] && parentElm[\"s-cr\"].parentNode || parentElm;\n    let childNode;\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for(; startIdx <= endIdx; ++startIdx){\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation ? referenceNode(before) : before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm)=>{\n    for(; startIdx <= endIdx; ++startIdx){\n        if (vnode = vnodes[startIdx]) {\n            elm = vnode.$elm$;\n            callNodeRefs(vnode);\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation) {\n                // we're removing this element\n                // so it's possible we need to show slot fallback content now\n                checkSlotFallbackVisibility = true;\n                if (elm[\"s-ol\"]) {\n                    // remove the original location comment\n                    elm[\"s-ol\"].remove();\n                } else {\n                    // it's possible that child nodes of the node\n                    // that's being removed are slot nodes\n                    putBackInOriginalLocation(elm, true);\n                }\n            }\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh)=>{\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while(oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx){\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        } else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        } else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        } else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // Vnode moved right\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation && (oldStartVnode.$tag$ === \"slot\" || newEndVnode.$tag$ === \"slot\")) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // Vnode moved left\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation && (oldStartVnode.$tag$ === \"slot\" || newEndVnode.$tag$ === \"slot\")) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        } else {\n            // createKeyToOldIdx\n            idxInOld = -1;\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomKey) {\n                for(i = oldStartIdx; i <= oldEndIdx; ++i){\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomKey && idxInOld >= 0) {\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n                } else {\n                    patch(elmToMove, newStartVnode);\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            } else {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation) {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                } else {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    } else if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.updatable && newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2)=>{\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation && vnode1.$tag$ === \"slot\") {\n            return vnode1.$name$ === vnode2.$name$;\n        }\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomKey) {\n            return vnode1.$key$ === vnode2.$key$;\n        }\n        return true;\n    }\n    return false;\n};\nconst referenceNode = (node)=>{\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return node && node[\"s-ol\"] || node;\n};\nconst parentReferenceNode = (node)=>(node[\"s-ol\"] ? node[\"s-ol\"] : node).parentNode;\nconst patch = (oldVNode, newVNode)=>{\n    const elm = newVNode.$elm$ = oldVNode.$elm$;\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if (!_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomText || text === null) {\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.svg) {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === \"svg\" ? true : tag === \"foreignObject\" ? false : isSvgMode;\n        }\n        // element node\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomAttribute || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.reflect) {\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slot && tag === \"slot\") ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.updatable && oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        } else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.updatable && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomText && oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = \"\";\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        } else if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.updatable && oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.svg && isSvgMode && tag === \"svg\") {\n            isSvgMode = false;\n        }\n    } else if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomText && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation && (defaultHolder = elm[\"s-cr\"])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    } else if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomText && oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst updateFallbackSlotVisibility = (elm)=>{\n    // tslint:disable-next-line: prefer-const\n    let childNodes = elm.childNodes;\n    let childNode;\n    let i;\n    let ilen;\n    let j;\n    let slotNameAttr;\n    let nodeType;\n    for(i = 0, ilen = childNodes.length; i < ilen; i++){\n        childNode = childNodes[i];\n        if (childNode.nodeType === 1 /* ElementNode */ ) {\n            if (childNode[\"s-sr\"]) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                slotNameAttr = childNode[\"s-sn\"];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                for(j = 0; j < ilen; j++){\n                    nodeType = childNodes[j].nodeType;\n                    if (childNodes[j][\"s-hn\"] !== childNode[\"s-hn\"] || slotNameAttr !== \"\") {\n                        // this sibling node is from a different component OR is a named fallback slot node\n                        if (nodeType === 1 /* ElementNode */  && slotNameAttr === childNodes[j].getAttribute(\"slot\")) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    } else {\n                        // this is a default fallback slot node\n                        // any element or text node (with content)\n                        // should hide the default fallback slot node\n                        if (nodeType === 1 /* ElementNode */  || nodeType === 3 /* TextNode */  && childNodes[j].textContent.trim() !== \"\") {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\nconst relocateNodes = [];\nconst relocateSlotContent = (elm)=>{\n    // tslint:disable-next-line: prefer-const\n    let childNode;\n    let node;\n    let hostContentNodes;\n    let slotNameAttr;\n    let relocateNodeData;\n    let j;\n    let i = 0;\n    let childNodes = elm.childNodes;\n    let ilen = childNodes.length;\n    for(; i < ilen; i++){\n        childNode = childNodes[i];\n        if (childNode[\"s-sr\"] && (node = childNode[\"s-cr\"]) && node.parentNode) {\n            // first got the content reference comment node\n            // then we got it's parent, which is where all the host content is in now\n            hostContentNodes = node.parentNode.childNodes;\n            slotNameAttr = childNode[\"s-sn\"];\n            for(j = hostContentNodes.length - 1; j >= 0; j--){\n                node = hostContentNodes[j];\n                if (!node[\"s-cn\"] && !node[\"s-nr\"] && node[\"s-hn\"] !== childNode[\"s-hn\"]) {\n                    // let's do some relocating to its new home\n                    // but never relocate a content reference node\n                    // that is suppose to always represent the original content location\n                    if (isNodeLocatedInSlot(node, slotNameAttr)) {\n                        // it's possible we've already decided to relocate this node\n                        relocateNodeData = relocateNodes.find((r)=>r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        node[\"s-sn\"] = node[\"s-sn\"] || slotNameAttr;\n                        if (relocateNodeData) {\n                            // previously we never found a slot home for this node\n                            // but turns out we did, so let's remember it now\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        } else {\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node\n                            });\n                        }\n                        if (node[\"s-sr\"]) {\n                            relocateNodes.map((relocateNode)=>{\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node[\"s-sn\"])) {\n                                    relocateNodeData = relocateNodes.find((r)=>r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    } else if (!relocateNodes.some((r)=>r.$nodeToRelocate$ === node)) {\n                        // so far this element does not have a slot home, not setting slotRefNode on purpose\n                        // if we never find a home for this element then we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node\n                        });\n                    }\n                }\n            }\n        }\n        if (childNode.nodeType === 1 /* ElementNode */ ) {\n            relocateSlotContent(childNode);\n        }\n    }\n};\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr)=>{\n    if (nodeToRelocate.nodeType === 1 /* ElementNode */ ) {\n        if (nodeToRelocate.getAttribute(\"slot\") === null && slotNameAttr === \"\") {\n            return true;\n        }\n        if (nodeToRelocate.getAttribute(\"slot\") === slotNameAttr) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate[\"s-sn\"] === slotNameAttr) {\n        return true;\n    }\n    return slotNameAttr === \"\";\n};\nconst callNodeRefs = (vNode)=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomRef) {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(callNodeRefs);\n    }\n};\nconst renderVdom = (hostRef, renderFnResults)=>{\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    // <Host> runtime check\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n        throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.reflect && cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute])=>rootVnode.$attrs$[attribute] = hostElm[propName]);\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */ ;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm;\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.scoped || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom) {\n        scopeId = hostElm[\"s-sc\"];\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation) {\n        contentRef = hostElm[\"s-cr\"];\n        useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */ ) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation) {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* isTmpDisconnected */ ;\n        if (checkSlotRelocate) {\n            relocateSlotContent(rootVnode.$elm$);\n            let relocateData;\n            let nodeToRelocate;\n            let orgLocationNode;\n            let parentNodeRef;\n            let insertBeforeNode;\n            let refNode;\n            let i = 0;\n            for(; i < relocateNodes.length; i++){\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate[\"s-ol\"]) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    orgLocationNode = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDebug || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide ? originalLocationDebugNode(nodeToRelocate) : doc.createTextNode(\"\");\n                    orgLocationNode[\"s-nr\"] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore(nodeToRelocate[\"s-ol\"] = orgLocationNode, nodeToRelocate);\n                }\n            }\n            for(i = 0; i < relocateNodes.length; i++){\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (relocateData.$slotRefNode$) {\n                    // by default we're just going to insert it directly\n                    // after the slot reference node\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n                    orgLocationNode = nodeToRelocate[\"s-ol\"];\n                    while(orgLocationNode = orgLocationNode.previousSibling){\n                        refNode = orgLocationNode[\"s-nr\"];\n                        if (refNode && refNode[\"s-sn\"] === nodeToRelocate[\"s-sn\"] && parentNodeRef === refNode.parentNode) {\n                            refNode = refNode.nextSibling;\n                            if (!refNode || !refNode[\"s-nr\"]) {\n                                insertBeforeNode = refNode;\n                                break;\n                            }\n                        }\n                    }\n                    if (!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode || nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate[\"s-hn\"] && nodeToRelocate[\"s-ol\"]) {\n                                // probably a component in the index.html that doesn't have it's hostname set\n                                nodeToRelocate[\"s-hn\"] = nodeToRelocate[\"s-ol\"].parentNode.nodeName;\n                            }\n                            // add it back to the dom but in its new home\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                } else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* ElementNode */ ) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* isTmpDisconnected */ ;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\n// slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\nconst slotReferenceDebugNode = (slotVNode)=>doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : \"\"}> (host=${hostTagName.toLowerCase()})`);\nconst originalLocationDebugNode = (nodeToRelocate)=>doc.createComment(`org-location for ` + (nodeToRelocate.localName ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate[\"s-hn\"]})` : `[${nodeToRelocate.textContent}]`));\nconst getElement = (ref)=>_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref;\nconst createEvent = (ref, name, flags)=>{\n    const elm = getElement(ref);\n    return {\n        emit: (detail)=>{\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev && !elm.isConnected) {\n                consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n            }\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* Bubbles */ ),\n                composed: !!(flags & 2 /* Composed */ ),\n                cancelable: !!(flags & 1 /* Cancellable */ ),\n                detail\n            });\n        }\n    };\n};\nconst emitEvent = (elm, name, opts)=>{\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent)=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent[\"s-p\"]) {\n        ancestorComponent[\"s-p\"].push(new Promise((r)=>hostRef.$onRenderResolve$ = r));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad)=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.taskQueue && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.updatable) {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */ ;\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.asyncLoading && hostRef.$flags$ & 4 /* isWaitingForChildren */ ) {\n        hostRef.$flags$ |= 512 /* needsRerender */ ;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = ()=>dispatchHooks(hostRef, isInitialLoad);\n    return _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\nconst dispatchHooks = (hostRef, isInitialLoad)=>{\n    const elm = hostRef.$hostElement$;\n    const endSchedule = createTime(\"scheduleUpdate\", hostRef.$cmpMeta$.$tagName$);\n    const instance = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    let promise;\n    if (isInitialLoad) {\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hostListener) {\n            hostRef.$flags$ |= 256 /* isListenReady */ ;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event])=>safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = null;\n            }\n        }\n        emitLifecycleEvent(elm, \"componentWillLoad\");\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cmpWillLoad) {\n            promise = safeCall(instance, \"componentWillLoad\");\n        }\n    } else {\n        emitLifecycleEvent(elm, \"componentWillUpdate\");\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cmpWillUpdate) {\n            promise = safeCall(instance, \"componentWillUpdate\");\n        }\n    }\n    emitLifecycleEvent(elm, \"componentWillRender\");\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cmpWillRender) {\n        promise = then(promise, ()=>safeCall(instance, \"componentWillRender\"));\n    }\n    endSchedule();\n    return then(promise, ()=>updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad)=>{\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime(\"update\", hostRef.$cmpMeta$.$tagName$);\n    const rc = elm[\"s-rc\"];\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.style && isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime(\"render\", hostRef.$cmpMeta$.$tagName$);\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev) {\n        hostRef.$flags$ |= 1024 /* devOnRender */ ;\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide) {\n        await callRender(hostRef, instance, elm);\n    } else {\n        callRender(hostRef, instance, elm);\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cssVarShim && plt.$cssShim$) {\n        plt.$cssShim$.updateHost(elm);\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev) {\n        hostRef.$renderCount$++;\n        hostRef.$flags$ &= ~1024 /* devOnRender */ ;\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide) {\n        try {\n            // manually connected child components during server-side hydrate\n            serverSideConnected(elm);\n            if (isInitialLoad) {\n                // using only during server-side hydrate\n                if (hostRef.$cmpMeta$.$flags$ & 1 /* shadowDomEncapsulation */ ) {\n                    elm[\"s-en\"] = \"\";\n                } else if (hostRef.$cmpMeta$.$flags$ & 2 /* scopedCssEncapsulation */ ) {\n                    elm[\"s-en\"] = \"c\";\n                }\n            }\n        } catch (e) {\n            consoleError(e, elm);\n        }\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.asyncLoading && rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb)=>cb());\n        elm[\"s-rc\"] = undefined;\n    }\n    endRender();\n    endUpdate();\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.asyncLoading) {\n        const childrenPromises = elm[\"s-p\"];\n        const postUpdate = ()=>postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        } else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */ ;\n            childrenPromises.length = 0;\n        }\n    } else {\n        postUpdateComponent(hostRef);\n    }\n};\nconst callRender = (hostRef, instance, elm)=>{\n    // in order for bundlers to correctly treeshake the BUILD object\n    // we need to ensure BUILD is not deoptimized within a try/catch\n    // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n    const allRenderFn = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.allRenderFn ? true : false;\n    const lazyLoad = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad ? true : false;\n    const taskQueue = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.taskQueue ? true : false;\n    const updatable = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.updatable ? true : false;\n    try {\n        renderingRef = instance;\n        instance = allRenderFn ? instance.render() : instance.render && instance.render();\n        if (updatable && taskQueue) {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */ ;\n        }\n        if (updatable || lazyLoad) {\n            hostRef.$flags$ |= 2 /* hasRendered */ ;\n        }\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hasRenderFn || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.reflect) {\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.vdomRender || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.reflect) {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide) {\n                    return Promise.resolve(instance).then((value)=>renderVdom(hostRef, value));\n                } else {\n                    renderVdom(hostRef, instance);\n                }\n            } else {\n                elm.textContent = instance;\n            }\n        }\n    } catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    renderingRef = null;\n    return null;\n};\nconst getRenderingRef = ()=>renderingRef;\nconst postUpdateComponent = (hostRef)=>{\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime(\"postUpdate\", tagName);\n    const instance = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cmpDidRender) {\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev) {\n            hostRef.$flags$ |= 1024 /* devOnRender */ ;\n        }\n        safeCall(instance, \"componentDidRender\");\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev) {\n            hostRef.$flags$ &= ~1024 /* devOnRender */ ;\n        }\n    }\n    emitLifecycleEvent(elm, \"componentDidRender\");\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */ )) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */ ;\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.asyncLoading && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cssAnnotations) {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cmpDidLoad) {\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev) {\n                hostRef.$flags$ |= 2048 /* devOnDidLoad */ ;\n            }\n            safeCall(instance, \"componentDidLoad\");\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev) {\n                hostRef.$flags$ &= ~2048 /* devOnDidLoad */ ;\n            }\n        }\n        emitLifecycleEvent(elm, \"componentDidLoad\");\n        endPostUpdate();\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.asyncLoading) {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad(tagName);\n            }\n        }\n    } else {\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cmpDidUpdate) {\n            // we've already loaded this component\n            // fire off the user's componentDidUpdate method (if one was provided)\n            // componentDidUpdate runs AFTER render() has been called\n            // and all child components have finished updating\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev) {\n                hostRef.$flags$ |= 1024 /* devOnRender */ ;\n            }\n            safeCall(instance, \"componentDidUpdate\");\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev) {\n                hostRef.$flags$ &= ~1024 /* devOnRender */ ;\n            }\n        }\n        emitLifecycleEvent(elm, \"componentDidUpdate\");\n        endPostUpdate();\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hotModuleReplacement) {\n        elm[\"s-hmr-load\"] && elm[\"s-hmr-load\"]();\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.method && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad) {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.asyncLoading) {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */ ) {\n            nextTick(()=>scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */  | 512 /* needsRerender */ );\n    }\n// ( •_•)\n// ( •_•)>⌐■-■\n// (⌐■_■)\n};\nconst forceUpdate = (ref)=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.updatable) {\n        const hostRef = getHostRef(ref);\n        const isConnected = hostRef.$hostElement$.isConnected;\n        if (isConnected && (hostRef.$flags$ & (2 /* hasRendered */  | 16 /* isQueuedForUpdate */ )) === 2 /* hasRendered */ ) {\n            scheduleUpdate(hostRef, false);\n        }\n        // Returns \"true\" when the forced update was successfully scheduled\n        return isConnected;\n    }\n    return false;\n};\nconst appDidLoad = (who)=>{\n    // on appload\n    // we have finish the first big initial render\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cssAnnotations) {\n        addHydratedFlag(doc.documentElement);\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.asyncQueue) {\n        plt.$flags$ |= 2 /* appLoaded */ ;\n    }\n    nextTick(()=>emitEvent(win, \"appload\", {\n            detail: {\n                namespace: _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.NAMESPACE\n            }\n        }));\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.profile && performance.measure) {\n        performance.measure(`[Stencil] ${_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.NAMESPACE} initial load (by ${who})`, \"st:app:start\");\n    }\n};\nconst safeCall = (instance, method, arg)=>{\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        } catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn)=>{\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst emitLifecycleEvent = (elm, lifecycleName)=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lifecycleDOMEvents) {\n        emitEvent(elm, \"stencil_\" + lifecycleName, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                namespace: _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.NAMESPACE\n            }\n        });\n    }\n};\nconst addHydratedFlag = (elm)=>_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydratedClass ? elm.classList.add(\"hydrated\") : _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydratedAttribute ? elm.setAttribute(\"hydrated\", \"\") : undefined;\nconst serverSideConnected = (elm)=>{\n    const children = elm.children;\n    if (children != null) {\n        for(let i = 0, ii = children.length; i < ii; i++){\n            const childElm = children[i];\n            if (typeof childElm.connectedCallback === \"function\") {\n                childElm.connectedCallback();\n            }\n            serverSideConnected(childElm);\n        }\n    }\n};\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef)=>{\n    const endHydrate = createTime(\"hydrateClient\", tagName);\n    const shadowRoot = hostElm.shadowRoot;\n    const childRenderNodes = [];\n    const slotNodes = [];\n    const shadowRootNodes = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom && shadowRoot ? [] : null;\n    const vnode = hostRef.$vnode$ = newVNode(tagName, null);\n    if (!plt.$orgLocNodes$) {\n        initializeDocumentHydrate(doc.body, plt.$orgLocNodes$ = new Map());\n    }\n    hostElm[HYDRATE_ID] = hostId;\n    hostElm.removeAttribute(HYDRATE_ID);\n    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n    childRenderNodes.map((c)=>{\n        const orgLocationId = c.$hostId$ + \".\" + c.$nodeId$;\n        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n        const node = c.$elm$;\n        if (orgLocationNode && supportsShadow && orgLocationNode[\"s-en\"] === \"\") {\n            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n        }\n        if (!shadowRoot) {\n            node[\"s-hn\"] = tagName;\n            if (orgLocationNode) {\n                node[\"s-ol\"] = orgLocationNode;\n                node[\"s-ol\"][\"s-nr\"] = node;\n            }\n        }\n        plt.$orgLocNodes$.delete(orgLocationId);\n    });\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom && shadowRoot) {\n        shadowRootNodes.map((shadowRootNode)=>{\n            if (shadowRootNode) {\n                shadowRoot.appendChild(shadowRootNode);\n            }\n        });\n    }\n    endHydrate();\n};\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId)=>{\n    let childNodeType;\n    let childIdSplt;\n    let childVNode;\n    let i;\n    if (node.nodeType === 1 /* ElementNode */ ) {\n        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n        if (childNodeType) {\n            // got the node data from the element's attribute\n            // `${hostId}.${nodeId}.${depth}.${index}`\n            childIdSplt = childNodeType.split(\".\");\n            if (childIdSplt[0] === hostId || childIdSplt[0] === \"0\") {\n                childVNode = {\n                    $flags$: 0,\n                    $hostId$: childIdSplt[0],\n                    $nodeId$: childIdSplt[1],\n                    $depth$: childIdSplt[2],\n                    $index$: childIdSplt[3],\n                    $tag$: node.tagName.toLowerCase(),\n                    $elm$: node,\n                    $attrs$: null,\n                    $children$: null,\n                    $key$: null,\n                    $name$: null,\n                    $text$: null\n                };\n                childRenderNodes.push(childVNode);\n                node.removeAttribute(HYDRATE_CHILD_ID);\n                // this is a new child vnode\n                // so ensure its parent vnode has the vchildren array\n                if (!parentVNode.$children$) {\n                    parentVNode.$children$ = [];\n                }\n                // add our child vnode to a specific index of the vnode's children\n                parentVNode.$children$[childVNode.$index$] = childVNode;\n                // this is now the new parent vnode for all the next child checks\n                parentVNode = childVNode;\n                if (shadowRootNodes && childVNode.$depth$ === \"0\") {\n                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                }\n            }\n        }\n        // recursively drill down, end to start so we can remove nodes\n        for(i = node.childNodes.length - 1; i >= 0; i--){\n            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n        }\n        if (node.shadowRoot) {\n            // keep drilling down through the shadow root nodes\n            for(i = node.shadowRoot.childNodes.length - 1; i >= 0; i--){\n                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n            }\n        }\n    } else if (node.nodeType === 8 /* CommentNode */ ) {\n        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n        childIdSplt = node.nodeValue.split(\".\");\n        if (childIdSplt[1] === hostId || childIdSplt[1] === \"0\") {\n            // comment node for either the host id or a 0 host id\n            childNodeType = childIdSplt[0];\n            childVNode = {\n                $flags$: 0,\n                $hostId$: childIdSplt[1],\n                $nodeId$: childIdSplt[2],\n                $depth$: childIdSplt[3],\n                $index$: childIdSplt[4],\n                $elm$: node,\n                $attrs$: null,\n                $children$: null,\n                $key$: null,\n                $name$: null,\n                $tag$: null,\n                $text$: null\n            };\n            if (childNodeType === TEXT_NODE_ID) {\n                childVNode.$elm$ = node.nextSibling;\n                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* TextNode */ ) {\n                    childVNode.$text$ = childVNode.$elm$.textContent;\n                    childRenderNodes.push(childVNode);\n                    // remove the text comment since it's no longer needed\n                    node.remove();\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                    if (shadowRootNodes && childVNode.$depth$ === \"0\") {\n                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                    }\n                }\n            } else if (childVNode.$hostId$ === hostId) {\n                // this comment node is specifcally for this host id\n                if (childNodeType === SLOT_NODE_ID) {\n                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n                    childVNode.$tag$ = \"slot\";\n                    if (childIdSplt[5]) {\n                        node[\"s-sn\"] = childVNode.$name$ = childIdSplt[5];\n                    } else {\n                        node[\"s-sn\"] = \"\";\n                    }\n                    node[\"s-sr\"] = true;\n                    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom && shadowRootNodes) {\n                        // browser support shadowRoot and this is a shadow dom component\n                        // create an actual slot element\n                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n                        if (childVNode.$name$) {\n                            // add the slot name attribute\n                            childVNode.$elm$.setAttribute(\"name\", childVNode.$name$);\n                        }\n                        // insert the new slot element before the slot comment\n                        node.parentNode.insertBefore(childVNode.$elm$, node);\n                        // remove the slot comment since it's not needed for shadow\n                        node.remove();\n                        if (childVNode.$depth$ === \"0\") {\n                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                        }\n                    }\n                    slotNodes.push(childVNode);\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                } else if (childNodeType === CONTENT_REF_ID) {\n                    // `${CONTENT_REF_ID}.${hostId}`;\n                    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom && shadowRootNodes) {\n                        // remove the content ref comment since it's not needed for shadow\n                        node.remove();\n                    } else if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation) {\n                        hostElm[\"s-cr\"] = node;\n                        node[\"s-cn\"] = true;\n                    }\n                }\n            }\n        }\n    } else if (parentVNode && parentVNode.$tag$ === \"style\") {\n        const vnode = newVNode(null, node.textContent);\n        vnode.$elm$ = node;\n        vnode.$index$ = \"0\";\n        parentVNode.$children$ = [\n            vnode\n        ];\n    }\n};\nconst initializeDocumentHydrate = (node, orgLocNodes)=>{\n    if (node.nodeType === 1 /* ElementNode */ ) {\n        let i = 0;\n        for(; i < node.childNodes.length; i++){\n            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n        }\n        if (node.shadowRoot) {\n            for(i = 0; i < node.shadowRoot.childNodes.length; i++){\n                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n            }\n        }\n    } else if (node.nodeType === 8 /* CommentNode */ ) {\n        const childIdSplt = node.nodeValue.split(\".\");\n        if (childIdSplt[0] === ORG_LOCATION_ID) {\n            orgLocNodes.set(childIdSplt[1] + \".\" + childIdSplt[2], node);\n            node.nodeValue = \"\";\n            // useful to know if the original location is\n            // the root light-dom of a shadow dom component\n            node[\"s-en\"] = childIdSplt[3];\n        }\n    }\n};\nconst parsePropertyValue = (propValue, propType)=>{\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.propBoolean && propType & 4 /* Boolean */ ) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === \"false\" ? false : propValue === \"\" || !!propValue;\n        }\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.propNumber && propType & 2 /* Number */ ) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.propString && propType & 1 /* String */ ) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName)=>getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta)=>{\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    if ((!_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad || !(flags & 8 /* isConstructingInstance */ ) || oldVal === undefined) && newVal !== oldVal) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev) {\n            if (hostRef.$flags$ & 1024 /* devOnRender */ ) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, \"\\nElement\", elm, \"\\nNew value\", newVal, \"\\nOld value\", oldVal);\n            } else if (hostRef.$flags$ & 2048 /* devOnDidLoad */ ) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, \"\\nElement\", elm, \"\\nNew value\", newVal, \"\\nOld value\", oldVal);\n            }\n        }\n        if (!_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad || instance) {\n            // get an array of method names of watch functions to call\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* isWatchReady */ ) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName)=>{\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        } catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.updatable && (flags & (2 /* hasRendered */  | 16 /* isQueuedForUpdate */ )) === 2 /* hasRendered */ ) {\n                if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n                    if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n                        return;\n                    }\n                }\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags)=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.member && cmpMeta.$members$) {\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.watchCallback && Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]])=>{\n            if ((_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.prop || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.state) && (memberFlags & 31 /* Prop */  || (!_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad || flags & 2 /* proxyState */ ) && memberFlags & 32 /* State */ )) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get () {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set (newValue) {\n                        // only during dev time\n                        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev) {\n                            const ref = getHostRef(this);\n                            if (// we are proxying the instance (not element)\n                            (flags & 1 /* isElementConstructor */ ) === 0 && // the element is not constructing\n                            (ref.$flags$ & 8 /* isConstructingInstance */ ) === 0 && // the member is a prop\n                            (memberFlags & 31 /* Prop */ ) !== 0 && // the member is not mutable\n                            (memberFlags & 1024 /* Mutable */ ) === 0) {\n                                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\n                            }\n                        }\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true\n                });\n            } else if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.method && flags & 1 /* isElementConstructor */  && memberFlags & 64 /* Method */ ) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value (...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(()=>ref.$lazyInstance$[memberName](...args));\n                    }\n                });\n            }\n        });\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.observeAttribute && (!_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad || flags & 1 /* isElementConstructor */ )) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function(attrName, _oldValue, newValue) {\n                plt.jmp(()=>{\n                    const propName = attrNameToPropName.get(attrName);\n                    this[propName] = newValue === null && typeof this[propName] === \"boolean\" ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members.filter(([_, m])=>m[0] & 15 /* HasAttribute */ ) // filter to only keep props that should match attributes\n            .map(([propName, m])=>{\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.reflect && m[0] & 512 /* ReflectAttr */ ) {\n                    cmpMeta.$attrsToReflect$.push([\n                        propName,\n                        attrName\n                    ]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr)=>{\n    // initializeComponent\n    if ((_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.style) && (hostRef.$flags$ & 32 /* hasInitializedComponent */ ) === 0) {\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateClientSide) {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */ ;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if ((_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDebug) && !Cstr) {\n                throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n            }\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.member && !Cstr.isProxied) {\n                // we'eve never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.watchCallback) {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */ );\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime(\"createInstance\", cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.member) {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */ ;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            } catch (e) {\n                consoleError(e);\n            }\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.member) {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */ ;\n            }\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.watchCallback) {\n                hostRef.$flags$ |= 128 /* isWatchReady */ ;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        } else {\n            // sync constructor component\n            Cstr = elm.constructor;\n            hostRef.$flags$ |= 128 /* isWatchReady */  | 32 /* hasInitializedComponent */ ;\n        }\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.style && Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.mode && typeof style !== \"string\") {\n                style = style[hostRef.$modeName$ = computeMode(elm)];\n                if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide && hostRef.$modeName$) {\n                    elm.setAttribute(\"s-mode\", hostRef.$modeName$);\n                }\n            }\n            const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime(\"registerStyles\", cmpMeta.$tagName$);\n                if (!_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDomShim && cmpMeta.$flags$ & 8 /* needsShadowDomShim */ ) {\n                    style = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@stencil+core@2.5.2\").then(__webpack_require__.bind(__webpack_require__, /*! ./shadow-css.js */ \"(ssr)/./node_modules/.pnpm/@stencil+core@2.5.2/node_modules/@stencil/core/internal/client/shadow-css.js\")).then((m)=>m.scopeCss(style, scopeId, false));\n                }\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */ ));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = ()=>scheduleUpdate(hostRef, true);\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.asyncLoading && ancestorComponent && ancestorComponent[\"s-rc\"]) {\n        // this is the intial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent[\"s-rc\"].push(schedule);\n    } else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance)=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.connectedCallback) {\n        safeCall(instance, \"connectedCallback\");\n    }\n};\nconst connectedCallback = (elm)=>{\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */ ) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime(\"connectedCallback\", cmpMeta.$tagName$);\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hostListenerTargetParent) {\n            // only run if we have listeners being attached to a parent\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n        }\n        if (!(hostRef.$flags$ & 1 /* hasConnected */ )) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */ ;\n            let hostId;\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateClientSide) {\n                hostId = elm.getAttribute(HYDRATE_ID);\n                if (hostId) {\n                    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */ ) {\n                        const scopeId = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.mode ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute(\"s-mode\")) : addStyle(elm.shadowRoot, cmpMeta);\n                        elm.classList.remove(scopeId + \"-h\", scopeId + \"-s\");\n                    }\n                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n                }\n            }\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotRelocation && !hostId) {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide || (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slot || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom) && cmpMeta.$flags$ & (4 /* hasSlotRelocation */  | 8 /* needsShadowDomShim */ )) {\n                    setContentReference(elm);\n                }\n            }\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.asyncLoading) {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while(ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host){\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateClientSide && ancestorComponent.nodeType === 1 /* ElementNode */  && ancestorComponent.hasAttribute(\"s-id\") && ancestorComponent[\"s-p\"] || ancestorComponent[\"s-p\"]) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.prop && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad && !_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide && cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]])=>{\n                    if (memberFlags & 31 /* Prop */  && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.initializeNextTick) {\n                // connectedCallback, taskQueue, initialLoad\n                // angular sets attribute AFTER connectCallback\n                // https://github.com/angular/angular/issues/18909\n                // https://github.com/angular/angular/issues/19940\n                nextTick(()=>initializeComponent(elm, hostRef, cmpMeta));\n            } else {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        } else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm)=>{\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = elm[\"s-cr\"] = doc.createComment(_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDebug ? `content-ref (host=${elm.localName})` : \"\");\n    contentRefElm[\"s-cn\"] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectedCallback = (elm)=>{\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */ ) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hostListener) {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map((rmListener)=>rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        // clear CSS var-shim tracking\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cssVarShim && plt.$cssShim$) {\n            plt.$cssShim$.removeHost(elm);\n        }\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.disconnectedCallback) {\n            safeCall(instance, \"disconnectedCallback\");\n        }\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cmpDidUnload) {\n            safeCall(instance, \"componentDidUnload\");\n        }\n    }\n};\nconst defineCustomElement = (Cstr, compactMeta)=>{\n    customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nconst proxyCustomElement = (Cstr, compactMeta)=>{\n    const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1]\n    };\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.watchCallback) {\n        cmpMeta.$watchers$ = Cstr.$watchers$;\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */ ) {\n        cmpMeta.$flags$ |= 8 /* needsShadowDomShim */ ;\n    }\n    const originalConnectedCallback = Cstr.prototype.connectedCallback;\n    const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n    Object.assign(Cstr.prototype, {\n        __registerHost () {\n            registerHost(this, cmpMeta);\n        },\n        connectedCallback () {\n            connectedCallback(this);\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.connectedCallback && originalConnectedCallback) {\n                originalConnectedCallback.call(this);\n            }\n        },\n        disconnectedCallback () {\n            disconnectedCallback(this);\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.disconnectedCallback && originalDisconnectedCallback) {\n                originalDisconnectedCallback.call(this);\n            }\n        }\n    });\n    Cstr.is = cmpMeta.$tagName$;\n    return proxyComponent(Cstr, cmpMeta, 1 /* isElementConstructor */  | 2 /* proxyState */ );\n};\nconst forceModeUpdate = (elm)=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.style && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.mode && !_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad) {\n        const mode = computeMode(elm);\n        const hostRef = getHostRef(elm);\n        if (hostRef.$modeName$ !== mode) {\n            const cmpMeta = hostRef.$cmpMeta$;\n            const oldScopeId = elm[\"s-sc\"];\n            const scopeId = getScopeId(cmpMeta, mode);\n            const style = elm.constructor.style[mode];\n            const flags = cmpMeta.$flags$;\n            if (style) {\n                if (!styles.has(scopeId)) {\n                    registerStyle(scopeId, style, !!(flags & 1 /* shadowDomEncapsulation */ ));\n                }\n                hostRef.$modeName$ = mode;\n                elm.classList.remove(oldScopeId + \"-h\", oldScopeId + \"-s\");\n                attachStyles(hostRef);\n                forceUpdate(elm);\n            }\n        }\n    }\n};\nconst attachShadow = (el)=>{\n    if (supportsShadow) {\n        el.attachShadow({\n            mode: \"open\"\n        });\n    } else {\n        el.shadowRoot = el;\n    }\n};\nconst hmrStart = (elm, cmpMeta, hmrVersionId)=>{\n    // ¯\\_(ツ)_/¯\n    const hostRef = getHostRef(elm);\n    // reset state flags to only have been connected\n    hostRef.$flags$ = 1 /* hasConnected */ ;\n    // TODO\n    // detatch any event listeners that may have been added\n    // because we're not passing an exact event name it'll\n    // remove all of this element's event, which is good\n    // create a callback for when this component finishes hmr\n    elm[\"s-hmr-load\"] = ()=>{\n        // finished hmr for this element\n        delete elm[\"s-hmr-load\"];\n    };\n    // re-initialize the component\n    initializeComponent(elm, hostRef, cmpMeta, hmrVersionId);\n};\nconst patchCloneNode = (HostElementPrototype)=>{\n    const orgCloneNode = HostElementPrototype.cloneNode;\n    HostElementPrototype.cloneNode = function(deep) {\n        const srcNode = this;\n        const isShadowDom = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n        const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slot && !isShadowDom && deep) {\n            let i = 0;\n            let slotted, nonStencilNode;\n            let stencilPrivates = [\n                \"s-id\",\n                \"s-cr\",\n                \"s-lr\",\n                \"s-rc\",\n                \"s-sc\",\n                \"s-p\",\n                \"s-cn\",\n                \"s-sr\",\n                \"s-sn\",\n                \"s-hn\",\n                \"s-ol\",\n                \"s-nr\",\n                \"s-si\"\n            ];\n            for(; i < srcNode.childNodes.length; i++){\n                slotted = srcNode.childNodes[i][\"s-nr\"];\n                nonStencilNode = stencilPrivates.every((privateField)=>!srcNode.childNodes[i][privateField]);\n                if (slotted) {\n                    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n                        clonedNode.__appendChild(slotted.cloneNode(true));\n                    } else {\n                        clonedNode.appendChild(slotted.cloneNode(true));\n                    }\n                }\n                if (nonStencilNode) {\n                    clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\n                }\n            }\n        }\n        return clonedNode;\n    };\n};\nconst patchSlotAppendChild = (HostElementPrototype)=>{\n    HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n    HostElementPrototype.appendChild = function(newChild) {\n        const slotName = newChild[\"s-sn\"] = getSlotName(newChild);\n        const slotNode = getHostSlotNode(this.childNodes, slotName);\n        if (slotNode) {\n            const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n            const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n            return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n        }\n        return this.__appendChild(newChild);\n    };\n};\nconst patchChildSlotNodes = (elm, cmpMeta)=>{\n    class FakeNodeList extends Array {\n        item(n) {\n            return this[n];\n        }\n    }\n    if (cmpMeta.$flags$ & 8 /* needsShadowDomShim */ ) {\n        const childNodesFn = elm.__lookupGetter__(\"childNodes\");\n        Object.defineProperty(elm, \"children\", {\n            get () {\n                return this.childNodes.map((n)=>n.nodeType === 1);\n            }\n        });\n        Object.defineProperty(elm, \"childElementCount\", {\n            get () {\n                return elm.children.length;\n            }\n        });\n        Object.defineProperty(elm, \"childNodes\", {\n            get () {\n                const childNodes = childNodesFn.call(this);\n                if ((plt.$flags$ & 1 /* isTmpDisconnected */ ) === 0 && getHostRef(this).$flags$ & 2 /* hasRendered */ ) {\n                    const result = new FakeNodeList();\n                    for(let i = 0; i < childNodes.length; i++){\n                        const slot = childNodes[i][\"s-nr\"];\n                        if (slot) {\n                            result.push(slot);\n                        }\n                    }\n                    return result;\n                }\n                return FakeNodeList.from(childNodes);\n            }\n        });\n    }\n};\nconst getSlotName = (node)=>node[\"s-sn\"] || node.nodeType === 1 && node.getAttribute(\"slot\") || \"\";\nconst getHostSlotNode = (childNodes, slotName)=>{\n    let i = 0;\n    let childNode;\n    for(; i < childNodes.length; i++){\n        childNode = childNodes[i];\n        if (childNode[\"s-sr\"] && childNode[\"s-sn\"] === slotName) {\n            return childNode;\n        }\n        childNode = getHostSlotNode(childNode.childNodes, slotName);\n        if (childNode) {\n            return childNode;\n        }\n    }\n    return null;\n};\nconst getHostSlotChildNodes = (n, slotName)=>{\n    const childNodes = [\n        n\n    ];\n    while((n = n.nextSibling) && n[\"s-sn\"] === slotName){\n        childNodes.push(n);\n    }\n    return childNodes;\n};\nconst bootstrapLazy = (lazyBundles, options = {})=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.profile && performance.mark) {\n        performance.mark(\"st:app:start\");\n    }\n    installDevTools();\n    const endBootstrap = createTime(\"bootstrapLazy\");\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements1 = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector(\"meta[charset]\");\n    const visibilityStyle = /*@__PURE__*/ doc.createElement(\"style\");\n    const deferredConnectedCallbacks = [];\n    const styles = /*@__PURE__*/ doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n    let appLoadFallback;\n    let isBootstrapping = true;\n    let i = 0;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || \"./\", doc.baseURI).href;\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.asyncQueue) {\n        if (options.syncQueue) {\n            plt.$flags$ |= 4 /* queueSync */ ;\n        }\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateClientSide) {\n        // If the app is already hydrated there is not point to disable the\n        // async queue. This will improve the first input delay\n        plt.$flags$ |= 2 /* appLoaded */ ;\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateClientSide && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom) {\n        for(; i < styles.length; i++){\n            registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n        }\n    }\n    lazyBundles.map((lazyBundle)=>lazyBundle[1].map((compactMeta)=>{\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3]\n            };\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.member) {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hostListener) {\n                cmpMeta.$listeners$ = compactMeta[3];\n            }\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.reflect) {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.watchCallback) {\n                cmpMeta.$watchers$ = {};\n            }\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */ ) {\n                cmpMeta.$flags$ |= 8 /* needsShadowDomShim */ ;\n            }\n            const tagName = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.transformTagName && options.transformTagName ? options.transformTagName(cmpMeta.$tagName$) : cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self){\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDom && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */ ) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        if (supportsShadow) {\n                            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.shadowDelegatesFocus) {\n                                self.attachShadow({\n                                    mode: \"open\",\n                                    delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */ )\n                                });\n                            } else {\n                                self.attachShadow({\n                                    mode: \"open\"\n                                });\n                            }\n                        } else if (!_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide && !(\"shadowRoot\" in self)) {\n                            self.shadowRoot = self;\n                        }\n                    }\n                    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.slotChildNodesFix) {\n                        patchChildSlotNodes(self, cmpMeta);\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    } else {\n                        plt.jmp(()=>connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(()=>disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.cloneNodeFix) {\n                patchCloneNode(HostElement.prototype);\n            }\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.appendChildSlotFix) {\n                patchSlotAppendChild(HostElement.prototype);\n            }\n            if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hotModuleReplacement) {\n                HostElement.prototype[\"s-hmr\"] = function(hmrVersionId) {\n                    hmrStart(this, cmpMeta, hmrVersionId);\n                };\n            }\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements1.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements1.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */ ));\n            }\n        }));\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydratedClass || _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydratedAttribute) {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute(\"data-styles\", \"\");\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host)=>host.connectedCallback());\n    } else {\n        if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.profile) {\n            plt.jmp(()=>appLoadFallback = setTimeout(appDidLoad, 30, \"timeout\"));\n        } else {\n            plt.jmp(()=>appLoadFallback = setTimeout(appDidLoad, 30));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst getAssetPath = (path)=>{\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst setAssetPath = (path)=>plt.$resourcesUrl$ = path;\nconst getConnect = (_ref, tagName)=>{\n    const componentOnReady = ()=>{\n        let elm = doc.querySelector(tagName);\n        if (!elm) {\n            elm = doc.createElement(tagName);\n            doc.body.appendChild(elm);\n        }\n        return typeof elm.componentOnReady === \"function\" ? elm.componentOnReady() : Promise.resolve(elm);\n    };\n    const create = (...args)=>{\n        return componentOnReady().then((el)=>el.create(...args));\n    };\n    return {\n        create,\n        componentOnReady\n    };\n};\nconst getContext = (_elm, context)=>{\n    if (context in Context) {\n        return Context[context];\n    } else if (context === \"window\") {\n        return win;\n    } else if (context === \"document\") {\n        return doc;\n    } else if (context === \"isServer\" || context === \"isPrerender\") {\n        return _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide ? true : false;\n    } else if (context === \"isClient\") {\n        return _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hydrateServerSide ? false : true;\n    } else if (context === \"resourcesUrl\" || context === \"publicPath\") {\n        return getAssetPath(\".\");\n    } else if (context === \"queue\") {\n        return {\n            write: writeTask,\n            read: readTask,\n            tick: {\n                then (cb) {\n                    return nextTick(cb);\n                }\n            }\n        };\n    }\n    return undefined;\n};\nconst insertVdomAnnotations = (doc, staticComponents)=>{\n    if (doc != null) {\n        const docData = {\n            hostIds: 0,\n            rootLevelIds: 0,\n            staticComponents: new Set(staticComponents)\n        };\n        const orgLocationNodes = [];\n        parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n        orgLocationNodes.forEach((orgLocationNode)=>{\n            if (orgLocationNode != null) {\n                const nodeRef = orgLocationNode[\"s-nr\"];\n                let hostId = nodeRef[\"s-host-id\"];\n                let nodeId = nodeRef[\"s-node-id\"];\n                let childId = `${hostId}.${nodeId}`;\n                if (hostId == null) {\n                    hostId = 0;\n                    docData.rootLevelIds++;\n                    nodeId = docData.rootLevelIds;\n                    childId = `${hostId}.${nodeId}`;\n                    if (nodeRef.nodeType === 1 /* ElementNode */ ) {\n                        nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n                    } else if (nodeRef.nodeType === 3 /* TextNode */ ) {\n                        if (hostId === 0) {\n                            const textContent = nodeRef.nodeValue.trim();\n                            if (textContent === \"\") {\n                                // useless whitespace node at the document root\n                                orgLocationNode.remove();\n                                return;\n                            }\n                        }\n                        const commentBeforeTextNode = doc.createComment(childId);\n                        commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n                        nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n                    }\n                }\n                let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n                const orgLocationParentNode = orgLocationNode.parentElement;\n                if (orgLocationParentNode) {\n                    if (orgLocationParentNode[\"s-en\"] === \"\") {\n                        // ending with a \".\" means that the parent element\n                        // of this node's original location is a SHADOW dom element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.`;\n                    } else if (orgLocationParentNode[\"s-en\"] === \"c\") {\n                        // ending with a \".c\" means that the parent element\n                        // of this node's original location is a SCOPED element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.c`;\n                    }\n                }\n                orgLocationNode.nodeValue = orgLocationNodeId;\n            }\n        });\n    }\n};\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes)=>{\n    if (node == null) {\n        return;\n    }\n    if (node[\"s-nr\"] != null) {\n        orgLocationNodes.push(node);\n    }\n    if (node.nodeType === 1 /* ElementNode */ ) {\n        node.childNodes.forEach((childNode)=>{\n            const hostRef = getHostRef(childNode);\n            if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n                const cmpData = {\n                    nodeIds: 0\n                };\n                insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n            }\n            parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n        });\n    }\n};\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData)=>{\n    if (vnode != null) {\n        const hostId = ++docData.hostIds;\n        hostElm.setAttribute(HYDRATE_ID, hostId);\n        if (hostElm[\"s-cr\"] != null) {\n            hostElm[\"s-cr\"].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n        }\n        if (vnode.$children$ != null) {\n            const depth = 0;\n            vnode.$children$.forEach((vnodeChild, index)=>{\n                insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n            });\n        }\n        if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute(\"c-id\")) {\n            const parent = hostElm.parentElement;\n            if (parent && parent.childNodes) {\n                const parentChildNodes = Array.from(parent.childNodes);\n                const comment = parentChildNodes.find((node)=>node.nodeType === 8 /* CommentNode */  && node[\"s-sr\"]);\n                if (comment) {\n                    const index = parentChildNodes.indexOf(hostElm) - 1;\n                    vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment[\"s-host-id\"]}.${comment[\"s-node-id\"]}.0.${index}`);\n                }\n            }\n        }\n    }\n};\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index)=>{\n    const childElm = vnodeChild.$elm$;\n    if (childElm == null) {\n        return;\n    }\n    const nodeId = cmpData.nodeIds++;\n    const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n    childElm[\"s-host-id\"] = hostId;\n    childElm[\"s-node-id\"] = nodeId;\n    if (childElm.nodeType === 1 /* ElementNode */ ) {\n        childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n    } else if (childElm.nodeType === 3 /* TextNode */ ) {\n        const parentNode = childElm.parentNode;\n        const nodeName = parentNode.nodeName;\n        if (nodeName !== \"STYLE\" && nodeName !== \"SCRIPT\") {\n            const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n            const commentBeforeTextNode = doc.createComment(textNodeId);\n            parentNode.insertBefore(commentBeforeTextNode, childElm);\n        }\n    } else if (childElm.nodeType === 8 /* CommentNode */ ) {\n        if (childElm[\"s-sr\"]) {\n            const slotName = childElm[\"s-sn\"] || \"\";\n            const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n            childElm.nodeValue = slotNodeId;\n        }\n    }\n    if (vnodeChild.$children$ != null) {\n        const childDepth = depth + 1;\n        vnodeChild.$children$.forEach((vnode, index)=>{\n            insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n        });\n    }\n};\nconst setPlatformOptions = (opts)=>Object.assign(plt, opts);\nconst Fragment = (_, children)=>children;\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref)=>hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef)=>hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\nconst registerHost = (elm, cmpMeta)=>{\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map()\n    };\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev) {\n        hostRef.$renderCount$ = 0;\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.method && _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.lazyLoad) {\n        hostRef.$onInstancePromise$ = new Promise((r)=>hostRef.$onInstanceResolve$ = r);\n    }\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.asyncLoading) {\n        hostRef.$onReadyPromise$ = new Promise((r)=>hostRef.$onReadyResolve$ = r);\n        elm[\"s-p\"] = [];\n        elm[\"s-rc\"] = [];\n    }\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName)=>memberName in elm;\nconst consoleError = (e, el)=>(customError || console.error)(e, el);\nconst STENCIL_DEV_MODE = _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isTesting ? [\n    \"STENCIL:\"\n] // E2E testing\n : [\n    \"%cstencil\",\n    \"color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px\"\n];\nconst consoleDevError = (...m)=>console.error(...STENCIL_DEV_MODE, ...m);\nconst consoleDevWarn = (...m)=>console.warn(...STENCIL_DEV_MODE, ...m);\nconst consoleDevInfo = (...m)=>console.info(...STENCIL_DEV_MODE, ...m);\nconst setErrorHandler = (handler)=>customError = handler;\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId)=>{\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, \"_\");\n    const bundleId = cmpMeta.$lazyBundleId$;\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev && typeof bundleId !== \"string\") {\n        consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\n        return undefined;\n    }\n    const module = !_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n    if (module) {\n        return module[exportName];\n    }\n    return __webpack_require__(\"(rsc)/./node_modules/.pnpm/@stencil+core@2.5.2/node_modules/@stencil/core/internal/client lazy recursive ^\\\\.\\\\/.*\\\\.entry\\\\.js.*$ include: \\\\.entry\\\\.js$ exclude: \\\\.system\\\\.entry\\\\.js$\")(`./${bundleId}.entry.js${_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hotModuleReplacement && hmrVersionId ? \"?s-hmr=\" + hmrVersionId : \"\"}`).then((importedModule)=>{\n        if (!_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.hotModuleReplacement) {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst modeResolutionChain = [];\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\nconst queueTask = (queue, write)=>(cb)=>{\n        queue.push(cb);\n        if (!queuePending) {\n            queuePending = true;\n            if (write && plt.$flags$ & 4 /* queueSync */ ) {\n                nextTick(flush);\n            } else {\n                plt.raf(flush);\n            }\n        }\n    };\nconst consume = (queue)=>{\n    for(let i = 0; i < queue.length; i++){\n        try {\n            queue[i](performance.now());\n        } catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst consumeTimeout = (queue, timeout)=>{\n    let i = 0;\n    let ts = 0;\n    while(i < queue.length && (ts = performance.now()) < timeout){\n        try {\n            queue[i++](ts);\n        } catch (e) {\n            consoleError(e);\n        }\n    }\n    if (i === queue.length) {\n        queue.length = 0;\n    } else if (i !== 0) {\n        queue.splice(0, i);\n    }\n};\nconst flush = ()=>{\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.asyncQueue) {\n        queueCongestion++;\n    }\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    if (_stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.asyncQueue) {\n        const timeout = (plt.$flags$ & 6 /* queueMask */ ) === 2 /* appLoaded */  ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0)) : Infinity;\n        consumeTimeout(queueDomWrites, timeout);\n        consumeTimeout(queueDomWritesLow, timeout);\n        if (queueDomWrites.length > 0) {\n            queueDomWritesLow.push(...queueDomWrites);\n            queueDomWrites.length = 0;\n        }\n        if (queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        } else {\n            queueCongestion = 0;\n        }\n    } else {\n        consume(queueDomWrites);\n        if (queuePending = queueDomReads.length > 0) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb)=>promiseResolve().then(cb);\nconst readTask = /*@__PURE__*/ queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\nconst Build = {\n    isDev: _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isDev ? true : false,\n    isBrowser: true,\n    isServer: false,\n    isTesting: _stencil_core_internal_app_data__WEBPACK_IMPORTED_MODULE_0__.BUILD.isTesting ? true : false\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stencil+core@2.5.2/node_modules/@stencil/core/internal/client/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stencil+core@2.5.2/node_modules/@stencil/core/internal/client/shadow-css.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stencil+core@2.5.2/node_modules/@stencil/core/internal/client/shadow-css.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scopeCss: () => (/* binding */ scopeCss)\n/* harmony export */ });\n/*\n Stencil Client Platform v2.5.2 | MIT Licensed | https://stenciljs.com\n */ /**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */ const safeSelector = (selector)=>{\n    const placeholders = [];\n    let index = 0;\n    let content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep)=>{\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp)=>{\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content)=>{\n    return content.replace(/__ph-(\\d+)__/g, (_, index)=>placeholders[+index]);\n};\nconst _polyfillHost = \"-shadowcsshost\";\nconst _polyfillSlotted = \"-shadowcssslotted\";\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = \"-shadowcsscontext\";\nconst _parenSuffix = \")(?:\\\\((\" + \"(?:\\\\([^)(]*\\\\)|[^)(]*)+?\" + \")\\\\))?([^,{]*)\";\nconst _cssColonHostRe = new RegExp(\"(\" + _polyfillHost + _parenSuffix, \"gim\");\nconst _cssColonHostContextRe = new RegExp(\"(\" + _polyfillHostContext + _parenSuffix, \"gim\");\nconst _cssColonSlottedRe = new RegExp(\"(\" + _polyfillSlotted + _parenSuffix, \"gim\");\nconst _polyfillHostNoCombinator = _polyfillHost + \"-no-combinator\";\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g\n];\nconst _selectorReSuffix = \"([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$\";\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input)=>{\n    return input.replace(_commentRe, \"\");\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input)=>{\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst OPEN_CURLY = \"{\";\nconst CLOSE_CURLY = \"}\";\nconst BLOCK_PLACEHOLDER = \"%BLOCK%\";\nconst processRules = (input, ruleCallback)=>{\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m)=>{\n        const selector = m[2];\n        let content = \"\";\n        let suffix = m[4];\n        let contentPrefix = \"\";\n        if (suffix && suffix.startsWith(\"{\" + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = \"{\";\n        }\n        const cssRule = {\n            selector,\n            content\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input)=>{\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for(let partIndex = 0; partIndex < inputParts.length; partIndex++){\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        } else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(\"\"));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(\"\"));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(\"\"),\n        blocks: escapedBlocks\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector)=>{\n    selector = selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost).replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer)=>{\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m)=>{\n        if (m[2]) {\n            const parts = m[2].split(\",\");\n            const r = [];\n            for(let i = 0; i < parts.length; i++){\n                const p = parts[i].trim();\n                if (!p) break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(\",\");\n        } else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix)=>{\n    return host + part.replace(_polyfillHost, \"\") + suffix;\n};\nconst convertColonHost = (cssText)=>{\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix)=>{\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    } else {\n        return host + part + suffix + \", \" + part + \" \" + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId)=>{\n    const slotClass = \".\" + slotScopeId + \" > \";\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m)=>{\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = \"\";\n            for(let i = m[4] - 1; i >= 0; i--){\n                const char = m[5][i];\n                if (char === \"}\" || char === \",\") {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector\n                });\n            }\n            return slottedSelector;\n        } else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText\n    };\n};\nconst convertColonHostContext = (cssText)=>{\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText)=>{\n    return _shadowDOMSelectorsRe.reduce((result, pattern)=>result.replace(pattern, \" \"), cssText);\n};\nconst makeScopeMatcher = (scopeSelector)=>{\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, \"\\\\[\").replace(rre, \"\\\\]\");\n    return new RegExp(\"^(\" + scopeSelector + \")\" + _selectorReSuffix, \"m\");\n};\nconst selectorNeedsScoping = (selector, scopeSelector)=>{\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector)=>{\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector.replace(_polyfillHostNoCombinatorRe, (_, selector)=>{\n            return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after)=>{\n                return before + replaceBy + colon + after;\n            });\n        }).replace(_polyfillHostRe, replaceBy + \" \");\n    }\n    return scopeSelector + \" \" + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector)=>{\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts)=>parts[0]);\n    const className = \".\" + scopeSelector;\n    const _scopeSelectorPart = (p)=>{\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return \"\";\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        } else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, \"\");\n            if (t.length > 0) {\n                const matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = \"\";\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while((res = sep.exec(selector)) !== null){\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector)=>{\n    return selector.split(\",\").map((shallowPart)=>{\n        if (slotSelector && shallowPart.indexOf(\".\" + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        } else {\n            return shallowPart.trim();\n        }\n    }).join(\", \");\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector)=>{\n    return processRules(cssText, (rule)=>{\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== \"@\") {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, \" \").trim(),\n            content\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector)=>{\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, \" $1 \");\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector)=>{\n    const hostScopeId = scopeId + \"-h\";\n    const slotScopeId = scopeId + \"-s\";\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule)=>{\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({\n                placeholder,\n                comment\n            });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, (rule)=>{\n            if (rule.selector[0] !== \"@\") {\n                return processCommentedSelector(rule);\n            } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [\n        scoped.cssText,\n        ...commentsWithHash\n    ].join(\"\\n\");\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment })=>{\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach((slottedSelector)=>{\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stencil+core@2.5.2/node_modules/@stencil/core/internal/client/shadow-css.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@stencil+core@2.5.2/node_modules/@stencil/core/internal/app-data/index.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@stencil+core@2.5.2/node_modules/@stencil/core/internal/app-data/index.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUILD: () => (/* binding */ BUILD),\n/* harmony export */   Env: () => (/* binding */ Env),\n/* harmony export */   NAMESPACE: () => (/* binding */ NAMESPACE)\n/* harmony export */ });\nconst BUILD = {\n    allRenderFn: false,\n    cmpDidLoad: true,\n    cmpDidUnload: false,\n    cmpDidUpdate: true,\n    cmpDidRender: true,\n    cmpWillLoad: true,\n    cmpWillUpdate: true,\n    cmpWillRender: true,\n    connectedCallback: true,\n    disconnectedCallback: true,\n    element: true,\n    event: true,\n    hasRenderFn: true,\n    lifecycle: true,\n    hostListener: true,\n    hostListenerTargetWindow: true,\n    hostListenerTargetDocument: true,\n    hostListenerTargetBody: true,\n    hostListenerTargetParent: false,\n    hostListenerTarget: true,\n    member: true,\n    method: true,\n    mode: true,\n    observeAttribute: true,\n    prop: true,\n    propMutable: true,\n    reflect: true,\n    scoped: true,\n    shadowDom: true,\n    slot: true,\n    cssAnnotations: true,\n    state: true,\n    style: true,\n    svg: true,\n    updatable: true,\n    vdomAttribute: true,\n    vdomXlink: true,\n    vdomClass: true,\n    vdomFunctional: true,\n    vdomKey: true,\n    vdomListener: true,\n    vdomRef: true,\n    vdomPropOrAttr: true,\n    vdomRender: true,\n    vdomStyle: true,\n    vdomText: true,\n    watchCallback: true,\n    taskQueue: true,\n    hotModuleReplacement: false,\n    isDebug: false,\n    isDev: false,\n    isTesting: false,\n    hydrateServerSide: false,\n    hydrateClientSide: false,\n    lifecycleDOMEvents: false,\n    lazyLoad: false,\n    profile: false,\n    slotRelocation: true,\n    appendChildSlotFix: false,\n    cloneNodeFix: false,\n    hydratedAttribute: false,\n    hydratedClass: true,\n    safari10: false,\n    scriptDataOpts: false,\n    shadowDomShim: false,\n    slotChildNodesFix: false,\n    propBoolean: true,\n    propNumber: true,\n    propString: true,\n    cssVarShim: false,\n    constructableCSS: true,\n    cmpShouldUpdate: true,\n    devTools: false,\n    dynamicImportShim: false,\n    shadowDelegatesFocus: true,\n    initializeNextTick: false,\n    asyncLoading: false,\n    asyncQueue: false,\n    transformTagName: false,\n    attachStyles: true\n};\nconst Env = {};\nconst NAMESPACE = /* default */ \"app\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHN0ZW5jaWwrY29yZUAyLjUuMi9ub2RlX21vZHVsZXMvQHN0ZW5jaWwvY29yZS9pbnRlcm5hbC9hcHAtZGF0YS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxRQUFRO0lBQ1ZDLGFBQWE7SUFDYkMsWUFBWTtJQUNaQyxjQUFjO0lBQ2RDLGNBQWM7SUFDZEMsY0FBYztJQUNkQyxhQUFhO0lBQ2JDLGVBQWU7SUFDZkMsZUFBZTtJQUNmQyxtQkFBbUI7SUFDbkJDLHNCQUFzQjtJQUN0QkMsU0FBUztJQUNUQyxPQUFPO0lBQ1BDLGFBQWE7SUFDYkMsV0FBVztJQUNYQyxjQUFjO0lBQ2RDLDBCQUEwQjtJQUMxQkMsNEJBQTRCO0lBQzVCQyx3QkFBd0I7SUFDeEJDLDBCQUEwQjtJQUMxQkMsb0JBQW9CO0lBQ3BCQyxRQUFRO0lBQ1JDLFFBQVE7SUFDUkMsTUFBTTtJQUNOQyxrQkFBa0I7SUFDbEJDLE1BQU07SUFDTkMsYUFBYTtJQUNiQyxTQUFTO0lBQ1RDLFFBQVE7SUFDUkMsV0FBVztJQUNYQyxNQUFNO0lBQ05DLGdCQUFnQjtJQUNoQkMsT0FBTztJQUNQQyxPQUFPO0lBQ1BDLEtBQUs7SUFDTEMsV0FBVztJQUNYQyxlQUFlO0lBQ2ZDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxnQkFBZ0I7SUFDaEJDLFNBQVM7SUFDVEMsY0FBYztJQUNkQyxTQUFTO0lBQ1RDLGdCQUFnQjtJQUNoQkMsWUFBWTtJQUNaQyxXQUFXO0lBQ1hDLFVBQVU7SUFDVkMsZUFBZTtJQUNmQyxXQUFXO0lBQ1hDLHNCQUFzQjtJQUN0QkMsU0FBUztJQUNUQyxPQUFPO0lBQ1BDLFdBQVc7SUFDWEMsbUJBQW1CO0lBQ25CQyxtQkFBbUI7SUFDbkJDLG9CQUFvQjtJQUNwQkMsVUFBVTtJQUNWQyxTQUFTO0lBQ1RDLGdCQUFnQjtJQUNoQkMsb0JBQW9CO0lBQ3BCQyxjQUFjO0lBQ2RDLG1CQUFtQjtJQUNuQkMsZUFBZTtJQUNmQyxVQUFVO0lBQ1ZDLGdCQUFnQjtJQUNoQkMsZUFBZTtJQUNmQyxtQkFBbUI7SUFDbkJDLGFBQWE7SUFDYkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsa0JBQWtCO0lBQ2xCQyxpQkFBaUI7SUFDakJDLFVBQVU7SUFDVkMsbUJBQW1CO0lBQ25CQyxzQkFBc0I7SUFDdEJDLG9CQUFvQjtJQUNwQkMsY0FBYztJQUNkQyxZQUFZO0lBQ1pDLGtCQUFrQjtJQUNsQkMsY0FBYztBQUNsQjtBQUNBLE1BQU1DLE1BQU0sQ0FBQztBQUNiLE1BQU1DLFlBQVksV0FBVyxHQUFHO0FBRUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac3RlbmNpbCtjb3JlQDIuNS4yL25vZGVfbW9kdWxlcy9Ac3RlbmNpbC9jb3JlL2ludGVybmFsL2FwcC1kYXRhL2luZGV4LmpzP2EyNTUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQlVJTEQgPSB7XG4gICAgYWxsUmVuZGVyRm46IGZhbHNlLFxuICAgIGNtcERpZExvYWQ6IHRydWUsXG4gICAgY21wRGlkVW5sb2FkOiBmYWxzZSxcbiAgICBjbXBEaWRVcGRhdGU6IHRydWUsXG4gICAgY21wRGlkUmVuZGVyOiB0cnVlLFxuICAgIGNtcFdpbGxMb2FkOiB0cnVlLFxuICAgIGNtcFdpbGxVcGRhdGU6IHRydWUsXG4gICAgY21wV2lsbFJlbmRlcjogdHJ1ZSxcbiAgICBjb25uZWN0ZWRDYWxsYmFjazogdHJ1ZSxcbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjazogdHJ1ZSxcbiAgICBlbGVtZW50OiB0cnVlLFxuICAgIGV2ZW50OiB0cnVlLFxuICAgIGhhc1JlbmRlckZuOiB0cnVlLFxuICAgIGxpZmVjeWNsZTogdHJ1ZSxcbiAgICBob3N0TGlzdGVuZXI6IHRydWUsXG4gICAgaG9zdExpc3RlbmVyVGFyZ2V0V2luZG93OiB0cnVlLFxuICAgIGhvc3RMaXN0ZW5lclRhcmdldERvY3VtZW50OiB0cnVlLFxuICAgIGhvc3RMaXN0ZW5lclRhcmdldEJvZHk6IHRydWUsXG4gICAgaG9zdExpc3RlbmVyVGFyZ2V0UGFyZW50OiBmYWxzZSxcbiAgICBob3N0TGlzdGVuZXJUYXJnZXQ6IHRydWUsXG4gICAgbWVtYmVyOiB0cnVlLFxuICAgIG1ldGhvZDogdHJ1ZSxcbiAgICBtb2RlOiB0cnVlLFxuICAgIG9ic2VydmVBdHRyaWJ1dGU6IHRydWUsXG4gICAgcHJvcDogdHJ1ZSxcbiAgICBwcm9wTXV0YWJsZTogdHJ1ZSxcbiAgICByZWZsZWN0OiB0cnVlLFxuICAgIHNjb3BlZDogdHJ1ZSxcbiAgICBzaGFkb3dEb206IHRydWUsXG4gICAgc2xvdDogdHJ1ZSxcbiAgICBjc3NBbm5vdGF0aW9uczogdHJ1ZSxcbiAgICBzdGF0ZTogdHJ1ZSxcbiAgICBzdHlsZTogdHJ1ZSxcbiAgICBzdmc6IHRydWUsXG4gICAgdXBkYXRhYmxlOiB0cnVlLFxuICAgIHZkb21BdHRyaWJ1dGU6IHRydWUsXG4gICAgdmRvbVhsaW5rOiB0cnVlLFxuICAgIHZkb21DbGFzczogdHJ1ZSxcbiAgICB2ZG9tRnVuY3Rpb25hbDogdHJ1ZSxcbiAgICB2ZG9tS2V5OiB0cnVlLFxuICAgIHZkb21MaXN0ZW5lcjogdHJ1ZSxcbiAgICB2ZG9tUmVmOiB0cnVlLFxuICAgIHZkb21Qcm9wT3JBdHRyOiB0cnVlLFxuICAgIHZkb21SZW5kZXI6IHRydWUsXG4gICAgdmRvbVN0eWxlOiB0cnVlLFxuICAgIHZkb21UZXh0OiB0cnVlLFxuICAgIHdhdGNoQ2FsbGJhY2s6IHRydWUsXG4gICAgdGFza1F1ZXVlOiB0cnVlLFxuICAgIGhvdE1vZHVsZVJlcGxhY2VtZW50OiBmYWxzZSxcbiAgICBpc0RlYnVnOiBmYWxzZSxcbiAgICBpc0RldjogZmFsc2UsXG4gICAgaXNUZXN0aW5nOiBmYWxzZSxcbiAgICBoeWRyYXRlU2VydmVyU2lkZTogZmFsc2UsXG4gICAgaHlkcmF0ZUNsaWVudFNpZGU6IGZhbHNlLFxuICAgIGxpZmVjeWNsZURPTUV2ZW50czogZmFsc2UsXG4gICAgbGF6eUxvYWQ6IGZhbHNlLFxuICAgIHByb2ZpbGU6IGZhbHNlLFxuICAgIHNsb3RSZWxvY2F0aW9uOiB0cnVlLFxuICAgIGFwcGVuZENoaWxkU2xvdEZpeDogZmFsc2UsXG4gICAgY2xvbmVOb2RlRml4OiBmYWxzZSxcbiAgICBoeWRyYXRlZEF0dHJpYnV0ZTogZmFsc2UsXG4gICAgaHlkcmF0ZWRDbGFzczogdHJ1ZSxcbiAgICBzYWZhcmkxMDogZmFsc2UsXG4gICAgc2NyaXB0RGF0YU9wdHM6IGZhbHNlLFxuICAgIHNoYWRvd0RvbVNoaW06IGZhbHNlLFxuICAgIHNsb3RDaGlsZE5vZGVzRml4OiBmYWxzZSxcbiAgICBwcm9wQm9vbGVhbjogdHJ1ZSxcbiAgICBwcm9wTnVtYmVyOiB0cnVlLFxuICAgIHByb3BTdHJpbmc6IHRydWUsXG4gICAgY3NzVmFyU2hpbTogZmFsc2UsXG4gICAgY29uc3RydWN0YWJsZUNTUzogdHJ1ZSxcbiAgICBjbXBTaG91bGRVcGRhdGU6IHRydWUsXG4gICAgZGV2VG9vbHM6IGZhbHNlLFxuICAgIGR5bmFtaWNJbXBvcnRTaGltOiBmYWxzZSxcbiAgICBzaGFkb3dEZWxlZ2F0ZXNGb2N1czogdHJ1ZSxcbiAgICBpbml0aWFsaXplTmV4dFRpY2s6IGZhbHNlLFxuICAgIGFzeW5jTG9hZGluZzogZmFsc2UsXG4gICAgYXN5bmNRdWV1ZTogZmFsc2UsXG4gICAgdHJhbnNmb3JtVGFnTmFtZTogZmFsc2UsXG4gICAgYXR0YWNoU3R5bGVzOiB0cnVlLFxufTtcbmNvbnN0IEVudiA9IHt9O1xuY29uc3QgTkFNRVNQQUNFID0gLyogZGVmYXVsdCAqLyAnYXBwJztcblxuZXhwb3J0IHsgQlVJTEQsIEVudiwgTkFNRVNQQUNFIH07XG4iXSwibmFtZXMiOlsiQlVJTEQiLCJhbGxSZW5kZXJGbiIsImNtcERpZExvYWQiLCJjbXBEaWRVbmxvYWQiLCJjbXBEaWRVcGRhdGUiLCJjbXBEaWRSZW5kZXIiLCJjbXBXaWxsTG9hZCIsImNtcFdpbGxVcGRhdGUiLCJjbXBXaWxsUmVuZGVyIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImVsZW1lbnQiLCJldmVudCIsImhhc1JlbmRlckZuIiwibGlmZWN5Y2xlIiwiaG9zdExpc3RlbmVyIiwiaG9zdExpc3RlbmVyVGFyZ2V0V2luZG93IiwiaG9zdExpc3RlbmVyVGFyZ2V0RG9jdW1lbnQiLCJob3N0TGlzdGVuZXJUYXJnZXRCb2R5IiwiaG9zdExpc3RlbmVyVGFyZ2V0UGFyZW50IiwiaG9zdExpc3RlbmVyVGFyZ2V0IiwibWVtYmVyIiwibWV0aG9kIiwibW9kZSIsIm9ic2VydmVBdHRyaWJ1dGUiLCJwcm9wIiwicHJvcE11dGFibGUiLCJyZWZsZWN0Iiwic2NvcGVkIiwic2hhZG93RG9tIiwic2xvdCIsImNzc0Fubm90YXRpb25zIiwic3RhdGUiLCJzdHlsZSIsInN2ZyIsInVwZGF0YWJsZSIsInZkb21BdHRyaWJ1dGUiLCJ2ZG9tWGxpbmsiLCJ2ZG9tQ2xhc3MiLCJ2ZG9tRnVuY3Rpb25hbCIsInZkb21LZXkiLCJ2ZG9tTGlzdGVuZXIiLCJ2ZG9tUmVmIiwidmRvbVByb3BPckF0dHIiLCJ2ZG9tUmVuZGVyIiwidmRvbVN0eWxlIiwidmRvbVRleHQiLCJ3YXRjaENhbGxiYWNrIiwidGFza1F1ZXVlIiwiaG90TW9kdWxlUmVwbGFjZW1lbnQiLCJpc0RlYnVnIiwiaXNEZXYiLCJpc1Rlc3RpbmciLCJoeWRyYXRlU2VydmVyU2lkZSIsImh5ZHJhdGVDbGllbnRTaWRlIiwibGlmZWN5Y2xlRE9NRXZlbnRzIiwibGF6eUxvYWQiLCJwcm9maWxlIiwic2xvdFJlbG9jYXRpb24iLCJhcHBlbmRDaGlsZFNsb3RGaXgiLCJjbG9uZU5vZGVGaXgiLCJoeWRyYXRlZEF0dHJpYnV0ZSIsImh5ZHJhdGVkQ2xhc3MiLCJzYWZhcmkxMCIsInNjcmlwdERhdGFPcHRzIiwic2hhZG93RG9tU2hpbSIsInNsb3RDaGlsZE5vZGVzRml4IiwicHJvcEJvb2xlYW4iLCJwcm9wTnVtYmVyIiwicHJvcFN0cmluZyIsImNzc1ZhclNoaW0iLCJjb25zdHJ1Y3RhYmxlQ1NTIiwiY21wU2hvdWxkVXBkYXRlIiwiZGV2VG9vbHMiLCJkeW5hbWljSW1wb3J0U2hpbSIsInNoYWRvd0RlbGVnYXRlc0ZvY3VzIiwiaW5pdGlhbGl6ZU5leHRUaWNrIiwiYXN5bmNMb2FkaW5nIiwiYXN5bmNRdWV1ZSIsInRyYW5zZm9ybVRhZ05hbWUiLCJhdHRhY2hTdHlsZXMiLCJFbnYiLCJOQU1FU1BBQ0UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@stencil+core@2.5.2/node_modules/@stencil/core/internal/app-data/index.js\n");

/***/ })

};
;