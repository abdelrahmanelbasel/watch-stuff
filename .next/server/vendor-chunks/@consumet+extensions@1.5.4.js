"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@consumet+extensions@1.5.4";
exports.ids = ["vendor-chunks/@consumet+extensions@1.5.4"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/asianload.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/asianload.js ***!
  \**********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst crypto_js_1 = __importDefault(__webpack_require__(/*! crypto-js */ \"(rsc)/./node_modules/.pnpm/crypto-js@4.2.0/node_modules/crypto-js/index.js\"));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass AsianLoad extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"asianload\";\n        this.sources = [];\n        this.keys = {\n            key: crypto_js_1.default.enc.Utf8.parse(\"93422192433952489752342908585752\"),\n            iv: crypto_js_1.default.enc.Utf8.parse(\"9262859232435825\")\n        };\n        this.extract = async (videoUrl)=>{\n            var _a, _b, _c;\n            const res = await this.client.get(videoUrl.href);\n            const $ = (0, cheerio_1.load)(res.data);\n            const encyptedParams = await this.generateEncryptedAjaxParams($, (_a = videoUrl.searchParams.get(\"id\")) !== null && _a !== void 0 ? _a : \"\");\n            const encryptedData = await this.client.get(`${videoUrl.protocol}//${videoUrl.hostname}/encrypt-ajax.php?${encyptedParams}`, {\n                headers: {\n                    \"X-Requested-With\": \"XMLHttpRequest\"\n                }\n            });\n            const decryptedData = await this.decryptAjaxData(encryptedData.data.data);\n            if (!decryptedData.source) throw new Error(\"No source found. Try a different server.\");\n            decryptedData.source.forEach((source)=>{\n                this.sources.push({\n                    url: source.file,\n                    isM3U8: source.file.includes(\".m3u8\")\n                });\n            });\n            decryptedData.source_bk.forEach((source)=>{\n                this.sources.push({\n                    url: source.file,\n                    isM3U8: source.file.includes(\".m3u8\")\n                });\n            });\n            const subtitles = (_c = (_b = decryptedData.track) === null || _b === void 0 ? void 0 : _b.tracks) === null || _c === void 0 ? void 0 : _c.map((track)=>({\n                    url: track.file,\n                    lang: track.kind === \"thumbnails\" ? \"Default (maybe)\" : track.kind\n                }));\n            return {\n                sources: this.sources,\n                subtitles: subtitles\n            };\n        };\n        this.generateEncryptedAjaxParams = async ($, id)=>{\n            const encryptedKey = crypto_js_1.default.AES.encrypt(id, this.keys.key, {\n                iv: this.keys.iv\n            }).toString();\n            const scriptValue = $(\"script[data-name='crypto']\").data().value;\n            const decryptedToken = crypto_js_1.default.AES.decrypt(scriptValue, this.keys.key, {\n                iv: this.keys.iv\n            }).toString(crypto_js_1.default.enc.Utf8);\n            return `id=${encryptedKey}&alias=${decryptedToken}`;\n        };\n        this.decryptAjaxData = async (encryptedData)=>{\n            const decryptedData = crypto_js_1.default.enc.Utf8.stringify(crypto_js_1.default.AES.decrypt(encryptedData, this.keys.key, {\n                iv: this.keys.iv\n            }));\n            return JSON.parse(decryptedData);\n        };\n    }\n}\nexports[\"default\"] = AsianLoad; //# sourceMappingURL=asianload.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/asianload.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/bilibili.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/bilibili.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst utils_1 = __webpack_require__(/*! ../utils/utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/utils.js\");\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass BilibiliExtractor extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"Bilibili\";\n        this.sources = [];\n        this.toDash = (data)=>{\n            const videos = data.video.filter((video)=>video.video_resource.url).map((video)=>video.video_resource);\n            const audios = data.audio_resource;\n            const duration = (0, utils_1.convertDuration)(data.duration);\n            const dash = `<?xml version=\"1.0\"?>\n<MPD xmlns=\"urn:mpeg💨schema:mpd:2011\" profiles=\"urn:mpeg💨profile:isoff-on-demand:2011\" minBufferTime=\"PT1M\" type=\"static\" mediaPresentationDuration=\"${duration}\">\n    <Period duration=\"${duration}\">\n        <AdaptationSet id=\"1\" group=\"1\" par=\"16:9\" segmentAlignment=\"true\" subsegmentAlignment=\"true\" subsegmentStartsWithSAP=\"1\" maxWidth=\"${videos[0].width}\" maxHeight=\"${videos[0].height}\" maxFrameRate=\"${videos[0].frame_rate}\" startWithSAP=\"1\">\n            ${videos.map((video, index)=>this.videoSegment(video, index)).join()}\n        </AdaptationSet>\n        <AdaptationSet id=\"2\" group=\"2\" subsegmentAlignment=\"true\" subsegmentStartsWithSAP=\"1\" segmentAlignment=\"true\" startWithSAP=\"1\">\n            ${audios.map((audio, index)=>this.audioSegment(audio, videos.length + index)).join()}\n        </AdaptationSet>\n    </Period>\n</MPD>`;\n            return dash;\n        };\n        this.videoSegment = (video, index = 0)=>{\n            const allUrls = [\n                video.url,\n                video.backup_url[0]\n            ];\n            const videoUrl = allUrls.find((url)=>url.includes(\"akamaized.net\"));\n            return `\n            <Representation id=\"${index}\" mimeType=\"${video.mime_type}\" codecs=\"${video.codecs}\" width=\"${video.width}\" height=\"${video.height}\" frameRate=\"${video.frame_rate}\" sar=\"${video.sar}\" bandwidth=\"${video.bandwidth}\">\n                <BaseURL>${videoUrl.replace(/&/g, \"&amp;\")}</BaseURL>\n                <SegmentBase indexRangeExact=\"true\" indexRange=\"${video.segment_base.index_range}\">\n                    <Initialization range=\"${video.segment_base.range}\"/>\n                </SegmentBase>\n            </Representation>\n            `;\n        };\n        this.audioSegment = (audio, index = 0)=>{\n            const allUrls = [\n                audio.url,\n                audio.backup_url[0]\n            ];\n            const audioUrl = allUrls.find((url)=>url.includes(\"akamaized.net\"));\n            return `\n            <Representation id=\"${index}\" mimeType=\"${audio.mime_type}\" codecs=\"${audio.codecs}\" bandwidth=\"${audio.bandwidth}\">\n                <BaseURL>${audioUrl.replace(/&/g, \"&amp;\")}</BaseURL>\n                <SegmentBase indexRangeExact=\"true\" indexRange=\"${audio.segment_base.index_range}\">\n                    <Initialization range=\"${audio.segment_base.range}\"/>\n                </SegmentBase>\n            </Representation>\n            `;\n        };\n    }\n    async extract(episodeId) {\n        this.sources.push({\n            url: `https://api.consumet.org/utils/bilibili/playurl?episode_id=${episodeId}`,\n            isM3U8: false,\n            isDASH: true\n        });\n        return {\n            sources: this.sources\n        };\n    }\n}\nexports[\"default\"] = BilibiliExtractor; //# sourceMappingURL=bilibili.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/bilibili.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/filemoon.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/filemoon.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\n/**\n * work in progress\n */ class Filemoon extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"Filemoon\";\n        this.sources = [];\n        this.host = \"https://filemoon.sx\";\n        this.extract = async (videoUrl)=>{\n            const options = {\n                headers: {\n                    Referer: videoUrl.href,\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\n                    \"User-Agent\": utils_1.USER_AGENT,\n                    \"X-Requested-With\": \"XMLHttpRequest\"\n                }\n            };\n            const { data } = await this.client.get(videoUrl.href);\n            const s = data.substring(data.indexOf(\"eval(function\") + 5, data.lastIndexOf(\")))\"));\n            try {\n                const newScript = \"function run(\" + s.split(\"function(\")[1] + \"))\";\n            } catch (err) {}\n            return this.sources;\n        };\n    }\n}\nexports[\"default\"] = Filemoon; //# sourceMappingURL=filemoon.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy9maWxlbW9vbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxXQUFXQyxtQkFBT0EsQ0FBQywrSEFBVztBQUNwQyxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQyw2SEFBVTtBQUNsQzs7Q0FFQyxHQUNELE1BQU1FLGlCQUFpQkgsU0FBU0ksY0FBYztJQUMxQ0MsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLE9BQU8sR0FBRyxFQUFFO1FBQ2pCLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxPQUFPLEdBQUcsT0FBT0M7WUFDbEIsTUFBTUMsVUFBVTtnQkFDWkMsU0FBUztvQkFDTEMsU0FBU0gsU0FBU0ksSUFBSTtvQkFDdEIsZ0JBQWdCO29CQUNoQixjQUFjYixRQUFRYyxVQUFVO29CQUNoQyxvQkFBb0I7Z0JBQ3hCO1lBQ0o7WUFDQSxNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQ1IsU0FBU0ksSUFBSTtZQUNwRCxNQUFNSyxJQUFJSCxLQUFLSSxTQUFTLENBQUNKLEtBQUtLLE9BQU8sQ0FBQyxtQkFBbUIsR0FBR0wsS0FBS00sV0FBVyxDQUFDO1lBQzdFLElBQUk7Z0JBQ0EsTUFBTUMsWUFBWSxrQkFBa0JKLEVBQUVLLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBRSxHQUFHO1lBQ2xFLEVBQ0EsT0FBT0MsS0FBSyxDQUFFO1lBQ2QsT0FBTyxJQUFJLENBQUNsQixPQUFPO1FBQ3ZCO0lBQ0o7QUFDSjtBQUNBVixrQkFBZSxHQUFHSyxVQUNsQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29uc3VtZXQrZXh0ZW5zaW9uc0AxLjUuNC9ub2RlX21vZHVsZXMvQGNvbnN1bWV0L2V4dGVuc2lvbnMvZGlzdC9leHRyYWN0b3JzL2ZpbGVtb29uLmpzP2I0MTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBtb2RlbHNfMSA9IHJlcXVpcmUoXCIuLi9tb2RlbHNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuLyoqXG4gKiB3b3JrIGluIHByb2dyZXNzXG4gKi9cbmNsYXNzIEZpbGVtb29uIGV4dGVuZHMgbW9kZWxzXzEuVmlkZW9FeHRyYWN0b3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnNlcnZlck5hbWUgPSAnRmlsZW1vb24nO1xuICAgICAgICB0aGlzLnNvdXJjZXMgPSBbXTtcbiAgICAgICAgdGhpcy5ob3N0ID0gJ2h0dHBzOi8vZmlsZW1vb24uc3gnO1xuICAgICAgICB0aGlzLmV4dHJhY3QgPSBhc3luYyAodmlkZW9VcmwpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICBSZWZlcmVyOiB2aWRlb1VybC5ocmVmLFxuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogdXRpbHNfMS5VU0VSX0FHRU5ULFxuICAgICAgICAgICAgICAgICAgICAnWC1SZXF1ZXN0ZWQtV2l0aCc6ICdYTUxIdHRwUmVxdWVzdCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuY2xpZW50LmdldCh2aWRlb1VybC5ocmVmKTtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBkYXRhLnN1YnN0cmluZyhkYXRhLmluZGV4T2YoJ2V2YWwoZnVuY3Rpb24nKSArIDUsIGRhdGEubGFzdEluZGV4T2YoJykpKScpKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3U2NyaXB0ID0gJ2Z1bmN0aW9uIHJ1bignICsgcy5zcGxpdCgnZnVuY3Rpb24oJylbMV0gKyAnKSknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikgeyB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzO1xuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEZpbGVtb29uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsZW1vb24uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kZWxzXzEiLCJyZXF1aXJlIiwidXRpbHNfMSIsIkZpbGVtb29uIiwiVmlkZW9FeHRyYWN0b3IiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsInNlcnZlck5hbWUiLCJzb3VyY2VzIiwiaG9zdCIsImV4dHJhY3QiLCJ2aWRlb1VybCIsIm9wdGlvbnMiLCJoZWFkZXJzIiwiUmVmZXJlciIsImhyZWYiLCJVU0VSX0FHRU5UIiwiZGF0YSIsImNsaWVudCIsImdldCIsInMiLCJzdWJzdHJpbmciLCJpbmRleE9mIiwibGFzdEluZGV4T2YiLCJuZXdTY3JpcHQiLCJzcGxpdCIsImVyciIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/filemoon.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/gogocdn.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/gogocdn.js ***!
  \********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst crypto_js_1 = __importDefault(__webpack_require__(/*! crypto-js */ \"(rsc)/./node_modules/.pnpm/crypto-js@4.2.0/node_modules/crypto-js/index.js\"));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nclass GogoCDN extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"goload\";\n        this.sources = [];\n        this.keys = {\n            key: crypto_js_1.default.enc.Utf8.parse(\"37911490979715163134003223491201\"),\n            secondKey: crypto_js_1.default.enc.Utf8.parse(\"54674138327930866480207815084989\"),\n            iv: crypto_js_1.default.enc.Utf8.parse(\"3134003223491201\")\n        };\n        this.referer = \"\";\n        this.extract = async (videoUrl)=>{\n            var _a;\n            this.referer = videoUrl.href;\n            const res = await this.client.get(videoUrl.href);\n            const $ = (0, cheerio_1.load)(res.data);\n            const encyptedParams = await this.generateEncryptedAjaxParams($, (_a = videoUrl.searchParams.get(\"id\")) !== null && _a !== void 0 ? _a : \"\");\n            const encryptedData = await this.client.get(`${videoUrl.protocol}//${videoUrl.hostname}/encrypt-ajax.php?${encyptedParams}`, {\n                headers: {\n                    \"X-Requested-With\": \"XMLHttpRequest\"\n                }\n            });\n            const decryptedData = await this.decryptAjaxData(encryptedData.data.data);\n            if (!decryptedData.source) throw new Error(\"No source found. Try a different server.\");\n            if (decryptedData.source[0].file.includes(\".m3u8\")) {\n                const resResult = await this.client.get(decryptedData.source[0].file.toString());\n                const resolutions = resResult.data.match(/(RESOLUTION=)(.*)(\\s*?)(\\s*.*)/g);\n                resolutions === null || resolutions === void 0 ? void 0 : resolutions.forEach((res)=>{\n                    const index = decryptedData.source[0].file.lastIndexOf(\"/\");\n                    const quality = res.split(\"\\n\")[0].split(\"x\")[1].split(\",\")[0];\n                    const url = decryptedData.source[0].file.slice(0, index);\n                    this.sources.push({\n                        url: url + \"/\" + res.split(\"\\n\")[1],\n                        isM3U8: (url + res.split(\"\\n\")[1]).includes(\".m3u8\"),\n                        quality: quality + \"p\"\n                    });\n                });\n                decryptedData.source.forEach((source)=>{\n                    this.sources.push({\n                        url: source.file,\n                        isM3U8: source.file.includes(\".m3u8\"),\n                        quality: \"default\"\n                    });\n                });\n            } else decryptedData.source.forEach((source)=>{\n                this.sources.push({\n                    url: source.file,\n                    isM3U8: source.file.includes(\".m3u8\"),\n                    quality: source.label.split(\" \")[0] + \"p\"\n                });\n            });\n            decryptedData.source_bk.forEach((source)=>{\n                this.sources.push({\n                    url: source.file,\n                    isM3U8: source.file.includes(\".m3u8\"),\n                    quality: \"backup\"\n                });\n            });\n            return this.sources;\n        };\n        this.addSources = async (source)=>{\n            if (source.file.includes(\"m3u8\")) {\n                const m3u8Urls = await this.client.get(source.file, {\n                    headers: {\n                        Referer: this.referer,\n                        \"User-Agent\": utils_1.USER_AGENT\n                    }\n                }).catch(()=>null);\n                const videoList = m3u8Urls === null || m3u8Urls === void 0 ? void 0 : m3u8Urls.data.split(\"#EXT-X-I-FRAME-STREAM-INF:\");\n                for (const video of videoList !== null && videoList !== void 0 ? videoList : []){\n                    if (!video.includes(\"m3u8\")) continue;\n                    const url = video.split(\"\\n\").find((line)=>line.includes(\"URI=\")).split(\"URI=\")[1].replace(/\"/g, \"\");\n                    const quality = video.split(\"RESOLUTION=\")[1].split(\",\")[0].split(\"x\")[1];\n                    this.sources.push({\n                        url: url,\n                        quality: `${quality}p`,\n                        isM3U8: true\n                    });\n                }\n                return;\n            }\n            this.sources.push({\n                url: source.file,\n                isM3U8: source.file.includes(\".m3u8\")\n            });\n        };\n        this.generateEncryptedAjaxParams = async ($, id)=>{\n            const encryptedKey = crypto_js_1.default.AES.encrypt(id, this.keys.key, {\n                iv: this.keys.iv\n            });\n            const scriptValue = $(\"script[data-name='episode']\").attr(\"data-value\");\n            const decryptedToken = crypto_js_1.default.AES.decrypt(scriptValue, this.keys.key, {\n                iv: this.keys.iv\n            }).toString(crypto_js_1.default.enc.Utf8);\n            return `id=${encryptedKey}&alias=${id}&${decryptedToken}`;\n        };\n        this.decryptAjaxData = async (encryptedData)=>{\n            const decryptedData = crypto_js_1.default.enc.Utf8.stringify(crypto_js_1.default.AES.decrypt(encryptedData, this.keys.secondKey, {\n                iv: this.keys.iv\n            }));\n            return JSON.parse(decryptedData);\n        };\n    }\n}\nexports[\"default\"] = GogoCDN; //# sourceMappingURL=gogocdn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/gogocdn.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js ***!
  \******************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Voe = exports.VizCloud = exports.VidMoly = exports.VidCloud = exports.StreamWish = exports.StreamTape = exports.StreamSB = exports.StreamLare = exports.StreamHub = exports.SmashyStream = exports.RapidCloud = exports.Mp4Upload = exports.Mp4Player = exports.MixDrop = exports.Kwik = exports.GogoCDN = exports.Filemoon = exports.BilibiliExtractor = exports.AsianLoad = void 0;\nconst asianload_1 = __importDefault(__webpack_require__(/*! ./asianload */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/asianload.js\"));\nexports.AsianLoad = asianload_1.default;\nconst bilibili_1 = __importDefault(__webpack_require__(/*! ./bilibili */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/bilibili.js\"));\nexports.BilibiliExtractor = bilibili_1.default;\nconst filemoon_1 = __importDefault(__webpack_require__(/*! ./filemoon */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/filemoon.js\"));\nexports.Filemoon = filemoon_1.default;\nconst gogocdn_1 = __importDefault(__webpack_require__(/*! ./gogocdn */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/gogocdn.js\"));\nexports.GogoCDN = gogocdn_1.default;\nconst kwik_1 = __importDefault(__webpack_require__(/*! ./kwik */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/kwik.js\"));\nexports.Kwik = kwik_1.default;\nconst mixdrop_1 = __importDefault(__webpack_require__(/*! ./mixdrop */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/mixdrop.js\"));\nexports.MixDrop = mixdrop_1.default;\nconst mp4player_1 = __importDefault(__webpack_require__(/*! ./mp4player */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/mp4player.js\"));\nexports.Mp4Player = mp4player_1.default;\nconst mp4upload_1 = __importDefault(__webpack_require__(/*! ./mp4upload */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/mp4upload.js\"));\nexports.Mp4Upload = mp4upload_1.default;\nconst rapidcloud_1 = __importDefault(__webpack_require__(/*! ./rapidcloud */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/rapidcloud.js\"));\nexports.RapidCloud = rapidcloud_1.default;\nconst smashystream_1 = __importDefault(__webpack_require__(/*! ./smashystream */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/smashystream.js\"));\nexports.SmashyStream = smashystream_1.default;\nconst streamhub_1 = __importDefault(__webpack_require__(/*! ./streamhub */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamhub.js\"));\nexports.StreamHub = streamhub_1.default;\nconst streamlare_1 = __importDefault(__webpack_require__(/*! ./streamlare */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamlare.js\"));\nexports.StreamLare = streamlare_1.default;\nconst streamsb_1 = __importDefault(__webpack_require__(/*! ./streamsb */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamsb.js\"));\nexports.StreamSB = streamsb_1.default;\nconst streamtape_1 = __importDefault(__webpack_require__(/*! ./streamtape */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamtape.js\"));\nexports.StreamTape = streamtape_1.default;\nconst streamwish_1 = __importDefault(__webpack_require__(/*! ./streamwish */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamwish.js\"));\nexports.StreamWish = streamwish_1.default;\nconst vidcloud_1 = __importDefault(__webpack_require__(/*! ./vidcloud */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/vidcloud.js\"));\nexports.VidCloud = vidcloud_1.default;\nconst vidmoly_1 = __importDefault(__webpack_require__(/*! ./vidmoly */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/vidmoly.js\"));\nexports.VidMoly = vidmoly_1.default;\nconst vizcloud_1 = __importDefault(__webpack_require__(/*! ./vizcloud */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/vizcloud.js\"));\nexports.VizCloud = vizcloud_1.default;\nconst voe_1 = __importDefault(__webpack_require__(/*! ./voe */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/voe.js\"));\nexports.Voe = voe_1.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELFdBQVcsR0FBR0EsZ0JBQWdCLEdBQUdBLGVBQWUsR0FBR0EsZ0JBQWdCLEdBQUdBLGtCQUFrQixHQUFHQSxrQkFBa0IsR0FBR0EsZ0JBQWdCLEdBQUdBLGtCQUFrQixHQUFHQSxpQkFBaUIsR0FBR0Esb0JBQW9CLEdBQUdBLGtCQUFrQixHQUFHQSxpQkFBaUIsR0FBR0EsaUJBQWlCLEdBQUdBLGVBQWUsR0FBR0EsWUFBWSxHQUFHQSxlQUFlLEdBQUdBLGdCQUFnQixHQUFHQSx5QkFBeUIsR0FBR0EsaUJBQWlCLEdBQUcsS0FBSztBQUMzWCxNQUFNcUIsY0FBYzFCLGdCQUFnQjJCLG1CQUFPQSxDQUFDLHlJQUFhO0FBQ3pEdEIsaUJBQWlCLEdBQUdxQixZQUFZRSxPQUFPO0FBQ3ZDLE1BQU1DLGFBQWE3QixnQkFBZ0IyQixtQkFBT0EsQ0FBQyx1SUFBWTtBQUN2RHRCLHlCQUF5QixHQUFHd0IsV0FBV0QsT0FBTztBQUM5QyxNQUFNRSxhQUFhOUIsZ0JBQWdCMkIsbUJBQU9BLENBQUMsdUlBQVk7QUFDdkR0QixnQkFBZ0IsR0FBR3lCLFdBQVdGLE9BQU87QUFDckMsTUFBTUcsWUFBWS9CLGdCQUFnQjJCLG1CQUFPQSxDQUFDLHFJQUFXO0FBQ3JEdEIsZUFBZSxHQUFHMEIsVUFBVUgsT0FBTztBQUNuQyxNQUFNSSxTQUFTaEMsZ0JBQWdCMkIsbUJBQU9BLENBQUMsK0hBQVE7QUFDL0N0QixZQUFZLEdBQUcyQixPQUFPSixPQUFPO0FBQzdCLE1BQU1LLFlBQVlqQyxnQkFBZ0IyQixtQkFBT0EsQ0FBQyxxSUFBVztBQUNyRHRCLGVBQWUsR0FBRzRCLFVBQVVMLE9BQU87QUFDbkMsTUFBTU0sY0FBY2xDLGdCQUFnQjJCLG1CQUFPQSxDQUFDLHlJQUFhO0FBQ3pEdEIsaUJBQWlCLEdBQUc2QixZQUFZTixPQUFPO0FBQ3ZDLE1BQU1PLGNBQWNuQyxnQkFBZ0IyQixtQkFBT0EsQ0FBQyx5SUFBYTtBQUN6RHRCLGlCQUFpQixHQUFHOEIsWUFBWVAsT0FBTztBQUN2QyxNQUFNUSxlQUFlcEMsZ0JBQWdCMkIsbUJBQU9BLENBQUMsMklBQWM7QUFDM0R0QixrQkFBa0IsR0FBRytCLGFBQWFSLE9BQU87QUFDekMsTUFBTVMsaUJBQWlCckMsZ0JBQWdCMkIsbUJBQU9BLENBQUMsK0lBQWdCO0FBQy9EdEIsb0JBQW9CLEdBQUdnQyxlQUFlVCxPQUFPO0FBQzdDLE1BQU1VLGNBQWN0QyxnQkFBZ0IyQixtQkFBT0EsQ0FBQyx5SUFBYTtBQUN6RHRCLGlCQUFpQixHQUFHaUMsWUFBWVYsT0FBTztBQUN2QyxNQUFNVyxlQUFldkMsZ0JBQWdCMkIsbUJBQU9BLENBQUMsMklBQWM7QUFDM0R0QixrQkFBa0IsR0FBR2tDLGFBQWFYLE9BQU87QUFDekMsTUFBTVksYUFBYXhDLGdCQUFnQjJCLG1CQUFPQSxDQUFDLHVJQUFZO0FBQ3ZEdEIsZ0JBQWdCLEdBQUdtQyxXQUFXWixPQUFPO0FBQ3JDLE1BQU1hLGVBQWV6QyxnQkFBZ0IyQixtQkFBT0EsQ0FBQywySUFBYztBQUMzRHRCLGtCQUFrQixHQUFHb0MsYUFBYWIsT0FBTztBQUN6QyxNQUFNYyxlQUFlMUMsZ0JBQWdCMkIsbUJBQU9BLENBQUMsMklBQWM7QUFDM0R0QixrQkFBa0IsR0FBR3FDLGFBQWFkLE9BQU87QUFDekMsTUFBTWUsYUFBYTNDLGdCQUFnQjJCLG1CQUFPQSxDQUFDLHVJQUFZO0FBQ3ZEdEIsZ0JBQWdCLEdBQUdzQyxXQUFXZixPQUFPO0FBQ3JDLE1BQU1nQixZQUFZNUMsZ0JBQWdCMkIsbUJBQU9BLENBQUMscUlBQVc7QUFDckR0QixlQUFlLEdBQUd1QyxVQUFVaEIsT0FBTztBQUNuQyxNQUFNaUIsYUFBYTdDLGdCQUFnQjJCLG1CQUFPQSxDQUFDLHVJQUFZO0FBQ3ZEdEIsZ0JBQWdCLEdBQUd3QyxXQUFXakIsT0FBTztBQUNyQyxNQUFNa0IsUUFBUTlDLGdCQUFnQjJCLG1CQUFPQSxDQUFDLDZIQUFPO0FBQzdDdEIsV0FBVyxHQUFHeUMsTUFBTWxCLE9BQU8sRUFDM0IsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy9pbmRleC5qcz80NTIxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Wb2UgPSBleHBvcnRzLlZpekNsb3VkID0gZXhwb3J0cy5WaWRNb2x5ID0gZXhwb3J0cy5WaWRDbG91ZCA9IGV4cG9ydHMuU3RyZWFtV2lzaCA9IGV4cG9ydHMuU3RyZWFtVGFwZSA9IGV4cG9ydHMuU3RyZWFtU0IgPSBleHBvcnRzLlN0cmVhbUxhcmUgPSBleHBvcnRzLlN0cmVhbUh1YiA9IGV4cG9ydHMuU21hc2h5U3RyZWFtID0gZXhwb3J0cy5SYXBpZENsb3VkID0gZXhwb3J0cy5NcDRVcGxvYWQgPSBleHBvcnRzLk1wNFBsYXllciA9IGV4cG9ydHMuTWl4RHJvcCA9IGV4cG9ydHMuS3dpayA9IGV4cG9ydHMuR29nb0NETiA9IGV4cG9ydHMuRmlsZW1vb24gPSBleHBvcnRzLkJpbGliaWxpRXh0cmFjdG9yID0gZXhwb3J0cy5Bc2lhbkxvYWQgPSB2b2lkIDA7XG5jb25zdCBhc2lhbmxvYWRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9hc2lhbmxvYWRcIikpO1xuZXhwb3J0cy5Bc2lhbkxvYWQgPSBhc2lhbmxvYWRfMS5kZWZhdWx0O1xuY29uc3QgYmlsaWJpbGlfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9iaWxpYmlsaVwiKSk7XG5leHBvcnRzLkJpbGliaWxpRXh0cmFjdG9yID0gYmlsaWJpbGlfMS5kZWZhdWx0O1xuY29uc3QgZmlsZW1vb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9maWxlbW9vblwiKSk7XG5leHBvcnRzLkZpbGVtb29uID0gZmlsZW1vb25fMS5kZWZhdWx0O1xuY29uc3QgZ29nb2Nkbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2dvZ29jZG5cIikpO1xuZXhwb3J0cy5Hb2dvQ0ROID0gZ29nb2Nkbl8xLmRlZmF1bHQ7XG5jb25zdCBrd2lrXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4va3dpa1wiKSk7XG5leHBvcnRzLkt3aWsgPSBrd2lrXzEuZGVmYXVsdDtcbmNvbnN0IG1peGRyb3BfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9taXhkcm9wXCIpKTtcbmV4cG9ydHMuTWl4RHJvcCA9IG1peGRyb3BfMS5kZWZhdWx0O1xuY29uc3QgbXA0cGxheWVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbXA0cGxheWVyXCIpKTtcbmV4cG9ydHMuTXA0UGxheWVyID0gbXA0cGxheWVyXzEuZGVmYXVsdDtcbmNvbnN0IG1wNHVwbG9hZF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21wNHVwbG9hZFwiKSk7XG5leHBvcnRzLk1wNFVwbG9hZCA9IG1wNHVwbG9hZF8xLmRlZmF1bHQ7XG5jb25zdCByYXBpZGNsb3VkXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcmFwaWRjbG91ZFwiKSk7XG5leHBvcnRzLlJhcGlkQ2xvdWQgPSByYXBpZGNsb3VkXzEuZGVmYXVsdDtcbmNvbnN0IHNtYXNoeXN0cmVhbV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3NtYXNoeXN0cmVhbVwiKSk7XG5leHBvcnRzLlNtYXNoeVN0cmVhbSA9IHNtYXNoeXN0cmVhbV8xLmRlZmF1bHQ7XG5jb25zdCBzdHJlYW1odWJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zdHJlYW1odWJcIikpO1xuZXhwb3J0cy5TdHJlYW1IdWIgPSBzdHJlYW1odWJfMS5kZWZhdWx0O1xuY29uc3Qgc3RyZWFtbGFyZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3N0cmVhbWxhcmVcIikpO1xuZXhwb3J0cy5TdHJlYW1MYXJlID0gc3RyZWFtbGFyZV8xLmRlZmF1bHQ7XG5jb25zdCBzdHJlYW1zYl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3N0cmVhbXNiXCIpKTtcbmV4cG9ydHMuU3RyZWFtU0IgPSBzdHJlYW1zYl8xLmRlZmF1bHQ7XG5jb25zdCBzdHJlYW10YXBlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc3RyZWFtdGFwZVwiKSk7XG5leHBvcnRzLlN0cmVhbVRhcGUgPSBzdHJlYW10YXBlXzEuZGVmYXVsdDtcbmNvbnN0IHN0cmVhbXdpc2hfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zdHJlYW13aXNoXCIpKTtcbmV4cG9ydHMuU3RyZWFtV2lzaCA9IHN0cmVhbXdpc2hfMS5kZWZhdWx0O1xuY29uc3QgdmlkY2xvdWRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi92aWRjbG91ZFwiKSk7XG5leHBvcnRzLlZpZENsb3VkID0gdmlkY2xvdWRfMS5kZWZhdWx0O1xuY29uc3QgdmlkbW9seV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3ZpZG1vbHlcIikpO1xuZXhwb3J0cy5WaWRNb2x5ID0gdmlkbW9seV8xLmRlZmF1bHQ7XG5jb25zdCB2aXpjbG91ZF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3ZpemNsb3VkXCIpKTtcbmV4cG9ydHMuVml6Q2xvdWQgPSB2aXpjbG91ZF8xLmRlZmF1bHQ7XG5jb25zdCB2b2VfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi92b2VcIikpO1xuZXhwb3J0cy5Wb2UgPSB2b2VfMS5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlZvZSIsIlZpekNsb3VkIiwiVmlkTW9seSIsIlZpZENsb3VkIiwiU3RyZWFtV2lzaCIsIlN0cmVhbVRhcGUiLCJTdHJlYW1TQiIsIlN0cmVhbUxhcmUiLCJTdHJlYW1IdWIiLCJTbWFzaHlTdHJlYW0iLCJSYXBpZENsb3VkIiwiTXA0VXBsb2FkIiwiTXA0UGxheWVyIiwiTWl4RHJvcCIsIkt3aWsiLCJHb2dvQ0ROIiwiRmlsZW1vb24iLCJCaWxpYmlsaUV4dHJhY3RvciIsIkFzaWFuTG9hZCIsImFzaWFubG9hZF8xIiwicmVxdWlyZSIsImRlZmF1bHQiLCJiaWxpYmlsaV8xIiwiZmlsZW1vb25fMSIsImdvZ29jZG5fMSIsImt3aWtfMSIsIm1peGRyb3BfMSIsIm1wNHBsYXllcl8xIiwibXA0dXBsb2FkXzEiLCJyYXBpZGNsb3VkXzEiLCJzbWFzaHlzdHJlYW1fMSIsInN0cmVhbWh1Yl8xIiwic3RyZWFtbGFyZV8xIiwic3RyZWFtc2JfMSIsInN0cmVhbXRhcGVfMSIsInN0cmVhbXdpc2hfMSIsInZpZGNsb3VkXzEiLCJ2aWRtb2x5XzEiLCJ2aXpjbG91ZF8xIiwidm9lXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/kwik.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/kwik.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass Kwik extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"kwik\";\n        this.sources = [];\n        this.host = \"https://animepahe.com\";\n        this.extract = async (videoUrl)=>{\n            try {\n                const { data } = await this.client.get(`${videoUrl.href}`, {\n                    headers: {\n                        Referer: this.host\n                    }\n                });\n                const source = eval(/(eval)(\\(f.*?)(\\n<\\/script>)/s.exec(data)[2].replace(\"eval\", \"\")).match(/https.*?m3u8/);\n                this.sources.push({\n                    url: source[0],\n                    isM3U8: source[0].includes(\".m3u8\")\n                });\n                return this.sources;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = Kwik; //# sourceMappingURL=kwik.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy9rd2lrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFdBQVdDLG1CQUFPQSxDQUFDLCtIQUFXO0FBQ3BDLE1BQU1DLGFBQWFGLFNBQVNHLGNBQWM7SUFDdENDLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxVQUFVLEdBQUc7UUFDbEIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsRUFBRTtRQUNqQixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsT0FBTyxHQUFHLE9BQU9DO1lBQ2xCLElBQUk7Z0JBQ0EsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxFQUFFSCxTQUFTSSxJQUFJLENBQUMsQ0FBQyxFQUFFO29CQUN2REMsU0FBUzt3QkFBRUMsU0FBUyxJQUFJLENBQUNSLElBQUk7b0JBQUM7Z0JBQ2xDO2dCQUNBLE1BQU1TLFNBQVNDLEtBQUssZ0NBQWdDQyxJQUFJLENBQUNSLEtBQUssQ0FBQyxFQUFFLENBQUNTLE9BQU8sQ0FBQyxRQUFRLEtBQUtDLEtBQUssQ0FBQztnQkFDN0YsSUFBSSxDQUFDZCxPQUFPLENBQUNlLElBQUksQ0FBQztvQkFDZEMsS0FBS04sTUFBTSxDQUFDLEVBQUU7b0JBQ2RPLFFBQVFQLE1BQU0sQ0FBQyxFQUFFLENBQUNRLFFBQVEsQ0FBQztnQkFDL0I7Z0JBQ0EsT0FBTyxJQUFJLENBQUNsQixPQUFPO1lBQ3ZCLEVBQ0EsT0FBT21CLEtBQUs7Z0JBQ1IsTUFBTSxJQUFJQyxNQUFNRCxJQUFJRSxPQUFPO1lBQy9CO1FBQ0o7SUFDSjtBQUNKO0FBQ0E5QixrQkFBZSxHQUFHSSxNQUNsQixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29uc3VtZXQrZXh0ZW5zaW9uc0AxLjUuNC9ub2RlX21vZHVsZXMvQGNvbnN1bWV0L2V4dGVuc2lvbnMvZGlzdC9leHRyYWN0b3JzL2t3aWsuanM/ZDdkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG1vZGVsc18xID0gcmVxdWlyZShcIi4uL21vZGVsc1wiKTtcbmNsYXNzIEt3aWsgZXh0ZW5kcyBtb2RlbHNfMS5WaWRlb0V4dHJhY3RvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuc2VydmVyTmFtZSA9ICdrd2lrJztcbiAgICAgICAgdGhpcy5zb3VyY2VzID0gW107XG4gICAgICAgIHRoaXMuaG9zdCA9ICdodHRwczovL2FuaW1lcGFoZS5jb20nO1xuICAgICAgICB0aGlzLmV4dHJhY3QgPSBhc3luYyAodmlkZW9VcmwpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQoYCR7dmlkZW9VcmwuaHJlZn1gLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgUmVmZXJlcjogdGhpcy5ob3N0IH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gZXZhbCgvKGV2YWwpKFxcKGYuKj8pKFxcbjxcXC9zY3JpcHQ+KS9zLmV4ZWMoZGF0YSlbMl0ucmVwbGFjZSgnZXZhbCcsICcnKSkubWF0Y2goL2h0dHBzLio/bTN1OC8pO1xuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBzb3VyY2VbMF0sXG4gICAgICAgICAgICAgICAgICAgIGlzTTNVODogc291cmNlWzBdLmluY2x1ZGVzKCcubTN1OCcpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNvdXJjZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBLd2lrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a3dpay5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtb2RlbHNfMSIsInJlcXVpcmUiLCJLd2lrIiwiVmlkZW9FeHRyYWN0b3IiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsInNlcnZlck5hbWUiLCJzb3VyY2VzIiwiaG9zdCIsImV4dHJhY3QiLCJ2aWRlb1VybCIsImRhdGEiLCJjbGllbnQiLCJnZXQiLCJocmVmIiwiaGVhZGVycyIsIlJlZmVyZXIiLCJzb3VyY2UiLCJldmFsIiwiZXhlYyIsInJlcGxhY2UiLCJtYXRjaCIsInB1c2giLCJ1cmwiLCJpc00zVTgiLCJpbmNsdWRlcyIsImVyciIsIkVycm9yIiwibWVzc2FnZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/kwik.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/mixdrop.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/mixdrop.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass MixDrop extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"MixDrop\";\n        this.sources = [];\n        this.extract = async (videoUrl)=>{\n            try {\n                const { data } = await this.client.get(videoUrl.href);\n                const formated = eval(/(eval)(\\(f.*?)(\\n<\\/script>)/s.exec(data)[2].replace(\"eval\", \"\"));\n                const [poster, source] = formated.match(/poster=\"([^\"]+)\"|wurl=\"([^\"]+)\"/g).map((x1)=>x1.split(`=\"`)[1].replace(/\"/g, \"\")).map((x1)=>x1.startsWith(\"http\") ? x1 : `https:${x1}`);\n                this.sources.push({\n                    url: source,\n                    isM3U8: source.includes(\".m3u8\"),\n                    poster: poster\n                });\n                return this.sources;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = MixDrop; //# sourceMappingURL=mixdrop.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy9taXhkcm9wLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFdBQVdDLG1CQUFPQSxDQUFDLCtIQUFXO0FBQ3BDLE1BQU1DLGdCQUFnQkYsU0FBU0csY0FBYztJQUN6Q0MsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLE9BQU8sR0FBRyxFQUFFO1FBQ2pCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLE9BQU9DO1lBQ2xCLElBQUk7Z0JBQ0EsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUNILFNBQVNJLElBQUk7Z0JBQ3BELE1BQU1DLFdBQVdDLEtBQUssZ0NBQWdDQyxJQUFJLENBQUNOLEtBQUssQ0FBQyxFQUFFLENBQUNPLE9BQU8sQ0FBQyxRQUFRO2dCQUNwRixNQUFNLENBQUNDLFFBQVFDLE9BQU8sR0FBR0wsU0FDcEJNLEtBQUssQ0FBQyxvQ0FDTkMsR0FBRyxDQUFDLENBQUNDLEtBQU1BLEdBQUVDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDTixPQUFPLENBQUMsTUFBTSxLQUMxQ0ksR0FBRyxDQUFDLENBQUNDLEtBQU9BLEdBQUVFLFVBQVUsQ0FBQyxVQUFVRixLQUFJLENBQUMsTUFBTSxFQUFFQSxHQUFFLENBQUM7Z0JBQ3hELElBQUksQ0FBQ2YsT0FBTyxDQUFDa0IsSUFBSSxDQUFDO29CQUNkQyxLQUFLUDtvQkFDTFEsUUFBUVIsT0FBT1MsUUFBUSxDQUFDO29CQUN4QlYsUUFBUUE7Z0JBQ1o7Z0JBQ0EsT0FBTyxJQUFJLENBQUNYLE9BQU87WUFDdkIsRUFDQSxPQUFPc0IsS0FBSztnQkFDUixNQUFNLElBQUlDLE1BQU1ELElBQUlFLE9BQU87WUFDL0I7UUFDSjtJQUNKO0FBQ0o7QUFDQWpDLGtCQUFlLEdBQUdJLFNBQ2xCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3doYXRldmVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25zdW1ldCtleHRlbnNpb25zQDEuNS40L25vZGVfbW9kdWxlcy9AY29uc3VtZXQvZXh0ZW5zaW9ucy9kaXN0L2V4dHJhY3RvcnMvbWl4ZHJvcC5qcz83MTUzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbW9kZWxzXzEgPSByZXF1aXJlKFwiLi4vbW9kZWxzXCIpO1xuY2xhc3MgTWl4RHJvcCBleHRlbmRzIG1vZGVsc18xLlZpZGVvRXh0cmFjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5zZXJ2ZXJOYW1lID0gJ01peERyb3AnO1xuICAgICAgICB0aGlzLnNvdXJjZXMgPSBbXTtcbiAgICAgICAgdGhpcy5leHRyYWN0ID0gYXN5bmMgKHZpZGVvVXJsKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5jbGllbnQuZ2V0KHZpZGVvVXJsLmhyZWYpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdGVkID0gZXZhbCgvKGV2YWwpKFxcKGYuKj8pKFxcbjxcXC9zY3JpcHQ+KS9zLmV4ZWMoZGF0YSlbMl0ucmVwbGFjZSgnZXZhbCcsICcnKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgW3Bvc3Rlciwgc291cmNlXSA9IGZvcm1hdGVkXG4gICAgICAgICAgICAgICAgICAgIC5tYXRjaCgvcG9zdGVyPVwiKFteXCJdKylcInx3dXJsPVwiKFteXCJdKylcIi9nKVxuICAgICAgICAgICAgICAgICAgICAubWFwKCh4KSA9PiB4LnNwbGl0KGA9XCJgKVsxXS5yZXBsYWNlKC9cIi9nLCAnJykpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKHgpID0+ICh4LnN0YXJ0c1dpdGgoJ2h0dHAnKSA/IHggOiBgaHR0cHM6JHt4fWApKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogc291cmNlLFxuICAgICAgICAgICAgICAgICAgICBpc00zVTg6IHNvdXJjZS5pbmNsdWRlcygnLm0zdTgnKSxcbiAgICAgICAgICAgICAgICAgICAgcG9zdGVyOiBwb3N0ZXIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IE1peERyb3A7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taXhkcm9wLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZGVsc18xIiwicmVxdWlyZSIsIk1peERyb3AiLCJWaWRlb0V4dHJhY3RvciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwic2VydmVyTmFtZSIsInNvdXJjZXMiLCJleHRyYWN0IiwidmlkZW9VcmwiLCJkYXRhIiwiY2xpZW50IiwiZ2V0IiwiaHJlZiIsImZvcm1hdGVkIiwiZXZhbCIsImV4ZWMiLCJyZXBsYWNlIiwicG9zdGVyIiwic291cmNlIiwibWF0Y2giLCJtYXAiLCJ4Iiwic3BsaXQiLCJzdGFydHNXaXRoIiwicHVzaCIsInVybCIsImlzTTNVOCIsImluY2x1ZGVzIiwiZXJyIiwiRXJyb3IiLCJtZXNzYWdlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/mixdrop.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/mp4player.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/mp4player.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass Mp4Player extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"mp4player\";\n        this.sources = [];\n        this.domains = [\n            \"mp4player.site\"\n        ];\n        this.extract = async (videoUrl)=>{\n            var _a, _b;\n            try {\n                const result = {\n                    sources: [],\n                    subtitles: []\n                };\n                const response = await this.client.get(videoUrl.href);\n                const data = (_b = (_a = response.data.match(new RegExp(\"(?<=sniff\\\\()(.*)(?=\\\\))\"))[0]) === null || _a === void 0 ? void 0 : _a.replace(/\\\"/g, \"\")) === null || _b === void 0 ? void 0 : _b.split(\",\");\n                const link = `https://${videoUrl.host}/m3u8/${data[1]}/${data[2]}/master.txt?s=1&cache=${data[7]}`;\n                //const thumbnails = response.data.match(new RegExp('(?<=file\":\")(.*)(?=\",\"kind)'))[0]?.replace(/\\\\/g, '');\n                const m3u8Content = await this.client.get(link, {\n                    headers: {\n                        accept: \"*/*\",\n                        referer: videoUrl.href\n                    }\n                });\n                if (m3u8Content.data.includes(\"EXTM3U\")) {\n                    const videoList = m3u8Content.data.split(\"#EXT-X-STREAM-INF:\");\n                    for (const video of videoList !== null && videoList !== void 0 ? videoList : []){\n                        if (video.includes(\"BANDWIDTH\")) {\n                            const url = video.split(\"\\n\")[1];\n                            const quality = video.split(\"RESOLUTION=\")[1].split(\"\\n\")[0].split(\"x\")[1];\n                            result.sources.push({\n                                url: url,\n                                quality: `${quality}`,\n                                isM3U8: url.includes(\".m3u8\")\n                            });\n                        }\n                    }\n                }\n                return result;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = Mp4Player; //# sourceMappingURL=mp4player.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy9tcDRwbGF5ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsV0FBV0MsbUJBQU9BLENBQUMsK0hBQVc7QUFDcEMsTUFBTUMsa0JBQWtCRixTQUFTRyxjQUFjO0lBQzNDQyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsVUFBVSxHQUFHO1FBQ2xCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEVBQUU7UUFDakIsSUFBSSxDQUFDQyxPQUFPLEdBQUc7WUFBQztTQUFpQjtRQUNqQyxJQUFJLENBQUNDLE9BQU8sR0FBRyxPQUFPQztZQUNsQixJQUFJQyxJQUFJQztZQUNSLElBQUk7Z0JBQ0EsTUFBTUMsU0FBUztvQkFDWE4sU0FBUyxFQUFFO29CQUNYTyxXQUFXLEVBQUU7Z0JBQ2pCO2dCQUNBLE1BQU1DLFdBQVcsTUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDUCxTQUFTUSxJQUFJO2dCQUNwRCxNQUFNQyxPQUFPLENBQUNQLEtBQUssQ0FBQ0QsS0FBS0ksU0FBU0ksSUFBSSxDQUNqQ0MsS0FBSyxDQUFDLElBQUlDLE9BQU8sNEJBQTRCLENBQUMsRUFBRSxNQUFNLFFBQVFWLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR1csT0FBTyxDQUFDLE9BQU8sR0FBRSxNQUFPLFFBQVFWLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR1csS0FBSyxDQUFDO2dCQUNqSyxNQUFNQyxPQUFPLENBQUMsUUFBUSxFQUFFZCxTQUFTZSxJQUFJLENBQUMsTUFBTSxFQUFFTixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNsRywyR0FBMkc7Z0JBQzNHLE1BQU1PLGNBQWMsTUFBTSxJQUFJLENBQUNWLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDTyxNQUFNO29CQUM1Q0csU0FBUzt3QkFDTEMsUUFBUTt3QkFDUkMsU0FBU25CLFNBQVNRLElBQUk7b0JBQzFCO2dCQUNKO2dCQUNBLElBQUlRLFlBQVlQLElBQUksQ0FBQ1csUUFBUSxDQUFDLFdBQVc7b0JBQ3JDLE1BQU1DLFlBQVlMLFlBQVlQLElBQUksQ0FBQ0ksS0FBSyxDQUFDO29CQUN6QyxLQUFLLE1BQU1TLFNBQVNELGNBQWMsUUFBUUEsY0FBYyxLQUFLLElBQUlBLFlBQVksRUFBRSxDQUFFO3dCQUM3RSxJQUFJQyxNQUFNRixRQUFRLENBQUMsY0FBYzs0QkFDN0IsTUFBTUcsTUFBTUQsTUFBTVQsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFOzRCQUNoQyxNQUFNVyxVQUFVRixNQUFNVCxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQ0EsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUNBLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTs0QkFDMUVWLE9BQU9OLE9BQU8sQ0FBQzRCLElBQUksQ0FBQztnQ0FDaEJGLEtBQUtBO2dDQUNMQyxTQUFTLENBQUMsRUFBRUEsUUFBUSxDQUFDO2dDQUNyQkUsUUFBUUgsSUFBSUgsUUFBUSxDQUFDOzRCQUN6Qjt3QkFDSjtvQkFDSjtnQkFDSjtnQkFDQSxPQUFPakI7WUFDWCxFQUNBLE9BQU93QixLQUFLO2dCQUNSLE1BQU0sSUFBSUMsTUFBTUQsSUFBSUUsT0FBTztZQUMvQjtRQUNKO0lBQ0o7QUFDSjtBQUNBekMsa0JBQWUsR0FBR0ksV0FDbEIscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy9tcDRwbGF5ZXIuanM/NzJiMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG1vZGVsc18xID0gcmVxdWlyZShcIi4uL21vZGVsc1wiKTtcbmNsYXNzIE1wNFBsYXllciBleHRlbmRzIG1vZGVsc18xLlZpZGVvRXh0cmFjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5zZXJ2ZXJOYW1lID0gJ21wNHBsYXllcic7XG4gICAgICAgIHRoaXMuc291cmNlcyA9IFtdO1xuICAgICAgICB0aGlzLmRvbWFpbnMgPSBbJ21wNHBsYXllci5zaXRlJ107XG4gICAgICAgIHRoaXMuZXh0cmFjdCA9IGFzeW5jICh2aWRlb1VybCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGVzOiBbXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jbGllbnQuZ2V0KHZpZGVvVXJsLmhyZWYpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSAoX2IgPSAoX2EgPSByZXNwb25zZS5kYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXRjaChuZXcgUmVnRXhwKCcoPzw9c25pZmZcXFxcKCkoLiopKD89XFxcXCkpJykpWzBdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVwbGFjZSgvXFxcIi9nLCAnJykpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBgaHR0cHM6Ly8ke3ZpZGVvVXJsLmhvc3R9L20zdTgvJHtkYXRhWzFdfS8ke2RhdGFbMl19L21hc3Rlci50eHQ/cz0xJmNhY2hlPSR7ZGF0YVs3XX1gO1xuICAgICAgICAgICAgICAgIC8vY29uc3QgdGh1bWJuYWlscyA9IHJlc3BvbnNlLmRhdGEubWF0Y2gobmV3IFJlZ0V4cCgnKD88PWZpbGVcIjpcIikoLiopKD89XCIsXCJraW5kKScpKVswXT8ucmVwbGFjZSgvXFxcXC9nLCAnJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbTN1OENvbnRlbnQgPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQobGluaywge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NlcHQ6ICcqLyonLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJlcjogdmlkZW9VcmwuaHJlZixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAobTN1OENvbnRlbnQuZGF0YS5pbmNsdWRlcygnRVhUTTNVJykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlkZW9MaXN0ID0gbTN1OENvbnRlbnQuZGF0YS5zcGxpdCgnI0VYVC1YLVNUUkVBTS1JTkY6Jyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdmlkZW8gb2YgdmlkZW9MaXN0ICE9PSBudWxsICYmIHZpZGVvTGlzdCAhPT0gdm9pZCAwID8gdmlkZW9MaXN0IDogW10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2aWRlby5pbmNsdWRlcygnQkFORFdJRFRIJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSB2aWRlby5zcGxpdCgnXFxuJylbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcXVhbGl0eSA9IHZpZGVvLnNwbGl0KCdSRVNPTFVUSU9OPScpWzFdLnNwbGl0KCdcXG4nKVswXS5zcGxpdCgneCcpWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zb3VyY2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhbGl0eTogYCR7cXVhbGl0eX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc00zVTg6IHVybC5pbmNsdWRlcygnLm0zdTgnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTXA0UGxheWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXA0cGxheWVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZGVsc18xIiwicmVxdWlyZSIsIk1wNFBsYXllciIsIlZpZGVvRXh0cmFjdG9yIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJzZXJ2ZXJOYW1lIiwic291cmNlcyIsImRvbWFpbnMiLCJleHRyYWN0IiwidmlkZW9VcmwiLCJfYSIsIl9iIiwicmVzdWx0Iiwic3VidGl0bGVzIiwicmVzcG9uc2UiLCJjbGllbnQiLCJnZXQiLCJocmVmIiwiZGF0YSIsIm1hdGNoIiwiUmVnRXhwIiwicmVwbGFjZSIsInNwbGl0IiwibGluayIsImhvc3QiLCJtM3U4Q29udGVudCIsImhlYWRlcnMiLCJhY2NlcHQiLCJyZWZlcmVyIiwiaW5jbHVkZXMiLCJ2aWRlb0xpc3QiLCJ2aWRlbyIsInVybCIsInF1YWxpdHkiLCJwdXNoIiwiaXNNM1U4IiwiZXJyIiwiRXJyb3IiLCJtZXNzYWdlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/mp4player.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/mp4upload.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/mp4upload.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass Mp4Upload extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"mp4upload\";\n        this.sources = [];\n        this.extract = async (videoUrl)=>{\n            try {\n                const { data } = await this.client.get(videoUrl.href);\n                const playerSrc = data.match(/(?<=player\\.src\\()\\s*{\\s*type:\\s*\"[^\"]+\",\\s*src:\\s*\"([^\"]+)\"\\s*}\\s*(?=\\);)/s);\n                const streamUrl = playerSrc[1];\n                if (!streamUrl) throw new Error(\"Stream url not found\");\n                this.sources.push({\n                    quality: \"auto\",\n                    url: streamUrl,\n                    isM3U8: streamUrl.includes(\".m3u8\")\n                });\n                return this.sources;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = Mp4Upload; //# sourceMappingURL=mp4upload.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy9tcDR1cGxvYWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsV0FBV0MsbUJBQU9BLENBQUMsK0hBQVc7QUFDcEMsTUFBTUMsa0JBQWtCRixTQUFTRyxjQUFjO0lBQzNDQyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsVUFBVSxHQUFHO1FBQ2xCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEVBQUU7UUFDakIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsT0FBT0M7WUFDbEIsSUFBSTtnQkFDQSxNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQ0gsU0FBU0ksSUFBSTtnQkFDcEQsTUFBTUMsWUFBWUosS0FBS0ssS0FBSyxDQUFDO2dCQUM3QixNQUFNQyxZQUFZRixTQUFTLENBQUMsRUFBRTtnQkFDOUIsSUFBSSxDQUFDRSxXQUNELE1BQU0sSUFBSUMsTUFBTTtnQkFDcEIsSUFBSSxDQUFDVixPQUFPLENBQUNXLElBQUksQ0FBQztvQkFDZEMsU0FBUztvQkFDVEMsS0FBS0o7b0JBQ0xLLFFBQVFMLFVBQVVNLFFBQVEsQ0FBQztnQkFDL0I7Z0JBQ0EsT0FBTyxJQUFJLENBQUNmLE9BQU87WUFDdkIsRUFDQSxPQUFPZ0IsS0FBSztnQkFDUixNQUFNLElBQUlOLE1BQU1NLElBQUlDLE9BQU87WUFDL0I7UUFDSjtJQUNKO0FBQ0o7QUFDQTFCLGtCQUFlLEdBQUdJLFdBQ2xCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3doYXRldmVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25zdW1ldCtleHRlbnNpb25zQDEuNS40L25vZGVfbW9kdWxlcy9AY29uc3VtZXQvZXh0ZW5zaW9ucy9kaXN0L2V4dHJhY3RvcnMvbXA0dXBsb2FkLmpzP2Y4MjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBtb2RlbHNfMSA9IHJlcXVpcmUoXCIuLi9tb2RlbHNcIik7XG5jbGFzcyBNcDRVcGxvYWQgZXh0ZW5kcyBtb2RlbHNfMS5WaWRlb0V4dHJhY3RvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuc2VydmVyTmFtZSA9ICdtcDR1cGxvYWQnO1xuICAgICAgICB0aGlzLnNvdXJjZXMgPSBbXTtcbiAgICAgICAgdGhpcy5leHRyYWN0ID0gYXN5bmMgKHZpZGVvVXJsKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5jbGllbnQuZ2V0KHZpZGVvVXJsLmhyZWYpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBsYXllclNyYyA9IGRhdGEubWF0Y2goLyg/PD1wbGF5ZXJcXC5zcmNcXCgpXFxzKntcXHMqdHlwZTpcXHMqXCJbXlwiXStcIixcXHMqc3JjOlxccypcIihbXlwiXSspXCJcXHMqfVxccyooPz1cXCk7KS9zKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHJlYW1VcmwgPSBwbGF5ZXJTcmNbMV07XG4gICAgICAgICAgICAgICAgaWYgKCFzdHJlYW1VcmwpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3RyZWFtIHVybCBub3QgZm91bmQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHF1YWxpdHk6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBzdHJlYW1VcmwsXG4gICAgICAgICAgICAgICAgICAgIGlzTTNVODogc3RyZWFtVXJsLmluY2x1ZGVzKCcubTN1OCcpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNvdXJjZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBNcDRVcGxvYWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tcDR1cGxvYWQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kZWxzXzEiLCJyZXF1aXJlIiwiTXA0VXBsb2FkIiwiVmlkZW9FeHRyYWN0b3IiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsInNlcnZlck5hbWUiLCJzb3VyY2VzIiwiZXh0cmFjdCIsInZpZGVvVXJsIiwiZGF0YSIsImNsaWVudCIsImdldCIsImhyZWYiLCJwbGF5ZXJTcmMiLCJtYXRjaCIsInN0cmVhbVVybCIsIkVycm9yIiwicHVzaCIsInF1YWxpdHkiLCJ1cmwiLCJpc00zVTgiLCJpbmNsdWRlcyIsImVyciIsIm1lc3NhZ2UiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/mp4upload.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/rapidcloud.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/rapidcloud.js ***!
  \***********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst crypto_js_1 = __importDefault(__webpack_require__(/*! crypto-js */ \"(rsc)/./node_modules/.pnpm/crypto-js@4.2.0/node_modules/crypto-js/index.js\"));\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass RapidCloud extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"RapidCloud\";\n        this.sources = [];\n        this.fallbackKey = \"c1d17096f2ca11b7\";\n        this.host = \"https://rapid-cloud.co\";\n        this.extract = async (videoUrl)=>{\n            var _a, _b;\n            const result = {\n                sources: [],\n                subtitles: []\n            };\n            try {\n                const id = (_a = videoUrl.href.split(\"/\").pop()) === null || _a === void 0 ? void 0 : _a.split(\"?\")[0];\n                const options = {\n                    headers: {\n                        \"X-Requested-With\": \"XMLHttpRequest\"\n                    }\n                };\n                let res = null;\n                res = await this.client.get(`https://${videoUrl.hostname}/embed-2/ajax/e-1/getSources?id=${id}`, options);\n                let { data: { sources, tracks, intro, encrypted } } = res;\n                let decryptKey = await (await this.client.get(\"https://raw.githubusercontent.com/theonlymo/keys/e1/key\")).data;\n                decryptKey = (0, utils_1.substringBefore)((0, utils_1.substringAfter)(decryptKey, '\"blob-code blob-code-inner js-file-line\">'), \"</td>\");\n                if (!decryptKey) {\n                    decryptKey = await (await this.client.get(\"https://raw.githubusercontent.com/theonlymo/keys/e1/key\")).data;\n                }\n                if (!decryptKey) decryptKey = this.fallbackKey;\n                try {\n                    if (encrypted) {\n                        const sourcesArray = sources.split(\"\");\n                        let extractedKey = \"\";\n                        let currentIndex = 0;\n                        for (const index of decryptKey){\n                            const start = index[0] + currentIndex;\n                            const end = start + index[1];\n                            for(let i = start; i < end; i++){\n                                extractedKey += res.data.sources[i];\n                                sourcesArray[i] = \"\";\n                            }\n                            currentIndex += index[1];\n                        }\n                        decryptKey = extractedKey;\n                        sources = sourcesArray.join(\"\");\n                        const decrypt = crypto_js_1.default.AES.decrypt(sources, decryptKey);\n                        sources = JSON.parse(decrypt.toString(crypto_js_1.default.enc.Utf8));\n                    }\n                } catch (err) {\n                    throw new Error(\"Cannot decrypt sources. Perhaps the key is invalid.\");\n                }\n                this.sources = sources === null || sources === void 0 ? void 0 : sources.map((s)=>({\n                        url: s.file,\n                        isM3U8: s.file.includes(\".m3u8\")\n                    }));\n                result.sources.push(...this.sources);\n                if (videoUrl.href.includes(new URL(this.host).host)) {\n                    result.sources = [];\n                    this.sources = [];\n                    for (const source of sources){\n                        const { data } = await this.client.get(source.file, options);\n                        const m3u8data = data.split(\"\\n\").filter((line)=>line.includes(\".m3u8\") && line.includes(\"RESOLUTION=\"));\n                        const secondHalf = m3u8data.map((line)=>{\n                            var _a;\n                            return (_a = line.match(/RESOLUTION=.*,(C)|URI=.*/g)) === null || _a === void 0 ? void 0 : _a.map((s)=>s.split(\"=\")[1]);\n                        });\n                        const TdArray = secondHalf.map((s)=>{\n                            const f1 = s[0].split(\",C\")[0];\n                            const f2 = s[1].replace(/\"/g, \"\");\n                            return [\n                                f1,\n                                f2\n                            ];\n                        });\n                        for (const [f1, f2] of TdArray){\n                            this.sources.push({\n                                url: `${(_b = source.file) === null || _b === void 0 ? void 0 : _b.split(\"master.m3u8\")[0]}${f2.replace(\"iframes\", \"index\")}`,\n                                quality: f1.split(\"x\")[1] + \"p\",\n                                isM3U8: f2.includes(\".m3u8\")\n                            });\n                        }\n                        result.sources.push(...this.sources);\n                    }\n                }\n                if ((intro === null || intro === void 0 ? void 0 : intro.end) > 1) {\n                    result.intro = {\n                        start: intro.start,\n                        end: intro.end\n                    };\n                }\n                result.sources.push({\n                    url: sources[0].file,\n                    isM3U8: sources[0].file.includes(\".m3u8\"),\n                    quality: \"auto\"\n                });\n                result.subtitles = tracks.map((s)=>s.file ? {\n                        url: s.file,\n                        lang: s.label ? s.label : \"Thumbnails\"\n                    } : null).filter((s)=>s);\n                return result;\n            } catch (err) {\n                throw err;\n            }\n        };\n        this.captcha = async (url, key)=>{\n            const uri = new URL(url);\n            const domain = uri.protocol + \"//\" + uri.host;\n            const { data } = await this.client.get(`https://www.google.com/recaptcha/api.js?render=${key}`, {\n                headers: {\n                    Referer: domain\n                }\n            });\n            const v = data === null || data === void 0 ? void 0 : data.substring(data.indexOf(\"/releases/\"), data.lastIndexOf(\"/recaptcha\")).split(\"/releases/\")[1];\n            //TODO: NEED to fix the co (domain) parameter to work with every domain\n            const anchor = `https://www.google.com/recaptcha/api2/anchor?ar=1&hl=en&size=invisible&cb=kr42069kr&k=${key}&co=aHR0cHM6Ly9yYXBpZC1jbG91ZC5ydTo0NDM.&v=${v}`;\n            const c = (0, cheerio_1.load)((await this.client.get(anchor)).data)(\"#recaptcha-token\").attr(\"value\");\n            // currently its not returning proper response. not sure why\n            const res = await this.client.post(`https://www.google.com/recaptcha/api2/reload?k=${key}`, {\n                v: v,\n                k: key,\n                c: c,\n                co: \"aHR0cHM6Ly9yYXBpZC1jbG91ZC5ydTo0NDM.\",\n                sa: \"\",\n                reason: \"q\"\n            }, {\n                headers: {\n                    Referer: anchor\n                }\n            });\n            return res.data.substring(res.data.indexOf('rresp\",\"'), res.data.lastIndexOf('\",null'));\n        };\n    // private wss = async (): Promise<string> => {\n    //   let sId = '';\n    //   const ws = new WebSocket('wss://ws1.rapid-cloud.ru/socket.io/?EIO=4&transport=websocket');\n    //   ws.on('open', () => {\n    //     ws.send('40');\n    //   });\n    //   return await new Promise((resolve, reject) => {\n    //     ws.on('message', (data: string) => {\n    //       data = data.toString();\n    //       if (data?.startsWith('40')) {\n    //         sId = JSON.parse(data.split('40')[1]).sid;\n    //         ws.close(4969, \"I'm a teapot\");\n    //         resolve(sId);\n    //       }\n    //     });\n    //   });\n    // };\n    }\n}\nexports[\"default\"] = RapidCloud; //# sourceMappingURL=rapidcloud.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/rapidcloud.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/smashystream.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/smashystream.js ***!
  \*************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\n// Copied form https://github.com/JorrinKievit/restreamer/blob/main/src/main/extractors/smashystream.ts/smashystream.ts\n// Thanks Jorrin Kievit\nclass SmashyStream extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"SmashyStream\";\n        this.sources = [];\n        this.host = \"https://embed.smashystream.com\";\n        this.extract = async (videoUrl)=>{\n            try {\n                const result = [];\n                const { data } = await this.client.get(videoUrl.href);\n                const $ = (0, cheerio_1.load)(data);\n                const sourceUrls = $(\".dropdown-menu a[data-id]\").map((_, el)=>$(el).attr(\"data-id\")).get().filter((it)=>it !== \"_default\");\n                await Promise.all(sourceUrls.map(async (sourceUrl)=>{\n                    if (sourceUrl.includes(\"/ffix\")) {\n                        const data = await this.extractSmashyFfix(sourceUrl);\n                        result.push({\n                            source: \"FFix\",\n                            data: data\n                        });\n                    }\n                    if (sourceUrl.includes(\"/watchx\")) {\n                        const data = await this.extractSmashyWatchX(sourceUrl);\n                        result.push({\n                            source: \"WatchX\",\n                            data: data\n                        });\n                    }\n                    if (sourceUrl.includes(\"/nflim\")) {\n                        const data = await this.extractSmashyNFlim(sourceUrl);\n                        result.push({\n                            source: \"NFilm\",\n                            data: data\n                        });\n                    }\n                    if (sourceUrl.includes(\"/fx\")) {\n                        const data = await this.extractSmashyFX(sourceUrl);\n                        result.push({\n                            source: \"FX\",\n                            data: data\n                        });\n                    }\n                    if (sourceUrl.includes(\"/cf\")) {\n                        const data = await this.extractSmashyCF(sourceUrl);\n                        result.push({\n                            source: \"CF\",\n                            data: data\n                        });\n                    }\n                    if (sourceUrl.includes(\"eemovie\")) {\n                        const data = await this.extractSmashyEEMovie(sourceUrl);\n                        result.push({\n                            source: \"EEMovie\",\n                            data: data\n                        });\n                    }\n                    return undefined;\n                }));\n                return result.filter((a)=>a.source === \"FFix\")[0].data;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n    async extractSmashyFfix(url) {\n        try {\n            const result = {\n                sources: [],\n                subtitles: []\n            };\n            const res = await this.client.get(url, {\n                headers: {\n                    referer: url\n                }\n            });\n            const config = JSON.parse(res.data.match(/var\\s+config\\s*=\\s*({.*?});/)[1]);\n            const files = config.file.match(/\\[([^\\]]+)\\](https?:\\/\\/\\S+?)(?=,\\[|$)/g).map((entry)=>{\n                const [, quality, link] = entry.match(/\\[([^\\]]+)\\](https?:\\/\\/\\S+?)(?=,\\[|$)/);\n                return {\n                    quality,\n                    link: link.replace(\",\", \"\")\n                };\n            });\n            const vttArray = config.subtitle.match(/\\[([^\\]]+)\\](https?:\\/\\/\\S+?)(?=,\\[|$)/g).map((entry)=>{\n                const [, language, link] = entry.match(/\\[([^\\]]+)\\](https?:\\/\\/\\S+?)(?=,\\[|$)/);\n                return {\n                    language,\n                    link: link.replace(\",\", \"\")\n                };\n            });\n            files.map((source)=>{\n                result.sources.push({\n                    url: source.link,\n                    quality: source.quality,\n                    isM3U8: source.link.includes(\".m3u8\")\n                });\n            });\n            vttArray.map((subtitle)=>{\n                result.subtitles.push({\n                    url: subtitle.link,\n                    lang: subtitle.language\n                });\n            });\n            return result;\n        } catch (err) {\n            throw new Error(err.message);\n        }\n    }\n    async extractSmashyWatchX(url) {\n        try {\n            const result = {\n                sources: [],\n                subtitles: []\n            };\n            const key = \"4VqE3#N7zt&HEP^a\";\n            const res = await this.client.get(url, {\n                headers: {\n                    referer: url\n                }\n            });\n            const regex = /MasterJS\\s*=\\s*'([^']*)'/;\n            const base64EncryptedData = regex.exec(res.data)[1];\n            const base64DecryptedData = JSON.parse(Buffer.from(base64EncryptedData, \"base64\").toString(\"utf8\"));\n            const derivedKey = crypto_1.default.pbkdf2Sync(key, Buffer.from(base64DecryptedData.salt, \"hex\"), base64DecryptedData.iterations, 32, \"sha512\");\n            const decipher = crypto_1.default.createDecipheriv(\"aes-256-cbc\", derivedKey, Buffer.from(base64DecryptedData.iv, \"hex\"));\n            decipher.setEncoding(\"utf8\");\n            let decrypted = decipher.update(base64DecryptedData.ciphertext, \"base64\", \"utf8\");\n            decrypted += decipher.final(\"utf8\");\n            const sources = JSON.parse(decrypted.match(/sources: ([^\\]]*\\])/)[1]);\n            const tracks = JSON.parse(decrypted.match(/tracks: ([^]*?\\}\\])/)[1]);\n            const subtitles = tracks.filter((it)=>it.kind === \"captions\");\n            sources.map((source)=>{\n                result.sources.push({\n                    url: source.file,\n                    quality: source.label,\n                    isM3U8: source.file.includes(\".m3u8\")\n                });\n            });\n            subtitles.map((subtitle)=>{\n                result.subtitles.push({\n                    url: subtitle.file,\n                    lang: subtitle.label\n                });\n            });\n            return result;\n        } catch (err) {\n            throw new Error(err.message);\n        }\n    }\n    async extractSmashyNFlim(url) {\n        try {\n            const result = {\n                sources: [],\n                subtitles: []\n            };\n            const res = await this.client.get(url, {\n                headers: {\n                    referer: url\n                }\n            });\n            const configData = res.data.match(/var\\s+config\\s*=\\s*({.*?});/);\n            const config = JSON.parse((configData === null || configData === void 0 ? void 0 : configData.length) > 0 ? configData[1] : null);\n            const files = config === null || config === void 0 ? void 0 : config.file.match(/\\[([^\\]]+)\\](https?:\\/\\/\\S+?)(?=,\\[|$)/g).map((entry)=>{\n                const [, quality, link] = entry.match(/\\[([^\\]]+)\\](https?:\\/\\/\\S+?)(?=,\\[|$)/);\n                return {\n                    quality,\n                    link: link.replace(\",\", \"\")\n                };\n            });\n            const vttArray = config === null || config === void 0 ? void 0 : config.subtitle.match(/\\[([^\\]]+)\\](https?:\\/\\/\\S+?)(?=,\\[|$)/g).map((entry)=>{\n                const [, language, link] = entry.match(/\\[([^\\]]+)\\](https?:\\/\\/\\S+?)(?=,\\[|$)/);\n                return {\n                    language,\n                    link: link.replace(\",\", \"\")\n                };\n            });\n            let validFiles = files;\n            if (files) {\n                await Promise.all(files === null || files === void 0 ? void 0 : files.map(async (source)=>{\n                    await this.client.head(source.link).then((res)=>console.log(res.status)).catch((err)=>{\n                        if (err.response.status.status !== 200) {\n                            validFiles = validFiles.filter((obj)=>obj.link !== source.link);\n                        }\n                    });\n                }));\n            }\n            if (validFiles) {\n                validFiles === null || validFiles === void 0 ? void 0 : validFiles.map((source)=>{\n                    result.sources.push({\n                        url: source.link,\n                        quality: source.quality,\n                        isM3U8: source.link.includes(\".m3u8\")\n                    });\n                });\n                if (vttArray) {\n                    vttArray === null || vttArray === void 0 ? void 0 : vttArray.map((subtitle)=>{\n                        result.subtitles.push({\n                            url: subtitle.link,\n                            lang: subtitle.language\n                        });\n                    });\n                }\n            }\n            return result;\n        } catch (err) {\n            throw new Error(err.message);\n        }\n    }\n    async extractSmashyFX(url) {\n        try {\n            const result = {\n                sources: [],\n                subtitles: []\n            };\n            const res = await this.client.get(url, {\n                headers: {\n                    referer: url\n                }\n            });\n            const file = res.data.match(/file:\\s*\"([^\"]+)\"/)[1];\n            result.sources.push({\n                url: file,\n                isM3U8: file.includes(\".m3u8\")\n            });\n            return result;\n        } catch (err) {\n            throw new Error(err.message);\n        }\n    }\n    async extractSmashyCF(url) {\n        try {\n            const result = {\n                sources: [],\n                subtitles: []\n            };\n            const res = await this.client.get(url, {\n                headers: {\n                    referer: url\n                }\n            });\n            const file = res.data.match(/file:\\s*\"([^\"]+)\"/)[1];\n            const fileRes = await this.client.head(file);\n            if (fileRes.status !== 200 || fileRes.data.includes(\"404\")) {\n                return result;\n            } else {\n                result.sources.push({\n                    url: file,\n                    isM3U8: file.includes(\".m3u8\")\n                });\n            }\n            return result;\n        } catch (err) {\n            throw new Error(err.message);\n        }\n    }\n    async extractSmashyEEMovie(url) {\n        try {\n            const result = {\n                sources: [],\n                subtitles: []\n            };\n            const res = await this.client.get(url, {\n                headers: {\n                    referer: url\n                }\n            });\n            const file = res.data.match(/file:\\s*\"([^\"]+)\"/)[1];\n            result.sources.push({\n                url: file,\n                isM3U8: file.includes(\".m3u8\")\n            });\n            return result;\n        } catch (err) {\n            throw new Error(err.message);\n        }\n    }\n}\nexports[\"default\"] = SmashyStream; //# sourceMappingURL=smashystream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/smashystream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamhub.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamhub.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass StreamHub extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"StreamHub\";\n        this.sources = [];\n        this.extract = async (videoUrl)=>{\n            var _a;\n            try {\n                const result = {\n                    sources: [],\n                    subtitles: []\n                };\n                const { data } = await this.client.get(videoUrl.href).catch(()=>{\n                    throw new Error(\"Video not found\");\n                });\n                const unpackedData = eval(/(eval)(\\(f.*?)(\\n<\\/script>)/s.exec(data)[2].replace(\"eval\", \"\"));\n                const links = (_a = unpackedData.match(new RegExp('sources:\\\\[\\\\{src:\"(.*?)\"'))) !== null && _a !== void 0 ? _a : [];\n                const m3u8Content = await this.client.get(links[1], {\n                    headers: {\n                        Referer: links[1]\n                    }\n                });\n                result.sources.push({\n                    quality: \"auto\",\n                    url: links[1],\n                    isM3U8: links[1].includes(\".m3u8\")\n                });\n                if (m3u8Content.data.includes(\"EXTM3U\")) {\n                    const videoList = m3u8Content.data.split(\"#EXT-X-STREAM-INF:\");\n                    for (const video of videoList !== null && videoList !== void 0 ? videoList : []){\n                        if (!video.includes(\"m3u8\")) continue;\n                        const url = video.split(\"\\n\")[1];\n                        const quality = video.split(\"RESOLUTION=\")[1].split(\",\")[0].split(\"x\")[1];\n                        result.sources.push({\n                            url: url,\n                            quality: `${quality}p`,\n                            isM3U8: url.includes(\".m3u8\")\n                        });\n                    }\n                }\n                return result;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = StreamHub; //# sourceMappingURL=streamhub.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy9zdHJlYW1odWIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsV0FBV0MsbUJBQU9BLENBQUMsK0hBQVc7QUFDcEMsTUFBTUMsa0JBQWtCRixTQUFTRyxjQUFjO0lBQzNDQyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsVUFBVSxHQUFHO1FBQ2xCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEVBQUU7UUFDakIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsT0FBT0M7WUFDbEIsSUFBSUM7WUFDSixJQUFJO2dCQUNBLE1BQU1DLFNBQVM7b0JBQ1hKLFNBQVMsRUFBRTtvQkFDWEssV0FBVyxFQUFFO2dCQUNqQjtnQkFDQSxNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQ04sU0FBU08sSUFBSSxFQUFFQyxLQUFLLENBQUM7b0JBQ3hELE1BQU0sSUFBSUMsTUFBTTtnQkFDcEI7Z0JBQ0EsTUFBTUMsZUFBZUMsS0FBSyxnQ0FBZ0NDLElBQUksQ0FBQ1IsS0FBSyxDQUFDLEVBQUUsQ0FBQ1MsT0FBTyxDQUFDLFFBQVE7Z0JBQ3hGLE1BQU1DLFFBQVEsQ0FBQ2IsS0FBS1MsYUFBYUssS0FBSyxDQUFDLElBQUlDLE9BQU8sNkJBQTRCLE1BQU8sUUFBUWYsT0FBTyxLQUFLLElBQUlBLEtBQUssRUFBRTtnQkFDcEgsTUFBTWdCLGNBQWMsTUFBTSxJQUFJLENBQUNaLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDUSxLQUFLLENBQUMsRUFBRSxFQUFFO29CQUNoREksU0FBUzt3QkFDTEMsU0FBU0wsS0FBSyxDQUFDLEVBQUU7b0JBQ3JCO2dCQUNKO2dCQUNBWixPQUFPSixPQUFPLENBQUNzQixJQUFJLENBQUM7b0JBQ2hCQyxTQUFTO29CQUNUQyxLQUFLUixLQUFLLENBQUMsRUFBRTtvQkFDYlMsUUFBUVQsS0FBSyxDQUFDLEVBQUUsQ0FBQ1UsUUFBUSxDQUFDO2dCQUM5QjtnQkFDQSxJQUFJUCxZQUFZYixJQUFJLENBQUNvQixRQUFRLENBQUMsV0FBVztvQkFDckMsTUFBTUMsWUFBWVIsWUFBWWIsSUFBSSxDQUFDc0IsS0FBSyxDQUFDO29CQUN6QyxLQUFLLE1BQU1DLFNBQVNGLGNBQWMsUUFBUUEsY0FBYyxLQUFLLElBQUlBLFlBQVksRUFBRSxDQUFFO3dCQUM3RSxJQUFJLENBQUNFLE1BQU1ILFFBQVEsQ0FBQyxTQUNoQjt3QkFDSixNQUFNRixNQUFNSyxNQUFNRCxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7d0JBQ2hDLE1BQU1MLFVBQVVNLE1BQU1ELEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDQSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQ0EsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUN6RXhCLE9BQU9KLE9BQU8sQ0FBQ3NCLElBQUksQ0FBQzs0QkFDaEJFLEtBQUtBOzRCQUNMRCxTQUFTLENBQUMsRUFBRUEsUUFBUSxDQUFDLENBQUM7NEJBQ3RCRSxRQUFRRCxJQUFJRSxRQUFRLENBQUM7d0JBQ3pCO29CQUNKO2dCQUNKO2dCQUNBLE9BQU90QjtZQUNYLEVBQ0EsT0FBTzBCLEtBQUs7Z0JBQ1IsTUFBTSxJQUFJbkIsTUFBTW1CLElBQUlDLE9BQU87WUFDL0I7UUFDSjtJQUNKO0FBQ0o7QUFDQXhDLGtCQUFlLEdBQUdJLFdBQ2xCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3doYXRldmVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25zdW1ldCtleHRlbnNpb25zQDEuNS40L25vZGVfbW9kdWxlcy9AY29uc3VtZXQvZXh0ZW5zaW9ucy9kaXN0L2V4dHJhY3RvcnMvc3RyZWFtaHViLmpzPzY2ZDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBtb2RlbHNfMSA9IHJlcXVpcmUoXCIuLi9tb2RlbHNcIik7XG5jbGFzcyBTdHJlYW1IdWIgZXh0ZW5kcyBtb2RlbHNfMS5WaWRlb0V4dHJhY3RvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuc2VydmVyTmFtZSA9ICdTdHJlYW1IdWInO1xuICAgICAgICB0aGlzLnNvdXJjZXMgPSBbXTtcbiAgICAgICAgdGhpcy5leHRyYWN0ID0gYXN5bmMgKHZpZGVvVXJsKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlczogW10sXG4gICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlczogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuY2xpZW50LmdldCh2aWRlb1VybC5ocmVmKS5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVmlkZW8gbm90IGZvdW5kJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdW5wYWNrZWREYXRhID0gZXZhbCgvKGV2YWwpKFxcKGYuKj8pKFxcbjxcXC9zY3JpcHQ+KS9zLmV4ZWMoZGF0YSlbMl0ucmVwbGFjZSgnZXZhbCcsICcnKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGlua3MgPSAoX2EgPSB1bnBhY2tlZERhdGEubWF0Y2gobmV3IFJlZ0V4cCgnc291cmNlczpcXFxcW1xcXFx7c3JjOlwiKC4qPylcIicpKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgICAgICAgICAgICAgY29uc3QgbTN1OENvbnRlbnQgPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQobGlua3NbMV0sIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgUmVmZXJlcjogbGlua3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnNvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHF1YWxpdHk6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBsaW5rc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgaXNNM1U4OiBsaW5rc1sxXS5pbmNsdWRlcygnLm0zdTgnKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAobTN1OENvbnRlbnQuZGF0YS5pbmNsdWRlcygnRVhUTTNVJykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlkZW9MaXN0ID0gbTN1OENvbnRlbnQuZGF0YS5zcGxpdCgnI0VYVC1YLVNUUkVBTS1JTkY6Jyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdmlkZW8gb2YgdmlkZW9MaXN0ICE9PSBudWxsICYmIHZpZGVvTGlzdCAhPT0gdm9pZCAwID8gdmlkZW9MaXN0IDogW10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmlkZW8uaW5jbHVkZXMoJ20zdTgnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IHZpZGVvLnNwbGl0KCdcXG4nKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHF1YWxpdHkgPSB2aWRlby5zcGxpdCgnUkVTT0xVVElPTj0nKVsxXS5zcGxpdCgnLCcpWzBdLnNwbGl0KCd4JylbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuc291cmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWFsaXR5OiBgJHtxdWFsaXR5fXBgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTTNVODogdXJsLmluY2x1ZGVzKCcubTN1OCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFN0cmVhbUh1Yjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmVhbWh1Yi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtb2RlbHNfMSIsInJlcXVpcmUiLCJTdHJlYW1IdWIiLCJWaWRlb0V4dHJhY3RvciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwic2VydmVyTmFtZSIsInNvdXJjZXMiLCJleHRyYWN0IiwidmlkZW9VcmwiLCJfYSIsInJlc3VsdCIsInN1YnRpdGxlcyIsImRhdGEiLCJjbGllbnQiLCJnZXQiLCJocmVmIiwiY2F0Y2giLCJFcnJvciIsInVucGFja2VkRGF0YSIsImV2YWwiLCJleGVjIiwicmVwbGFjZSIsImxpbmtzIiwibWF0Y2giLCJSZWdFeHAiLCJtM3U4Q29udGVudCIsImhlYWRlcnMiLCJSZWZlcmVyIiwicHVzaCIsInF1YWxpdHkiLCJ1cmwiLCJpc00zVTgiLCJpbmNsdWRlcyIsInZpZGVvTGlzdCIsInNwbGl0IiwidmlkZW8iLCJlcnIiLCJtZXNzYWdlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamhub.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamlare.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamlare.js ***!
  \***********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst video_extractor_1 = __importDefault(__webpack_require__(/*! ../models/video-extractor */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/video-extractor.js\"));\nclass StreamLare extends video_extractor_1.default {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"StreamLare\";\n        this.sources = [];\n        this.host = \"https://streamlare.com\";\n        this.regex = new RegExp(\"/[ve]/([^?#&/]+)\");\n        this.USER_AGENT = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36\";\n    }\n    async extract(videoUrl, userAgent = this.USER_AGENT.toString(), ...args) {\n        var _a;\n        const res = await this.client.get(videoUrl.href);\n        const $ = (0, cheerio_1.load)(res.data);\n        const CSRF_TOKEN = (_a = $(\"head > meta:nth-child(3)\").attr(\"content\")) === null || _a === void 0 ? void 0 : _a.toString();\n        const videoId = videoUrl.href.match(this.regex)[1];\n        if (videoId == undefined) {\n            throw new Error(\"Video id not matched!\");\n        }\n        const POST = await this.client.post(this.host + \"/api/video/stream/get\", {\n            id: videoId\n        }, {\n            headers: {\n                \"User-Agent\": userAgent\n            }\n        });\n        const POST_RES = POST.data;\n        const result = {\n            headers: {\n                \"User-Agent\": userAgent\n            },\n            status: POST_RES.status,\n            message: POST_RES.message,\n            type: POST_RES.type,\n            token: POST_RES.token,\n            sources: POST_RES.result\n        };\n        if (POST_RES.status == \"error\") {\n            throw new Error(\"Request Failed! Error: \" + POST_RES.message);\n        }\n        return result;\n    }\n}\nexports[\"default\"] = StreamLare; //# sourceMappingURL=streamlare.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy9zdHJlYW1sYXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxZQUFZQyxtQkFBT0EsQ0FBQyxpR0FBUztBQUNuQyxNQUFNQyxvQkFBb0JULGdCQUFnQlEsbUJBQU9BLENBQUMseUpBQTJCO0FBQzdFLE1BQU1FLG1CQUFtQkQsa0JBQWtCRSxPQUFPO0lBQzlDQyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsVUFBVSxHQUFHO1FBQ2xCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEVBQUU7UUFDakIsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJQyxPQUFPO1FBQ3hCLElBQUksQ0FBQ0MsVUFBVSxHQUFHO0lBQ3RCO0lBQ0EsTUFBTUMsUUFBUUMsUUFBUSxFQUFFQyxZQUFZLElBQUksQ0FBQ0gsVUFBVSxDQUFDSSxRQUFRLEVBQUUsRUFBRSxHQUFHQyxJQUFJLEVBQUU7UUFDckUsSUFBSUM7UUFDSixNQUFNQyxNQUFNLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQ1AsU0FBU1EsSUFBSTtRQUMvQyxNQUFNQyxJQUFJLENBQUMsR0FBR3ZCLFVBQVV3QixJQUFJLEVBQUVMLElBQUlNLElBQUk7UUFDdEMsTUFBTUMsYUFBYSxDQUFDUixLQUFLSyxFQUFFLDRCQUE0QkksSUFBSSxDQUFDLFVBQVMsTUFBTyxRQUFRVCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdGLFFBQVE7UUFDeEgsTUFBTVksVUFBVWQsU0FBU1EsSUFBSSxDQUFDTyxLQUFLLENBQUMsSUFBSSxDQUFDbkIsS0FBSyxDQUFDLENBQUMsRUFBRTtRQUNsRCxJQUFJa0IsV0FBV0UsV0FBVztZQUN0QixNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSxNQUFNQyxPQUFPLE1BQU0sSUFBSSxDQUFDWixNQUFNLENBQUNhLElBQUksQ0FBQyxJQUFJLENBQUN4QixJQUFJLEdBQUcseUJBQXlCO1lBQ3JFeUIsSUFBSU47UUFDUixHQUFHO1lBQ0NPLFNBQVM7Z0JBQ0wsY0FBY3BCO1lBQ2xCO1FBQ0o7UUFDQSxNQUFNcUIsV0FBV0osS0FBS1AsSUFBSTtRQUMxQixNQUFNWSxTQUFTO1lBQ1hGLFNBQVM7Z0JBQ0wsY0FBY3BCO1lBQ2xCO1lBQ0F1QixRQUFRRixTQUFTRSxNQUFNO1lBQ3ZCQyxTQUFTSCxTQUFTRyxPQUFPO1lBQ3pCQyxNQUFNSixTQUFTSSxJQUFJO1lBQ25CQyxPQUFPTCxTQUFTSyxLQUFLO1lBQ3JCakMsU0FBUzRCLFNBQVNDLE1BQU07UUFDNUI7UUFDQSxJQUFJRCxTQUFTRSxNQUFNLElBQUksU0FBUztZQUM1QixNQUFNLElBQUlQLE1BQU0sNEJBQTRCSyxTQUFTRyxPQUFPO1FBQ2hFO1FBQ0EsT0FBT0Y7SUFDWDtBQUNKO0FBQ0F2QyxrQkFBZSxHQUFHSyxZQUNsQixzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29uc3VtZXQrZXh0ZW5zaW9uc0AxLjUuNC9ub2RlX21vZHVsZXMvQGNvbnN1bWV0L2V4dGVuc2lvbnMvZGlzdC9leHRyYWN0b3JzL3N0cmVhbWxhcmUuanM/MDdhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNoZWVyaW9fMSA9IHJlcXVpcmUoXCJjaGVlcmlvXCIpO1xuY29uc3QgdmlkZW9fZXh0cmFjdG9yXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL21vZGVscy92aWRlby1leHRyYWN0b3JcIikpO1xuY2xhc3MgU3RyZWFtTGFyZSBleHRlbmRzIHZpZGVvX2V4dHJhY3Rvcl8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnNlcnZlck5hbWUgPSAnU3RyZWFtTGFyZSc7XG4gICAgICAgIHRoaXMuc291cmNlcyA9IFtdO1xuICAgICAgICB0aGlzLmhvc3QgPSAnaHR0cHM6Ly9zdHJlYW1sYXJlLmNvbSc7XG4gICAgICAgIHRoaXMucmVnZXggPSBuZXcgUmVnRXhwKCcvW3ZlXS8oW14/IyYvXSspJyk7XG4gICAgICAgIHRoaXMuVVNFUl9BR0VOVCA9ICdNb3ppbGxhLzUuMCAoWDExOyBMaW51eCB4ODZfNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMTEuMC4wLjAgU2FmYXJpLzUzNy4zNic7XG4gICAgfVxuICAgIGFzeW5jIGV4dHJhY3QodmlkZW9VcmwsIHVzZXJBZ2VudCA9IHRoaXMuVVNFUl9BR0VOVC50b1N0cmluZygpLCAuLi5hcmdzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jbGllbnQuZ2V0KHZpZGVvVXJsLmhyZWYpO1xuICAgICAgICBjb25zdCAkID0gKDAsIGNoZWVyaW9fMS5sb2FkKShyZXMuZGF0YSk7XG4gICAgICAgIGNvbnN0IENTUkZfVE9LRU4gPSAoX2EgPSAkKCdoZWFkID4gbWV0YTpudGgtY2hpbGQoMyknKS5hdHRyKCdjb250ZW50JykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b1N0cmluZygpO1xuICAgICAgICBjb25zdCB2aWRlb0lkID0gdmlkZW9VcmwuaHJlZi5tYXRjaCh0aGlzLnJlZ2V4KVsxXTtcbiAgICAgICAgaWYgKHZpZGVvSWQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZpZGVvIGlkIG5vdCBtYXRjaGVkIScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFBPU1QgPSBhd2FpdCB0aGlzLmNsaWVudC5wb3N0KHRoaXMuaG9zdCArICcvYXBpL3ZpZGVvL3N0cmVhbS9nZXQnLCB7XG4gICAgICAgICAgICBpZDogdmlkZW9JZCxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogdXNlckFnZW50LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IFBPU1RfUkVTID0gUE9TVC5kYXRhO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiB1c2VyQWdlbnQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdHVzOiBQT1NUX1JFUy5zdGF0dXMsXG4gICAgICAgICAgICBtZXNzYWdlOiBQT1NUX1JFUy5tZXNzYWdlLFxuICAgICAgICAgICAgdHlwZTogUE9TVF9SRVMudHlwZSxcbiAgICAgICAgICAgIHRva2VuOiBQT1NUX1JFUy50b2tlbixcbiAgICAgICAgICAgIHNvdXJjZXM6IFBPU1RfUkVTLnJlc3VsdCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFBPU1RfUkVTLnN0YXR1cyA9PSAnZXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVlc3QgRmFpbGVkISBFcnJvcjogJyArIFBPU1RfUkVTLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU3RyZWFtTGFyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmVhbWxhcmUuanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNoZWVyaW9fMSIsInJlcXVpcmUiLCJ2aWRlb19leHRyYWN0b3JfMSIsIlN0cmVhbUxhcmUiLCJkZWZhdWx0IiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJzZXJ2ZXJOYW1lIiwic291cmNlcyIsImhvc3QiLCJyZWdleCIsIlJlZ0V4cCIsIlVTRVJfQUdFTlQiLCJleHRyYWN0IiwidmlkZW9VcmwiLCJ1c2VyQWdlbnQiLCJ0b1N0cmluZyIsImFyZ3MiLCJfYSIsInJlcyIsImNsaWVudCIsImdldCIsImhyZWYiLCIkIiwibG9hZCIsImRhdGEiLCJDU1JGX1RPS0VOIiwiYXR0ciIsInZpZGVvSWQiLCJtYXRjaCIsInVuZGVmaW5lZCIsIkVycm9yIiwiUE9TVCIsInBvc3QiLCJpZCIsImhlYWRlcnMiLCJQT1NUX1JFUyIsInJlc3VsdCIsInN0YXR1cyIsIm1lc3NhZ2UiLCJ0eXBlIiwidG9rZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamlare.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamsb.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamsb.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nclass StreamSB extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"streamsb\";\n        this.sources = [];\n        this.host = \"https://streamsss.net/sources50\";\n        // TODO: update host2\n        this.host2 = \"https://watchsb.com/sources50\";\n        this.PAYLOAD = (hex)=>`566d337678566f743674494a7c7c${hex}7c7c346b6767586d6934774855537c7c73747265616d7362/6565417268755339773461447c7c346133383438333436313335376136323337373433383634376337633465366534393338373136643732373736343735373237613763376334363733353737303533366236333463353333363534366137633763373337343732363536313664373336327c7c6b586c3163614468645a47617c7c73747265616d7362`;\n        this.extract = async (videoUrl, isAlt = false)=>{\n            let headers = {\n                watchsb: \"sbstream\",\n                \"User-Agent\": utils_1.USER_AGENT,\n                Referer: videoUrl.href\n            };\n            let id = videoUrl.href.split(\"/e/\").pop();\n            if (id === null || id === void 0 ? void 0 : id.includes(\"html\")) id = id.split(\".html\")[0];\n            const bytes = new TextEncoder().encode(id);\n            const res = await this.client.get(`${isAlt ? this.host2 : this.host}/${this.PAYLOAD(Buffer.from(bytes).toString(\"hex\"))}`, {\n                headers\n            }).catch(()=>null);\n            if (!(res === null || res === void 0 ? void 0 : res.data.stream_data)) throw new Error(\"No source found. Try a different server.\");\n            headers = {\n                \"User-Agent\": utils_1.USER_AGENT,\n                Referer: videoUrl.href.split(\"e/\")[0]\n            };\n            const m3u8Urls = await this.client.get(res.data.stream_data.file, {\n                headers\n            });\n            const videoList = m3u8Urls.data.split(\"#EXT-X-STREAM-INF:\");\n            for (const video of videoList !== null && videoList !== void 0 ? videoList : []){\n                if (!video.includes(\"m3u8\")) continue;\n                const url = video.split(\"\\n\")[1];\n                const quality = video.split(\"RESOLUTION=\")[1].split(\",\")[0].split(\"x\")[1];\n                this.sources.push({\n                    url: url,\n                    quality: `${quality}p`,\n                    isM3U8: true\n                });\n            }\n            this.sources.push({\n                quality: \"auto\",\n                url: res.data.stream_data.file,\n                isM3U8: res.data.stream_data.file.includes(\".m3u8\")\n            });\n            return this.sources;\n        };\n        this.addSources = (source)=>{\n            this.sources.push({\n                url: source.file,\n                isM3U8: source.file.includes(\".m3u8\")\n            });\n        };\n    }\n}\nexports[\"default\"] = StreamSB; //# sourceMappingURL=streamsb.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamsb.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamtape.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamtape.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass StreamTape extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"StreamTape\";\n        this.sources = [];\n        this.extract = async (videoUrl)=>{\n            var _a;\n            try {\n                const { data } = await this.client.get(videoUrl.href).catch(()=>{\n                    throw new Error(\"Video not found\");\n                });\n                const $ = (0, cheerio_1.load)(data);\n                let [fh, sh] = (_a = $.html()) === null || _a === void 0 ? void 0 : _a.match(/robotlink'\\).innerHTML = (.*)'/)[1].split(\"+ ('\");\n                sh = sh.substring(3);\n                fh = fh.replace(/\\'/g, \"\");\n                const url = `https:${fh}${sh}`;\n                this.sources.push({\n                    url: url,\n                    isM3U8: url.includes(\".m3u8\")\n                });\n                return this.sources;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = StreamTape; //# sourceMappingURL=streamtape.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy9zdHJlYW10YXBlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFlBQVlDLG1CQUFPQSxDQUFDLGlHQUFTO0FBQ25DLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDLCtIQUFXO0FBQ3BDLE1BQU1FLG1CQUFtQkQsU0FBU0UsY0FBYztJQUM1Q0MsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLE9BQU8sR0FBRyxFQUFFO1FBQ2pCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLE9BQU9DO1lBQ2xCLElBQUlDO1lBQ0osSUFBSTtnQkFDQSxNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQ0osU0FBU0ssSUFBSSxFQUFFQyxLQUFLLENBQUM7b0JBQ3hELE1BQU0sSUFBSUMsTUFBTTtnQkFDcEI7Z0JBQ0EsTUFBTUMsSUFBSSxDQUFDLEdBQUdsQixVQUFVbUIsSUFBSSxFQUFFUDtnQkFDOUIsSUFBSSxDQUFDUSxJQUFJQyxHQUFHLEdBQUcsQ0FBQ1YsS0FBS08sRUFBRUksSUFBSSxFQUFDLE1BQU8sUUFBUVgsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHWSxLQUFLLENBQUMsaUNBQWlDLENBQUMsRUFBRSxDQUFDQyxLQUFLLENBQUM7Z0JBQ3hISCxLQUFLQSxHQUFHSSxTQUFTLENBQUM7Z0JBQ2xCTCxLQUFLQSxHQUFHTSxPQUFPLENBQUMsT0FBTztnQkFDdkIsTUFBTUMsTUFBTSxDQUFDLE1BQU0sRUFBRVAsR0FBRyxFQUFFQyxHQUFHLENBQUM7Z0JBQzlCLElBQUksQ0FBQ2IsT0FBTyxDQUFDb0IsSUFBSSxDQUFDO29CQUNkRCxLQUFLQTtvQkFDTEUsUUFBUUYsSUFBSUcsUUFBUSxDQUFDO2dCQUN6QjtnQkFDQSxPQUFPLElBQUksQ0FBQ3RCLE9BQU87WUFDdkIsRUFDQSxPQUFPdUIsS0FBSztnQkFDUixNQUFNLElBQUlkLE1BQU1jLElBQUlDLE9BQU87WUFDL0I7UUFDSjtJQUNKO0FBQ0o7QUFDQWxDLGtCQUFlLEdBQUdLLFlBQ2xCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3doYXRldmVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25zdW1ldCtleHRlbnNpb25zQDEuNS40L25vZGVfbW9kdWxlcy9AY29uc3VtZXQvZXh0ZW5zaW9ucy9kaXN0L2V4dHJhY3RvcnMvc3RyZWFtdGFwZS5qcz9jMDY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY2hlZXJpb18xID0gcmVxdWlyZShcImNoZWVyaW9cIik7XG5jb25zdCBtb2RlbHNfMSA9IHJlcXVpcmUoXCIuLi9tb2RlbHNcIik7XG5jbGFzcyBTdHJlYW1UYXBlIGV4dGVuZHMgbW9kZWxzXzEuVmlkZW9FeHRyYWN0b3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnNlcnZlck5hbWUgPSAnU3RyZWFtVGFwZSc7XG4gICAgICAgIHRoaXMuc291cmNlcyA9IFtdO1xuICAgICAgICB0aGlzLmV4dHJhY3QgPSBhc3luYyAodmlkZW9VcmwpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQodmlkZW9VcmwuaHJlZikuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZpZGVvIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0ICQgPSAoMCwgY2hlZXJpb18xLmxvYWQpKGRhdGEpO1xuICAgICAgICAgICAgICAgIGxldCBbZmgsIHNoXSA9IChfYSA9ICQuaHRtbCgpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWF0Y2goL3JvYm90bGluaydcXCkuaW5uZXJIVE1MID0gKC4qKScvKVsxXS5zcGxpdChcIisgKCdcIik7XG4gICAgICAgICAgICAgICAgc2ggPSBzaC5zdWJzdHJpbmcoMyk7XG4gICAgICAgICAgICAgICAgZmggPSBmaC5yZXBsYWNlKC9cXCcvZywgJycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGBodHRwczoke2ZofSR7c2h9YDtcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgICAgICBpc00zVTg6IHVybC5pbmNsdWRlcygnLm0zdTgnKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU3RyZWFtVGFwZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmVhbXRhcGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2hlZXJpb18xIiwicmVxdWlyZSIsIm1vZGVsc18xIiwiU3RyZWFtVGFwZSIsIlZpZGVvRXh0cmFjdG9yIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJzZXJ2ZXJOYW1lIiwic291cmNlcyIsImV4dHJhY3QiLCJ2aWRlb1VybCIsIl9hIiwiZGF0YSIsImNsaWVudCIsImdldCIsImhyZWYiLCJjYXRjaCIsIkVycm9yIiwiJCIsImxvYWQiLCJmaCIsInNoIiwiaHRtbCIsIm1hdGNoIiwic3BsaXQiLCJzdWJzdHJpbmciLCJyZXBsYWNlIiwidXJsIiwicHVzaCIsImlzTTNVOCIsImluY2x1ZGVzIiwiZXJyIiwibWVzc2FnZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamtape.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamwish.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamwish.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass StreamWish extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"streamwish\";\n        this.sources = [];\n        this.extract = async (videoUrl)=>{\n            try {\n                const { data } = await this.client.get(videoUrl.href);\n                const unPackagedData = eval(/(eval)(\\(f.*?)(\\n<\\/script>)/s.exec(data)[2]);\n                const links = unPackagedData.match(/file:\\s*\"([^\"]+)\"/);\n                this.sources.push({\n                    quality: \"auto\",\n                    url: links[1],\n                    isM3U8: links[1].includes(\".m3u8\")\n                });\n                const m3u8Content = await this.client.get(links[1], {\n                    headers: {\n                        Referer: videoUrl.href\n                    }\n                });\n                if (m3u8Content.data.includes(\"EXTM3U\")) {\n                    const videoList = m3u8Content.data.split(\"#EXT-X-STREAM-INF:\");\n                    for (const video of videoList !== null && videoList !== void 0 ? videoList : []){\n                        if (!video.includes(\"m3u8\")) continue;\n                        const url = links[1].split(\"master.m3u8\")[0] + video.split(\"\\n\")[1];\n                        const quality = video.split(\"RESOLUTION=\")[1].split(\",\")[0].split(\"x\")[1];\n                        this.sources.push({\n                            url: url,\n                            quality: `${quality}`,\n                            isM3U8: url.includes(\".m3u8\")\n                        });\n                    }\n                }\n                return this.sources;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = StreamWish; //# sourceMappingURL=streamwish.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy9zdHJlYW13aXNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFdBQVdDLG1CQUFPQSxDQUFDLCtIQUFXO0FBQ3BDLE1BQU1DLG1CQUFtQkYsU0FBU0csY0FBYztJQUM1Q0MsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLE9BQU8sR0FBRyxFQUFFO1FBQ2pCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLE9BQU9DO1lBQ2xCLElBQUk7Z0JBQ0EsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUNILFNBQVNJLElBQUk7Z0JBQ3BELE1BQU1DLGlCQUFpQkMsS0FBSyxnQ0FBZ0NDLElBQUksQ0FBQ04sS0FBSyxDQUFDLEVBQUU7Z0JBQ3pFLE1BQU1PLFFBQVFILGVBQWVJLEtBQUssQ0FBQztnQkFDbkMsSUFBSSxDQUFDWCxPQUFPLENBQUNZLElBQUksQ0FBQztvQkFDZEMsU0FBUztvQkFDVEMsS0FBS0osS0FBSyxDQUFDLEVBQUU7b0JBQ2JLLFFBQVFMLEtBQUssQ0FBQyxFQUFFLENBQUNNLFFBQVEsQ0FBQztnQkFDOUI7Z0JBQ0EsTUFBTUMsY0FBYyxNQUFNLElBQUksQ0FBQ2IsTUFBTSxDQUFDQyxHQUFHLENBQUNLLEtBQUssQ0FBQyxFQUFFLEVBQUU7b0JBQ2hEUSxTQUFTO3dCQUNMQyxTQUFTakIsU0FBU0ksSUFBSTtvQkFDMUI7Z0JBQ0o7Z0JBQ0EsSUFBSVcsWUFBWWQsSUFBSSxDQUFDYSxRQUFRLENBQUMsV0FBVztvQkFDckMsTUFBTUksWUFBWUgsWUFBWWQsSUFBSSxDQUFDa0IsS0FBSyxDQUFDO29CQUN6QyxLQUFLLE1BQU1DLFNBQVNGLGNBQWMsUUFBUUEsY0FBYyxLQUFLLElBQUlBLFlBQVksRUFBRSxDQUFFO3dCQUM3RSxJQUFJLENBQUNFLE1BQU1OLFFBQVEsQ0FBQyxTQUNoQjt3QkFDSixNQUFNRixNQUFNSixLQUFLLENBQUMsRUFBRSxDQUFDVyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsR0FBR0MsTUFBTUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO3dCQUNuRSxNQUFNUixVQUFVUyxNQUFNRCxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQ0EsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUNBLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTt3QkFDekUsSUFBSSxDQUFDckIsT0FBTyxDQUFDWSxJQUFJLENBQUM7NEJBQ2RFLEtBQUtBOzRCQUNMRCxTQUFTLENBQUMsRUFBRUEsUUFBUSxDQUFDOzRCQUNyQkUsUUFBUUQsSUFBSUUsUUFBUSxDQUFDO3dCQUN6QjtvQkFDSjtnQkFDSjtnQkFDQSxPQUFPLElBQUksQ0FBQ2hCLE9BQU87WUFDdkIsRUFDQSxPQUFPdUIsS0FBSztnQkFDUixNQUFNLElBQUlDLE1BQU1ELElBQUlFLE9BQU87WUFDL0I7UUFDSjtJQUNKO0FBQ0o7QUFDQWxDLGtCQUFlLEdBQUdJLFlBQ2xCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3doYXRldmVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25zdW1ldCtleHRlbnNpb25zQDEuNS40L25vZGVfbW9kdWxlcy9AY29uc3VtZXQvZXh0ZW5zaW9ucy9kaXN0L2V4dHJhY3RvcnMvc3RyZWFtd2lzaC5qcz8yMTk2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbW9kZWxzXzEgPSByZXF1aXJlKFwiLi4vbW9kZWxzXCIpO1xuY2xhc3MgU3RyZWFtV2lzaCBleHRlbmRzIG1vZGVsc18xLlZpZGVvRXh0cmFjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5zZXJ2ZXJOYW1lID0gJ3N0cmVhbXdpc2gnO1xuICAgICAgICB0aGlzLnNvdXJjZXMgPSBbXTtcbiAgICAgICAgdGhpcy5leHRyYWN0ID0gYXN5bmMgKHZpZGVvVXJsKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5jbGllbnQuZ2V0KHZpZGVvVXJsLmhyZWYpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVuUGFja2FnZWREYXRhID0gZXZhbCgvKGV2YWwpKFxcKGYuKj8pKFxcbjxcXC9zY3JpcHQ+KS9zLmV4ZWMoZGF0YSlbMl0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gdW5QYWNrYWdlZERhdGEubWF0Y2goL2ZpbGU6XFxzKlwiKFteXCJdKylcIi8pO1xuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcXVhbGl0eTogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IGxpbmtzWzFdLFxuICAgICAgICAgICAgICAgICAgICBpc00zVTg6IGxpbmtzWzFdLmluY2x1ZGVzKCcubTN1OCcpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IG0zdThDb250ZW50ID0gYXdhaXQgdGhpcy5jbGllbnQuZ2V0KGxpbmtzWzFdLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlZmVyZXI6IHZpZGVvVXJsLmhyZWYsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKG0zdThDb250ZW50LmRhdGEuaW5jbHVkZXMoJ0VYVE0zVScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZpZGVvTGlzdCA9IG0zdThDb250ZW50LmRhdGEuc3BsaXQoJyNFWFQtWC1TVFJFQU0tSU5GOicpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHZpZGVvIG9mIHZpZGVvTGlzdCAhPT0gbnVsbCAmJiB2aWRlb0xpc3QgIT09IHZvaWQgMCA/IHZpZGVvTGlzdCA6IFtdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZpZGVvLmluY2x1ZGVzKCdtM3U4JykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBsaW5rc1sxXS5zcGxpdCgnbWFzdGVyLm0zdTgnKVswXSArIHZpZGVvLnNwbGl0KCdcXG4nKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHF1YWxpdHkgPSB2aWRlby5zcGxpdCgnUkVTT0xVVElPTj0nKVsxXS5zcGxpdCgnLCcpWzBdLnNwbGl0KCd4JylbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhbGl0eTogYCR7cXVhbGl0eX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTTNVODogdXJsLmluY2x1ZGVzKCcubTN1OCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFN0cmVhbVdpc2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW13aXNoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZGVsc18xIiwicmVxdWlyZSIsIlN0cmVhbVdpc2giLCJWaWRlb0V4dHJhY3RvciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwic2VydmVyTmFtZSIsInNvdXJjZXMiLCJleHRyYWN0IiwidmlkZW9VcmwiLCJkYXRhIiwiY2xpZW50IiwiZ2V0IiwiaHJlZiIsInVuUGFja2FnZWREYXRhIiwiZXZhbCIsImV4ZWMiLCJsaW5rcyIsIm1hdGNoIiwicHVzaCIsInF1YWxpdHkiLCJ1cmwiLCJpc00zVTgiLCJpbmNsdWRlcyIsIm0zdThDb250ZW50IiwiaGVhZGVycyIsIlJlZmVyZXIiLCJ2aWRlb0xpc3QiLCJzcGxpdCIsInZpZGVvIiwiZXJyIiwiRXJyb3IiLCJtZXNzYWdlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/streamwish.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/vidcloud.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/vidcloud.js ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst crypto_js_1 = __importDefault(__webpack_require__(/*! crypto-js */ \"(rsc)/./node_modules/.pnpm/crypto-js@4.2.0/node_modules/crypto-js/index.js\"));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nclass VidCloud extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"VidCloud\";\n        this.sources = [];\n        this.host = \"https://dokicloud.one\";\n        this.host2 = \"https://rabbitstream.net\";\n        this.extract = async (videoUrl, isAlternative = false)=>{\n            var _a;\n            const result = {\n                sources: [],\n                subtitles: []\n            };\n            try {\n                const id = (_a = videoUrl.href.split(\"/\").pop()) === null || _a === void 0 ? void 0 : _a.split(\"?\")[0];\n                const options = {\n                    headers: {\n                        \"X-Requested-With\": \"XMLHttpRequest\",\n                        Referer: videoUrl.href,\n                        \"User-Agent\": utils_1.USER_AGENT\n                    }\n                };\n                let res = undefined;\n                let sources = undefined;\n                res = await this.client.get(`${isAlternative ? this.host2 : this.host}/ajax/embed-4/getSources?id=${id}`, options);\n                if (!(0, utils_1.isJson)(res.data.sources)) {\n                    let { data: key } = await this.client.get(\"https://raw.githubusercontent.com/theonlymo/keys/e4/key\");\n                    key = (0, utils_1.substringBefore)((0, utils_1.substringAfter)(key, '\"blob-code blob-code-inner js-file-line\">'), \"</td>\");\n                    if (!key) {\n                        key = await (await this.client.get(\"https://raw.githubusercontent.com/theonlymo/keys/e4/key\")).data;\n                    }\n                    const sourcesArray = res.data.sources.split(\"\");\n                    let extractedKey = \"\";\n                    let currentIndex = 0;\n                    for (const index of key){\n                        const start = index[0] + currentIndex;\n                        const end = start + index[1];\n                        for(let i = start; i < end; i++){\n                            extractedKey += res.data.sources[i];\n                            sourcesArray[i] = \"\";\n                        }\n                        currentIndex += index[1];\n                    }\n                    key = extractedKey;\n                    res.data.sources = sourcesArray.join(\"\");\n                    const decryptedVal = crypto_js_1.default.AES.decrypt(res.data.sources, key).toString(crypto_js_1.default.enc.Utf8);\n                    sources = (0, utils_1.isJson)(decryptedVal) ? JSON.parse(decryptedVal) : res.data.sources;\n                }\n                this.sources = sources.map((s)=>({\n                        url: s.file,\n                        isM3U8: s.file.includes(\".m3u8\")\n                    }));\n                result.sources.push(...this.sources);\n                result.sources = [];\n                this.sources = [];\n                for (const source of sources){\n                    const { data } = await this.client.get(source.file, options);\n                    const urls = data.split(\"\\n\").filter((line)=>line.includes(\".m3u8\"));\n                    const qualities = data.split(\"\\n\").filter((line)=>line.includes(\"RESOLUTION=\"));\n                    const TdArray = qualities.map((s, i)=>{\n                        const f1 = s.split(\"x\")[1];\n                        const f2 = urls[i];\n                        return [\n                            f1,\n                            f2\n                        ];\n                    });\n                    for (const [f1, f2] of TdArray){\n                        this.sources.push({\n                            url: f2,\n                            quality: f1,\n                            isM3U8: f2.includes(\".m3u8\")\n                        });\n                    }\n                    result.sources.push(...this.sources);\n                }\n                result.sources.push({\n                    url: sources[0].file,\n                    isM3U8: sources[0].file.includes(\".m3u8\"),\n                    quality: \"auto\"\n                });\n                result.subtitles = res.data.tracks.map((s)=>({\n                        url: s.file,\n                        lang: s.label ? s.label : \"Default (maybe)\"\n                    }));\n                return result;\n            } catch (err) {\n                throw err;\n            }\n        };\n    }\n}\nexports[\"default\"] = VidCloud; //# sourceMappingURL=vidcloud.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/vidcloud.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/vidmoly.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/vidmoly.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass VidMoly extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"vidmoly\";\n        this.sources = [];\n        this.extract = async (videoUrl)=>{\n            try {\n                const { data } = await this.client.get(videoUrl.href);\n                const links = data.match(/file:\\s*\"([^\"]+)\"/);\n                const m3u8Content = await this.client.get(links[1], {\n                    headers: {\n                        Referer: videoUrl.href\n                    }\n                });\n                this.sources.push({\n                    quality: \"auto\",\n                    url: links[1],\n                    isM3U8: links[1].includes(\".m3u8\")\n                });\n                if (m3u8Content.data.includes(\"EXTM3U\")) {\n                    const videoList = m3u8Content.data.split(\"#EXT-X-STREAM-INF:\");\n                    for (const video of videoList !== null && videoList !== void 0 ? videoList : []){\n                        if (!video.includes(\"m3u8\")) continue;\n                        const url = video.split(\"\\n\")[1];\n                        const quality = video.split(\"RESOLUTION=\")[1].split(\",\")[0].split(\"x\")[1];\n                        this.sources.push({\n                            url: url,\n                            quality: `${quality}`,\n                            isM3U8: url.includes(\".m3u8\")\n                        });\n                    }\n                }\n                return this.sources;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = VidMoly; //# sourceMappingURL=vidmoly.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy92aWRtb2x5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFdBQVdDLG1CQUFPQSxDQUFDLCtIQUFXO0FBQ3BDLE1BQU1DLGdCQUFnQkYsU0FBU0csY0FBYztJQUN6Q0MsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLE9BQU8sR0FBRyxFQUFFO1FBQ2pCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLE9BQU9DO1lBQ2xCLElBQUk7Z0JBQ0EsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUNILFNBQVNJLElBQUk7Z0JBQ3BELE1BQU1DLFFBQVFKLEtBQUtLLEtBQUssQ0FBQztnQkFDekIsTUFBTUMsY0FBYyxNQUFNLElBQUksQ0FBQ0wsTUFBTSxDQUFDQyxHQUFHLENBQUNFLEtBQUssQ0FBQyxFQUFFLEVBQUU7b0JBQ2hERyxTQUFTO3dCQUNMQyxTQUFTVCxTQUFTSSxJQUFJO29CQUMxQjtnQkFDSjtnQkFDQSxJQUFJLENBQUNOLE9BQU8sQ0FBQ1ksSUFBSSxDQUFDO29CQUNkQyxTQUFTO29CQUNUQyxLQUFLUCxLQUFLLENBQUMsRUFBRTtvQkFDYlEsUUFBUVIsS0FBSyxDQUFDLEVBQUUsQ0FBQ1MsUUFBUSxDQUFDO2dCQUM5QjtnQkFDQSxJQUFJUCxZQUFZTixJQUFJLENBQUNhLFFBQVEsQ0FBQyxXQUFXO29CQUNyQyxNQUFNQyxZQUFZUixZQUFZTixJQUFJLENBQUNlLEtBQUssQ0FBQztvQkFDekMsS0FBSyxNQUFNQyxTQUFTRixjQUFjLFFBQVFBLGNBQWMsS0FBSyxJQUFJQSxZQUFZLEVBQUUsQ0FBRTt3QkFDN0UsSUFBSSxDQUFDRSxNQUFNSCxRQUFRLENBQUMsU0FDaEI7d0JBQ0osTUFBTUYsTUFBTUssTUFBTUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO3dCQUNoQyxNQUFNTCxVQUFVTSxNQUFNRCxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQ0EsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUNBLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTt3QkFDekUsSUFBSSxDQUFDbEIsT0FBTyxDQUFDWSxJQUFJLENBQUM7NEJBQ2RFLEtBQUtBOzRCQUNMRCxTQUFTLENBQUMsRUFBRUEsUUFBUSxDQUFDOzRCQUNyQkUsUUFBUUQsSUFBSUUsUUFBUSxDQUFDO3dCQUN6QjtvQkFDSjtnQkFDSjtnQkFDQSxPQUFPLElBQUksQ0FBQ2hCLE9BQU87WUFDdkIsRUFDQSxPQUFPb0IsS0FBSztnQkFDUixNQUFNLElBQUlDLE1BQU1ELElBQUlFLE9BQU87WUFDL0I7UUFDSjtJQUNKO0FBQ0o7QUFDQS9CLGtCQUFlLEdBQUdJLFNBQ2xCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3doYXRldmVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25zdW1ldCtleHRlbnNpb25zQDEuNS40L25vZGVfbW9kdWxlcy9AY29uc3VtZXQvZXh0ZW5zaW9ucy9kaXN0L2V4dHJhY3RvcnMvdmlkbW9seS5qcz8zNTNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbW9kZWxzXzEgPSByZXF1aXJlKFwiLi4vbW9kZWxzXCIpO1xuY2xhc3MgVmlkTW9seSBleHRlbmRzIG1vZGVsc18xLlZpZGVvRXh0cmFjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5zZXJ2ZXJOYW1lID0gJ3ZpZG1vbHknO1xuICAgICAgICB0aGlzLnNvdXJjZXMgPSBbXTtcbiAgICAgICAgdGhpcy5leHRyYWN0ID0gYXN5bmMgKHZpZGVvVXJsKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5jbGllbnQuZ2V0KHZpZGVvVXJsLmhyZWYpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gZGF0YS5tYXRjaCgvZmlsZTpcXHMqXCIoW15cIl0rKVwiLyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbTN1OENvbnRlbnQgPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQobGlua3NbMV0sIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgUmVmZXJlcjogdmlkZW9VcmwuaHJlZixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHF1YWxpdHk6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBsaW5rc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgaXNNM1U4OiBsaW5rc1sxXS5pbmNsdWRlcygnLm0zdTgnKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAobTN1OENvbnRlbnQuZGF0YS5pbmNsdWRlcygnRVhUTTNVJykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlkZW9MaXN0ID0gbTN1OENvbnRlbnQuZGF0YS5zcGxpdCgnI0VYVC1YLVNUUkVBTS1JTkY6Jyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdmlkZW8gb2YgdmlkZW9MaXN0ICE9PSBudWxsICYmIHZpZGVvTGlzdCAhPT0gdm9pZCAwID8gdmlkZW9MaXN0IDogW10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmlkZW8uaW5jbHVkZXMoJ20zdTgnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IHZpZGVvLnNwbGl0KCdcXG4nKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHF1YWxpdHkgPSB2aWRlby5zcGxpdCgnUkVTT0xVVElPTj0nKVsxXS5zcGxpdCgnLCcpWzBdLnNwbGl0KCd4JylbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhbGl0eTogYCR7cXVhbGl0eX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTTNVODogdXJsLmluY2x1ZGVzKCcubTN1OCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFZpZE1vbHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWRtb2x5LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZGVsc18xIiwicmVxdWlyZSIsIlZpZE1vbHkiLCJWaWRlb0V4dHJhY3RvciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwic2VydmVyTmFtZSIsInNvdXJjZXMiLCJleHRyYWN0IiwidmlkZW9VcmwiLCJkYXRhIiwiY2xpZW50IiwiZ2V0IiwiaHJlZiIsImxpbmtzIiwibWF0Y2giLCJtM3U4Q29udGVudCIsImhlYWRlcnMiLCJSZWZlcmVyIiwicHVzaCIsInF1YWxpdHkiLCJ1cmwiLCJpc00zVTgiLCJpbmNsdWRlcyIsInZpZGVvTGlzdCIsInNwbGl0IiwidmlkZW8iLCJlcnIiLCJFcnJvciIsIm1lc3NhZ2UiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/vidmoly.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/vizcloud.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/vizcloud.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass VizCloud extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"VizCloud\";\n        this.sources = [];\n        this.host = \"https://vidstream.pro\";\n        this.keys = {\n            cipher: \"\",\n            encrypt: \"\",\n            main: \"\",\n            operations: new Map(),\n            pre: [],\n            post: []\n        };\n        this.extract = async (videoUrl, vizCloudHelper, apiKey)=>{\n            var _a, _b;\n            const vizID = videoUrl.href.split(\"/\");\n            let url;\n            if (!vizID.length) {\n                throw new Error(\"Video not found\");\n            } else {\n                url = `${vizCloudHelper}/vizcloud?query=${encodeURIComponent((_a = vizID.pop()) !== null && _a !== void 0 ? _a : \"\")}&apikey=${apiKey}`;\n            }\n            const { data } = await this.client.get(url);\n            if (!((_b = data.data) === null || _b === void 0 ? void 0 : _b.media)) throw new Error(\"Video not found\");\n            this.sources = [\n                ...this.sources,\n                ...data.data.media.sources.map((source)=>{\n                    var _a;\n                    return {\n                        url: source.file,\n                        quality: \"auto\",\n                        isM3U8: (_a = source.file) === null || _a === void 0 ? void 0 : _a.includes(\".m3u8\")\n                    };\n                })\n            ];\n            const main = this.sources[this.sources.length - 1].url;\n            const req = await this.client({\n                method: \"get\",\n                url: main,\n                headers: {\n                    referer: \"https://9anime.to\"\n                }\n            });\n            const resolutions = req.data.match(/(RESOLUTION=)(.*)(\\s*?)(\\s*.*)/g);\n            resolutions === null || resolutions === void 0 ? void 0 : resolutions.forEach((res)=>{\n                const index = main.lastIndexOf(\"/\");\n                const quality = res.split(\"\\n\")[0].split(\"x\")[1].split(\",\")[0];\n                const url = main.slice(0, index);\n                this.sources.push({\n                    url: url + \"/\" + res.split(\"\\n\")[1],\n                    isM3U8: (url + res.split(\"\\n\")[1]).includes(\".m3u8\"),\n                    quality: quality + \"p\"\n                });\n            });\n            return this.sources;\n        };\n    }\n}\nexports[\"default\"] = VizCloud; //# sourceMappingURL=vizcloud.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy92aXpjbG91ZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxXQUFXQyxtQkFBT0EsQ0FBQywrSEFBVztBQUNwQyxNQUFNQyxpQkFBaUJGLFNBQVNHLGNBQWM7SUFDMUNDLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxVQUFVLEdBQUc7UUFDbEIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsRUFBRTtRQUNqQixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1lBQ1JDLFFBQVE7WUFDUkMsU0FBUztZQUNUQyxNQUFNO1lBQ05DLFlBQVksSUFBSUM7WUFDaEJDLEtBQUssRUFBRTtZQUNQQyxNQUFNLEVBQUU7UUFDWjtRQUNBLElBQUksQ0FBQ0MsT0FBTyxHQUFHLE9BQU9DLFVBQVVDLGdCQUFnQkM7WUFDNUMsSUFBSUMsSUFBSUM7WUFDUixNQUFNQyxRQUFRTCxTQUFTTSxJQUFJLENBQUNDLEtBQUssQ0FBQztZQUNsQyxJQUFJQztZQUNKLElBQUksQ0FBQ0gsTUFBTUksTUFBTSxFQUFFO2dCQUNmLE1BQU0sSUFBSUMsTUFBTTtZQUNwQixPQUNLO2dCQUNERixNQUFNLENBQUMsRUFBRVAsZUFBZSxnQkFBZ0IsRUFBRVUsbUJBQW1CLENBQUNSLEtBQUtFLE1BQU1PLEdBQUcsRUFBQyxNQUFPLFFBQVFULE9BQU8sS0FBSyxJQUFJQSxLQUFLLElBQUksUUFBUSxFQUFFRCxPQUFPLENBQUM7WUFDM0k7WUFDQSxNQUFNLEVBQUVXLElBQUksRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQ1A7WUFDdkMsSUFBSSxDQUFFLEVBQUNKLEtBQUtTLEtBQUtBLElBQUksTUFBTSxRQUFRVCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdZLEtBQUssR0FDaEUsTUFBTSxJQUFJTixNQUFNO1lBQ3BCLElBQUksQ0FBQ3JCLE9BQU8sR0FBRzttQkFDUixJQUFJLENBQUNBLE9BQU87bUJBQ1p3QixLQUFLQSxJQUFJLENBQUNHLEtBQUssQ0FBQzNCLE9BQU8sQ0FBQzRCLEdBQUcsQ0FBQyxDQUFDQztvQkFDNUIsSUFBSWY7b0JBQ0osT0FBUTt3QkFDSkssS0FBS1UsT0FBT0MsSUFBSTt3QkFDaEJDLFNBQVM7d0JBQ1RDLFFBQVEsQ0FBQ2xCLEtBQUtlLE9BQU9DLElBQUksTUFBTSxRQUFRaEIsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHbUIsUUFBUSxDQUFDO29CQUNoRjtnQkFDSjthQUNIO1lBQ0QsTUFBTTVCLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUMsSUFBSSxDQUFDQSxPQUFPLENBQUNvQixNQUFNLEdBQUcsRUFBRSxDQUFDRCxHQUFHO1lBQ3RELE1BQU1lLE1BQU0sTUFBTSxJQUFJLENBQUNULE1BQU0sQ0FBQztnQkFDMUJVLFFBQVE7Z0JBQ1JoQixLQUFLZDtnQkFDTCtCLFNBQVM7b0JBQUVDLFNBQVM7Z0JBQW9CO1lBQzVDO1lBQ0EsTUFBTUMsY0FBY0osSUFBSVYsSUFBSSxDQUFDZSxLQUFLLENBQUM7WUFDbkNELGdCQUFnQixRQUFRQSxnQkFBZ0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsWUFBWUUsT0FBTyxDQUFDLENBQUNDO2dCQUMzRSxNQUFNQyxRQUFRckMsS0FBS3NDLFdBQVcsQ0FBQztnQkFDL0IsTUFBTVosVUFBVVUsSUFBSXZCLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDQSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQ0EsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM5RCxNQUFNQyxNQUFNZCxLQUFLdUMsS0FBSyxDQUFDLEdBQUdGO2dCQUMxQixJQUFJLENBQUMxQyxPQUFPLENBQUM2QyxJQUFJLENBQUM7b0JBQ2QxQixLQUFLQSxNQUFNLE1BQU1zQixJQUFJdkIsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUNuQ2MsUUFBUSxDQUFDYixNQUFNc0IsSUFBSXZCLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFZSxRQUFRLENBQUM7b0JBQzVDRixTQUFTQSxVQUFVO2dCQUN2QjtZQUNKO1lBQ0EsT0FBTyxJQUFJLENBQUMvQixPQUFPO1FBQ3ZCO0lBQ0o7QUFDSjtBQUNBVCxrQkFBZSxHQUFHSSxVQUNsQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29uc3VtZXQrZXh0ZW5zaW9uc0AxLjUuNC9ub2RlX21vZHVsZXMvQGNvbnN1bWV0L2V4dGVuc2lvbnMvZGlzdC9leHRyYWN0b3JzL3ZpemNsb3VkLmpzPzNiNGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBtb2RlbHNfMSA9IHJlcXVpcmUoXCIuLi9tb2RlbHNcIik7XG5jbGFzcyBWaXpDbG91ZCBleHRlbmRzIG1vZGVsc18xLlZpZGVvRXh0cmFjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5zZXJ2ZXJOYW1lID0gJ1ZpekNsb3VkJztcbiAgICAgICAgdGhpcy5zb3VyY2VzID0gW107XG4gICAgICAgIHRoaXMuaG9zdCA9ICdodHRwczovL3ZpZHN0cmVhbS5wcm8nO1xuICAgICAgICB0aGlzLmtleXMgPSB7XG4gICAgICAgICAgICBjaXBoZXI6ICcnLFxuICAgICAgICAgICAgZW5jcnlwdDogJycsXG4gICAgICAgICAgICBtYWluOiAnJyxcbiAgICAgICAgICAgIG9wZXJhdGlvbnM6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgIHByZTogW10sXG4gICAgICAgICAgICBwb3N0OiBbXSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5leHRyYWN0ID0gYXN5bmMgKHZpZGVvVXJsLCB2aXpDbG91ZEhlbHBlciwgYXBpS2V5KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgY29uc3Qgdml6SUQgPSB2aWRlb1VybC5ocmVmLnNwbGl0KCcvJyk7XG4gICAgICAgICAgICBsZXQgdXJsO1xuICAgICAgICAgICAgaWYgKCF2aXpJRC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZpZGVvIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXJsID0gYCR7dml6Q2xvdWRIZWxwZXJ9L3ZpemNsb3VkP3F1ZXJ5PSR7ZW5jb2RlVVJJQ29tcG9uZW50KChfYSA9IHZpeklELnBvcCgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJyl9JmFwaWtleT0ke2FwaUtleX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQodXJsKTtcbiAgICAgICAgICAgIGlmICghKChfYiA9IGRhdGEuZGF0YSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm1lZGlhKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZpZGVvIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2VzID0gW1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuc291cmNlcyxcbiAgICAgICAgICAgICAgICAuLi5kYXRhLmRhdGEubWVkaWEuc291cmNlcy5tYXAoKHNvdXJjZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBzb3VyY2UuZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1YWxpdHk6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTTNVODogKF9hID0gc291cmNlLmZpbGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbmNsdWRlcygnLm0zdTgnKSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgY29uc3QgbWFpbiA9IHRoaXMuc291cmNlc1t0aGlzLnNvdXJjZXMubGVuZ3RoIC0gMV0udXJsO1xuICAgICAgICAgICAgY29uc3QgcmVxID0gYXdhaXQgdGhpcy5jbGllbnQoe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgICAgICAgICAgdXJsOiBtYWluLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgcmVmZXJlcjogJ2h0dHBzOi8vOWFuaW1lLnRvJyB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCByZXNvbHV0aW9ucyA9IHJlcS5kYXRhLm1hdGNoKC8oUkVTT0xVVElPTj0pKC4qKShcXHMqPykoXFxzKi4qKS9nKTtcbiAgICAgICAgICAgIHJlc29sdXRpb25zID09PSBudWxsIHx8IHJlc29sdXRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNvbHV0aW9ucy5mb3JFYWNoKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IG1haW4ubGFzdEluZGV4T2YoJy8nKTtcbiAgICAgICAgICAgICAgICBjb25zdCBxdWFsaXR5ID0gcmVzLnNwbGl0KCdcXG4nKVswXS5zcGxpdCgneCcpWzFdLnNwbGl0KCcsJylbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gbWFpbi5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCArICcvJyArIHJlcy5zcGxpdCgnXFxuJylbMV0sXG4gICAgICAgICAgICAgICAgICAgIGlzTTNVODogKHVybCArIHJlcy5zcGxpdCgnXFxuJylbMV0pLmluY2x1ZGVzKCcubTN1OCcpLFxuICAgICAgICAgICAgICAgICAgICBxdWFsaXR5OiBxdWFsaXR5ICsgJ3AnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzO1xuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFZpekNsb3VkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dml6Y2xvdWQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kZWxzXzEiLCJyZXF1aXJlIiwiVml6Q2xvdWQiLCJWaWRlb0V4dHJhY3RvciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwic2VydmVyTmFtZSIsInNvdXJjZXMiLCJob3N0Iiwia2V5cyIsImNpcGhlciIsImVuY3J5cHQiLCJtYWluIiwib3BlcmF0aW9ucyIsIk1hcCIsInByZSIsInBvc3QiLCJleHRyYWN0IiwidmlkZW9VcmwiLCJ2aXpDbG91ZEhlbHBlciIsImFwaUtleSIsIl9hIiwiX2IiLCJ2aXpJRCIsImhyZWYiLCJzcGxpdCIsInVybCIsImxlbmd0aCIsIkVycm9yIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicG9wIiwiZGF0YSIsImNsaWVudCIsImdldCIsIm1lZGlhIiwibWFwIiwic291cmNlIiwiZmlsZSIsInF1YWxpdHkiLCJpc00zVTgiLCJpbmNsdWRlcyIsInJlcSIsIm1ldGhvZCIsImhlYWRlcnMiLCJyZWZlcmVyIiwicmVzb2x1dGlvbnMiLCJtYXRjaCIsImZvckVhY2giLCJyZXMiLCJpbmRleCIsImxhc3RJbmRleE9mIiwic2xpY2UiLCJwdXNoIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/vizcloud.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/voe.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/voe.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass Voe extends models_1.VideoExtractor {\n    constructor(){\n        super(...arguments);\n        this.serverName = \"voe\";\n        this.sources = [];\n        this.domains = [\n            \"voe.sx\"\n        ];\n        this.extract = async (videoUrl)=>{\n            try {\n                const { data } = await this.client.get(videoUrl.href);\n                const links = data.match(/'hls': ?'(http.*?)',/);\n                const quality = data.match(/'video_height': ?([0-9]+),/)[1];\n                this.sources.push({\n                    quality: quality,\n                    url: links[1],\n                    isM3U8: links[1].includes(\".m3u8\")\n                });\n                return this.sources;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = Voe; //# sourceMappingURL=voe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy92b2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsV0FBV0MsbUJBQU9BLENBQUMsK0hBQVc7QUFDcEMsTUFBTUMsWUFBWUYsU0FBU0csY0FBYztJQUNyQ0MsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLE9BQU8sR0FBRyxFQUFFO1FBQ2pCLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1lBQUM7U0FBUztRQUN6QixJQUFJLENBQUNDLE9BQU8sR0FBRyxPQUFPQztZQUNsQixJQUFJO2dCQUNBLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDSCxTQUFTSSxJQUFJO2dCQUNwRCxNQUFNQyxRQUFRSixLQUFLSyxLQUFLLENBQUM7Z0JBQ3pCLE1BQU1DLFVBQVVOLEtBQUtLLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFO2dCQUMzRCxJQUFJLENBQUNULE9BQU8sQ0FBQ1csSUFBSSxDQUFDO29CQUNkRCxTQUFTQTtvQkFDVEUsS0FBS0osS0FBSyxDQUFDLEVBQUU7b0JBQ2JLLFFBQVFMLEtBQUssQ0FBQyxFQUFFLENBQUNNLFFBQVEsQ0FBQztnQkFDOUI7Z0JBQ0EsT0FBTyxJQUFJLENBQUNkLE9BQU87WUFDdkIsRUFDQSxPQUFPZSxLQUFLO2dCQUNSLE1BQU0sSUFBSUMsTUFBTUQsSUFBSUUsT0FBTztZQUMvQjtRQUNKO0lBQ0o7QUFDSjtBQUNBMUIsa0JBQWUsR0FBR0ksS0FDbEIsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvZXh0cmFjdG9ycy92b2UuanM/NjI1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG1vZGVsc18xID0gcmVxdWlyZShcIi4uL21vZGVsc1wiKTtcbmNsYXNzIFZvZSBleHRlbmRzIG1vZGVsc18xLlZpZGVvRXh0cmFjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5zZXJ2ZXJOYW1lID0gJ3ZvZSc7XG4gICAgICAgIHRoaXMuc291cmNlcyA9IFtdO1xuICAgICAgICB0aGlzLmRvbWFpbnMgPSBbJ3ZvZS5zeCddO1xuICAgICAgICB0aGlzLmV4dHJhY3QgPSBhc3luYyAodmlkZW9VcmwpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQodmlkZW9VcmwuaHJlZik7XG4gICAgICAgICAgICAgICAgY29uc3QgbGlua3MgPSBkYXRhLm1hdGNoKC8naGxzJzogPycoaHR0cC4qPyknLC8pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHF1YWxpdHkgPSBkYXRhLm1hdGNoKC8ndmlkZW9faGVpZ2h0JzogPyhbMC05XSspLC8pWzFdO1xuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcXVhbGl0eTogcXVhbGl0eSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBsaW5rc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgaXNNM1U4OiBsaW5rc1sxXS5pbmNsdWRlcygnLm0zdTgnKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gVm9lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dm9lLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZGVsc18xIiwicmVxdWlyZSIsIlZvZSIsIlZpZGVvRXh0cmFjdG9yIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJzZXJ2ZXJOYW1lIiwic291cmNlcyIsImRvbWFpbnMiLCJleHRyYWN0IiwidmlkZW9VcmwiLCJkYXRhIiwiY2xpZW50IiwiZ2V0IiwiaHJlZiIsImxpbmtzIiwibWF0Y2giLCJxdWFsaXR5IiwicHVzaCIsInVybCIsImlzTTNVOCIsImluY2x1ZGVzIiwiZXJyIiwiRXJyb3IiLCJtZXNzYWdlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/voe.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/index.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/index.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.VidMoly = exports.StreamWish = exports.Mp4Upload = exports.Filemoon = exports.BilibiliExtractor = exports.AsianLoad = exports.VizCloud = exports.SmashyStream = exports.StreamHub = exports.StreamTape = exports.RapidCloud = exports.Kwik = exports.MixDrop = exports.VidCloud = exports.StreamSB = exports.GogoCDN = exports.MediaFormat = exports.TvType = exports.MediaStatus = exports.StreamingServers = exports.SubOrSub = exports.Genres = exports.Topics = exports.PROVIDERS_LIST = exports.NEWS = exports.META = exports.MOVIES = exports.LIGHT_NOVELS = exports.MANGA = exports.COMICS = exports.BOOKS = exports.ANIME = void 0;\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/index.js\");\nObject.defineProperty(exports, \"ANIME\", ({\n    enumerable: true,\n    get: function() {\n        return providers_1.ANIME;\n    }\n}));\nObject.defineProperty(exports, \"BOOKS\", ({\n    enumerable: true,\n    get: function() {\n        return providers_1.BOOKS;\n    }\n}));\nObject.defineProperty(exports, \"COMICS\", ({\n    enumerable: true,\n    get: function() {\n        return providers_1.COMICS;\n    }\n}));\nObject.defineProperty(exports, \"LIGHT_NOVELS\", ({\n    enumerable: true,\n    get: function() {\n        return providers_1.LIGHT_NOVELS;\n    }\n}));\nObject.defineProperty(exports, \"MANGA\", ({\n    enumerable: true,\n    get: function() {\n        return providers_1.MANGA;\n    }\n}));\nObject.defineProperty(exports, \"MOVIES\", ({\n    enumerable: true,\n    get: function() {\n        return providers_1.MOVIES;\n    }\n}));\nObject.defineProperty(exports, \"META\", ({\n    enumerable: true,\n    get: function() {\n        return providers_1.META;\n    }\n}));\nObject.defineProperty(exports, \"NEWS\", ({\n    enumerable: true,\n    get: function() {\n        return providers_1.NEWS;\n    }\n}));\nconst providers_list_1 = __webpack_require__(/*! ./utils/providers-list */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/providers-list.js\");\nObject.defineProperty(exports, \"PROVIDERS_LIST\", ({\n    enumerable: true,\n    get: function() {\n        return providers_list_1.PROVIDERS_LIST;\n    }\n}));\nconst extractors_1 = __webpack_require__(/*! ./extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nObject.defineProperty(exports, \"VizCloud\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.VizCloud;\n    }\n}));\nObject.defineProperty(exports, \"AsianLoad\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.AsianLoad;\n    }\n}));\nObject.defineProperty(exports, \"GogoCDN\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.GogoCDN;\n    }\n}));\nObject.defineProperty(exports, \"Kwik\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.Kwik;\n    }\n}));\nObject.defineProperty(exports, \"MixDrop\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.MixDrop;\n    }\n}));\nObject.defineProperty(exports, \"RapidCloud\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.RapidCloud;\n    }\n}));\nObject.defineProperty(exports, \"BilibiliExtractor\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.BilibiliExtractor;\n    }\n}));\nObject.defineProperty(exports, \"Filemoon\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.Filemoon;\n    }\n}));\nObject.defineProperty(exports, \"StreamSB\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.StreamSB;\n    }\n}));\nObject.defineProperty(exports, \"StreamTape\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.StreamTape;\n    }\n}));\nObject.defineProperty(exports, \"VidCloud\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.VidCloud;\n    }\n}));\nObject.defineProperty(exports, \"StreamHub\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.StreamHub;\n    }\n}));\nObject.defineProperty(exports, \"SmashyStream\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.SmashyStream;\n    }\n}));\nObject.defineProperty(exports, \"VidMoly\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.VidMoly;\n    }\n}));\nObject.defineProperty(exports, \"Mp4Upload\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.Mp4Upload;\n    }\n}));\nObject.defineProperty(exports, \"StreamWish\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.StreamWish;\n    }\n}));\nconst models_1 = __webpack_require__(/*! ./models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nObject.defineProperty(exports, \"StreamingServers\", ({\n    enumerable: true,\n    get: function() {\n        return models_1.StreamingServers;\n    }\n}));\nObject.defineProperty(exports, \"MediaStatus\", ({\n    enumerable: true,\n    get: function() {\n        return models_1.MediaStatus;\n    }\n}));\nObject.defineProperty(exports, \"SubOrSub\", ({\n    enumerable: true,\n    get: function() {\n        return models_1.SubOrSub;\n    }\n}));\nObject.defineProperty(exports, \"TvType\", ({\n    enumerable: true,\n    get: function() {\n        return models_1.TvType;\n    }\n}));\nObject.defineProperty(exports, \"Genres\", ({\n    enumerable: true,\n    get: function() {\n        return models_1.Genres;\n    }\n}));\nObject.defineProperty(exports, \"Topics\", ({\n    enumerable: true,\n    get: function() {\n        return models_1.Topics;\n    }\n}));\nObject.defineProperty(exports, \"MediaFormat\", ({\n    enumerable: true,\n    get: function() {\n        return models_1.MediaFormat;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBR0Esa0JBQWtCLEdBQUdBLGlCQUFpQixHQUFHQSxnQkFBZ0IsR0FBR0EseUJBQXlCLEdBQUdBLGlCQUFpQixHQUFHQSxnQkFBZ0IsR0FBR0Esb0JBQW9CLEdBQUdBLGlCQUFpQixHQUFHQSxrQkFBa0IsR0FBR0Esa0JBQWtCLEdBQUdBLFlBQVksR0FBR0EsZUFBZSxHQUFHQSxnQkFBZ0IsR0FBR0EsZ0JBQWdCLEdBQUdBLGVBQWUsR0FBR0EsbUJBQW1CLEdBQUdBLGNBQWMsR0FBR0EsbUJBQW1CLEdBQUdBLHdCQUF3QixHQUFHQSxnQkFBZ0IsR0FBR0EsY0FBYyxHQUFHQSxjQUFjLEdBQUdBLHNCQUFzQixHQUFHQSxZQUFZLEdBQUdBLFlBQVksR0FBR0EsY0FBYyxHQUFHQSxvQkFBb0IsR0FBR0EsYUFBYSxHQUFHQSxjQUFjLEdBQUdBLGFBQWEsR0FBR0EsYUFBYSxHQUFHLEtBQUs7QUFDam5CLE1BQU1rQyxjQUFjQyxtQkFBT0EsQ0FBQyxvSUFBYTtBQUN6Q3JDLHlDQUF3QztJQUFFc0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsWUFBWUQsS0FBSztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzdHbkMseUNBQXdDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxZQUFZRixLQUFLO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDN0dsQywwQ0FBeUM7SUFBRXNDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILFlBQVlILE1BQU07SUFBRTtBQUFFLENBQUMsRUFBQztBQUMvR2pDLGdEQUErQztJQUFFc0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsWUFBWUwsWUFBWTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzNIL0IseUNBQXdDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxZQUFZSixLQUFLO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDN0doQywwQ0FBeUM7SUFBRXNDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILFlBQVlOLE1BQU07SUFBRTtBQUFFLENBQUMsRUFBQztBQUMvRzlCLHdDQUF1QztJQUFFc0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsWUFBWVAsSUFBSTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzNHN0Isd0NBQXVDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxZQUFZUixJQUFJO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDM0csTUFBTVksbUJBQW1CSCxtQkFBT0EsQ0FBQyxvSkFBd0I7QUFDekRyQyxrREFBaUQ7SUFBRXNDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLGlCQUFpQmIsY0FBYztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3BJLE1BQU1jLGVBQWVKLG1CQUFPQSxDQUFDLHNJQUFjO0FBQzNDckMsNENBQTJDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxhQUFhL0IsUUFBUTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3BIViw2Q0FBNEM7SUFBRXNDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGFBQWFoQyxTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdEhULDJDQUEwQztJQUFFc0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsYUFBYXRCLE9BQU87SUFBRTtBQUFFLENBQUMsRUFBQztBQUNsSG5CLHdDQUF1QztJQUFFc0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsYUFBYTFCLElBQUk7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM1R2YsMkNBQTBDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxhQUFhekIsT0FBTztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xIaEIsOENBQTZDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxhQUFhM0IsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3hIZCxxREFBb0Q7SUFBRXNDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGFBQWFqQyxpQkFBaUI7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN0SVIsNENBQTJDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxhQUFhbEMsUUFBUTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3BIUCw0Q0FBMkM7SUFBRXNDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGFBQWF2QixRQUFRO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDcEhsQiw4Q0FBNkM7SUFBRXNDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGFBQWE1QixVQUFVO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDeEhiLDRDQUEyQztJQUFFc0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsYUFBYXhCLFFBQVE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNwSGpCLDZDQUE0QztJQUFFc0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsYUFBYTdCLFNBQVM7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN0SFosZ0RBQStDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxhQUFhOUIsWUFBWTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzVIWCwyQ0FBMEM7SUFBRXNDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGFBQWFyQyxPQUFPO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDbEhKLDZDQUE0QztJQUFFc0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsYUFBYW5DLFNBQVM7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN0SE4sOENBQTZDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxhQUFhcEMsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3hILE1BQU1xQyxXQUFXTCxtQkFBT0EsQ0FBQyw4SEFBVTtBQUNuQ3JDLG9EQUFtRDtJQUFFc0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csU0FBU25CLGdCQUFnQjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2hJdkIsK0NBQThDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxTQUFTcEIsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3RIdEIsNENBQTJDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxTQUFTbEIsUUFBUTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2hIeEIsMENBQXlDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxTQUFTckIsTUFBTTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzVHckIsMENBQXlDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxTQUFTakIsTUFBTTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzVHekIsMENBQXlDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxTQUFTaEIsTUFBTTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzVHMUIsK0NBQThDO0lBQUVzQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxTQUFTdEIsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDLEVBQ3RILGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3doYXRldmVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25zdW1ldCtleHRlbnNpb25zQDEuNS40L25vZGVfbW9kdWxlcy9AY29uc3VtZXQvZXh0ZW5zaW9ucy9kaXN0L2luZGV4LmpzP2E2MzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZpZE1vbHkgPSBleHBvcnRzLlN0cmVhbVdpc2ggPSBleHBvcnRzLk1wNFVwbG9hZCA9IGV4cG9ydHMuRmlsZW1vb24gPSBleHBvcnRzLkJpbGliaWxpRXh0cmFjdG9yID0gZXhwb3J0cy5Bc2lhbkxvYWQgPSBleHBvcnRzLlZpekNsb3VkID0gZXhwb3J0cy5TbWFzaHlTdHJlYW0gPSBleHBvcnRzLlN0cmVhbUh1YiA9IGV4cG9ydHMuU3RyZWFtVGFwZSA9IGV4cG9ydHMuUmFwaWRDbG91ZCA9IGV4cG9ydHMuS3dpayA9IGV4cG9ydHMuTWl4RHJvcCA9IGV4cG9ydHMuVmlkQ2xvdWQgPSBleHBvcnRzLlN0cmVhbVNCID0gZXhwb3J0cy5Hb2dvQ0ROID0gZXhwb3J0cy5NZWRpYUZvcm1hdCA9IGV4cG9ydHMuVHZUeXBlID0gZXhwb3J0cy5NZWRpYVN0YXR1cyA9IGV4cG9ydHMuU3RyZWFtaW5nU2VydmVycyA9IGV4cG9ydHMuU3ViT3JTdWIgPSBleHBvcnRzLkdlbnJlcyA9IGV4cG9ydHMuVG9waWNzID0gZXhwb3J0cy5QUk9WSURFUlNfTElTVCA9IGV4cG9ydHMuTkVXUyA9IGV4cG9ydHMuTUVUQSA9IGV4cG9ydHMuTU9WSUVTID0gZXhwb3J0cy5MSUdIVF9OT1ZFTFMgPSBleHBvcnRzLk1BTkdBID0gZXhwb3J0cy5DT01JQ1MgPSBleHBvcnRzLkJPT0tTID0gZXhwb3J0cy5BTklNRSA9IHZvaWQgMDtcbmNvbnN0IHByb3ZpZGVyc18xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQU5JTUVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3ZpZGVyc18xLkFOSU1FOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQk9PS1NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3ZpZGVyc18xLkJPT0tTOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ09NSUNTXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcnNfMS5DT01JQ1M7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMSUdIVF9OT1ZFTFNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3ZpZGVyc18xLkxJR0hUX05PVkVMUzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1BTkdBXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcnNfMS5NQU5HQTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1PVklFU1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdmlkZXJzXzEuTU9WSUVTOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTUVUQVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdmlkZXJzXzEuTUVUQTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5FV1NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3ZpZGVyc18xLk5FV1M7IH0gfSk7XG5jb25zdCBwcm92aWRlcnNfbGlzdF8xID0gcmVxdWlyZShcIi4vdXRpbHMvcHJvdmlkZXJzLWxpc3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQUk9WSURFUlNfTElTVFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdmlkZXJzX2xpc3RfMS5QUk9WSURFUlNfTElTVDsgfSB9KTtcbmNvbnN0IGV4dHJhY3RvcnNfMSA9IHJlcXVpcmUoXCIuL2V4dHJhY3RvcnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJWaXpDbG91ZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXh0cmFjdG9yc18xLlZpekNsb3VkOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXNpYW5Mb2FkXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleHRyYWN0b3JzXzEuQXNpYW5Mb2FkOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR29nb0NETlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXh0cmFjdG9yc18xLkdvZ29DRE47IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJLd2lrXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleHRyYWN0b3JzXzEuS3dpazsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1peERyb3BcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4dHJhY3RvcnNfMS5NaXhEcm9wOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmFwaWRDbG91ZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXh0cmFjdG9yc18xLlJhcGlkQ2xvdWQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCaWxpYmlsaUV4dHJhY3RvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXh0cmFjdG9yc18xLkJpbGliaWxpRXh0cmFjdG9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRmlsZW1vb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4dHJhY3RvcnNfMS5GaWxlbW9vbjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0cmVhbVNCXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleHRyYWN0b3JzXzEuU3RyZWFtU0I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdHJlYW1UYXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleHRyYWN0b3JzXzEuU3RyZWFtVGFwZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZpZENsb3VkXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleHRyYWN0b3JzXzEuVmlkQ2xvdWQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdHJlYW1IdWJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4dHJhY3RvcnNfMS5TdHJlYW1IdWI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTbWFzaHlTdHJlYW1cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4dHJhY3RvcnNfMS5TbWFzaHlTdHJlYW07IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJWaWRNb2x5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleHRyYWN0b3JzXzEuVmlkTW9seTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1wNFVwbG9hZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXh0cmFjdG9yc18xLk1wNFVwbG9hZDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0cmVhbVdpc2hcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4dHJhY3RvcnNfMS5TdHJlYW1XaXNoOyB9IH0pO1xuY29uc3QgbW9kZWxzXzEgPSByZXF1aXJlKFwiLi9tb2RlbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdHJlYW1pbmdTZXJ2ZXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2RlbHNfMS5TdHJlYW1pbmdTZXJ2ZXJzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTWVkaWFTdGF0dXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZGVsc18xLk1lZGlhU3RhdHVzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3ViT3JTdWJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZGVsc18xLlN1Yk9yU3ViOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHZUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2RlbHNfMS5UdlR5cGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJHZW5yZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZGVsc18xLkdlbnJlczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRvcGljc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kZWxzXzEuVG9waWNzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTWVkaWFGb3JtYXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZGVsc18xLk1lZGlhRm9ybWF0OyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVmlkTW9seSIsIlN0cmVhbVdpc2giLCJNcDRVcGxvYWQiLCJGaWxlbW9vbiIsIkJpbGliaWxpRXh0cmFjdG9yIiwiQXNpYW5Mb2FkIiwiVml6Q2xvdWQiLCJTbWFzaHlTdHJlYW0iLCJTdHJlYW1IdWIiLCJTdHJlYW1UYXBlIiwiUmFwaWRDbG91ZCIsIkt3aWsiLCJNaXhEcm9wIiwiVmlkQ2xvdWQiLCJTdHJlYW1TQiIsIkdvZ29DRE4iLCJNZWRpYUZvcm1hdCIsIlR2VHlwZSIsIk1lZGlhU3RhdHVzIiwiU3RyZWFtaW5nU2VydmVycyIsIlN1Yk9yU3ViIiwiR2VucmVzIiwiVG9waWNzIiwiUFJPVklERVJTX0xJU1QiLCJORVdTIiwiTUVUQSIsIk1PVklFUyIsIkxJR0hUX05PVkVMUyIsIk1BTkdBIiwiQ09NSUNTIiwiQk9PS1MiLCJBTklNRSIsInByb3ZpZGVyc18xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm92aWRlcnNfbGlzdF8xIiwiZXh0cmFjdG9yc18xIiwibW9kZWxzXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/anime-parser.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/anime-parser.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst _1 = __webpack_require__(/*! . */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass AnimeParser extends _1.BaseParser {\n    constructor(){\n        super(...arguments);\n        /**\n         * if the provider has dub and it's avialable seperatly from sub set this to `true`\n         */ this.isDubAvailableSeparately = false;\n    }\n}\nexports[\"default\"] = AnimeParser; //# sourceMappingURL=anime-parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL2FuaW1lLXBhcnNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxLQUFLQyxtQkFBT0EsQ0FBQyx1SEFBRztBQUN0QixNQUFNQyxvQkFBb0JGLEdBQUdHLFVBQVU7SUFDbkNDLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1Q7O1NBRUMsR0FDRCxJQUFJLENBQUNDLHdCQUF3QixHQUFHO0lBQ3BDO0FBQ0o7QUFDQVIsa0JBQWUsR0FBR0ksYUFDbEIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL2FuaW1lLXBhcnNlci5qcz8yMDZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgXzEgPSByZXF1aXJlKFwiLlwiKTtcbmNsYXNzIEFuaW1lUGFyc2VyIGV4dGVuZHMgXzEuQmFzZVBhcnNlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpZiB0aGUgcHJvdmlkZXIgaGFzIGR1YiBhbmQgaXQncyBhdmlhbGFibGUgc2VwZXJhdGx5IGZyb20gc3ViIHNldCB0aGlzIHRvIGB0cnVlYFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc0R1YkF2YWlsYWJsZVNlcGFyYXRlbHkgPSBmYWxzZTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBBbmltZVBhcnNlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuaW1lLXBhcnNlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfMSIsInJlcXVpcmUiLCJBbmltZVBhcnNlciIsIkJhc2VQYXJzZXIiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImlzRHViQXZhaWxhYmxlU2VwYXJhdGVseSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/anime-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/base-parser.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/base-parser.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst _1 = __webpack_require__(/*! . */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass BaseParser extends _1.BaseProvider {\n}\nexports[\"default\"] = BaseParser; //# sourceMappingURL=base-parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL2Jhc2UtcGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLEtBQUtDLG1CQUFPQSxDQUFDLHVIQUFHO0FBQ3RCLE1BQU1DLG1CQUFtQkYsR0FBR0csWUFBWTtBQUN4QztBQUNBTCxrQkFBZSxHQUFHSSxZQUNsQix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29uc3VtZXQrZXh0ZW5zaW9uc0AxLjUuNC9ub2RlX21vZHVsZXMvQGNvbnN1bWV0L2V4dGVuc2lvbnMvZGlzdC9tb2RlbHMvYmFzZS1wYXJzZXIuanM/MTBjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IF8xID0gcmVxdWlyZShcIi5cIik7XG5jbGFzcyBCYXNlUGFyc2VyIGV4dGVuZHMgXzEuQmFzZVByb3ZpZGVyIHtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEJhc2VQYXJzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLXBhcnNlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfMSIsInJlcXVpcmUiLCJCYXNlUGFyc2VyIiwiQmFzZVByb3ZpZGVyIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/base-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/base-provider.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/base-provider.js ***!
  \**********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst proxy_1 = __importDefault(__webpack_require__(/*! ./proxy */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/proxy.js\"));\nclass BaseProvider extends proxy_1.default {\n    constructor(){\n        super(...arguments);\n        /**\n         * Most providers are english based, but if the provider is not english based override this value.\n         * must be in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format\n         */ this.languages = \"en\";\n        /**\n         * override as `true` if the provider **only** supports NSFW content\n         */ this.isNSFW = false;\n        /**\n         * Logo of the provider (used in the website) or `undefined` if not available. ***128x128px is preferred***\\\n         * Must be a valid URL (not a data URL)\n         */ this.logo = \"https://png.pngtree.com/png-vector/20210221/ourmid/pngtree-error-404-not-found-neon-effect-png-image_2928214.jpg\";\n        /**\n         * override as `false` if the provider is **down** or **not working**\n         */ this.isWorking = true;\n    }\n    /**\n     * returns provider stats\n     */ get toString() {\n        return {\n            name: this.name,\n            baseUrl: this.baseUrl,\n            lang: this.languages,\n            isNSFW: this.isNSFW,\n            logo: this.logo,\n            classPath: this.classPath,\n            isWorking: this.isWorking\n        };\n    }\n}\nexports[\"default\"] = BaseProvider; //# sourceMappingURL=base-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL2Jhc2UtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsSUFBSyxJQUFJLElBQUksQ0FBQ0EsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFVBQVVQLGdCQUFnQlEsbUJBQU9BLENBQUMsNkhBQVM7QUFDakQsTUFBTUMscUJBQXFCRixRQUFRRyxPQUFPO0lBQ3RDQyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNUOzs7U0FHQyxHQUNELElBQUksQ0FBQ0MsU0FBUyxHQUFHO1FBQ2pCOztTQUVDLEdBQ0QsSUFBSSxDQUFDQyxNQUFNLEdBQUc7UUFDZDs7O1NBR0MsR0FDRCxJQUFJLENBQUNDLElBQUksR0FBRztRQUNaOztTQUVDLEdBQ0QsSUFBSSxDQUFDQyxTQUFTLEdBQUc7SUFDckI7SUFDQTs7S0FFQyxHQUNELElBQUlDLFdBQVc7UUFDWCxPQUFPO1lBQ0hDLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZDLFNBQVMsSUFBSSxDQUFDQSxPQUFPO1lBQ3JCQyxNQUFNLElBQUksQ0FBQ1AsU0FBUztZQUNwQkMsUUFBUSxJQUFJLENBQUNBLE1BQU07WUFDbkJDLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZNLFdBQVcsSUFBSSxDQUFDQSxTQUFTO1lBQ3pCTCxXQUFXLElBQUksQ0FBQ0EsU0FBUztRQUM3QjtJQUNKO0FBQ0o7QUFDQVgsa0JBQWUsR0FBR0ksY0FDbEIseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL2Jhc2UtcHJvdmlkZXIuanM/MDM2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHByb3h5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcHJveHlcIikpO1xuY2xhc3MgQmFzZVByb3ZpZGVyIGV4dGVuZHMgcHJveHlfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1vc3QgcHJvdmlkZXJzIGFyZSBlbmdsaXNoIGJhc2VkLCBidXQgaWYgdGhlIHByb3ZpZGVyIGlzIG5vdCBlbmdsaXNoIGJhc2VkIG92ZXJyaWRlIHRoaXMgdmFsdWUuXG4gICAgICAgICAqIG11c3QgYmUgaW4gW0lTTyA2MzktMV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9JU09fNjM5LTFfY29kZXMpIGZvcm1hdFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sYW5ndWFnZXMgPSAnZW4nO1xuICAgICAgICAvKipcbiAgICAgICAgICogb3ZlcnJpZGUgYXMgYHRydWVgIGlmIHRoZSBwcm92aWRlciAqKm9ubHkqKiBzdXBwb3J0cyBOU0ZXIGNvbnRlbnRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaXNOU0ZXID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMb2dvIG9mIHRoZSBwcm92aWRlciAodXNlZCBpbiB0aGUgd2Vic2l0ZSkgb3IgYHVuZGVmaW5lZGAgaWYgbm90IGF2YWlsYWJsZS4gKioqMTI4eDEyOHB4IGlzIHByZWZlcnJlZCoqKlxcXG4gICAgICAgICAqIE11c3QgYmUgYSB2YWxpZCBVUkwgKG5vdCBhIGRhdGEgVVJMKVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sb2dvID0gJ2h0dHBzOi8vcG5nLnBuZ3RyZWUuY29tL3BuZy12ZWN0b3IvMjAyMTAyMjEvb3VybWlkL3BuZ3RyZWUtZXJyb3ItNDA0LW5vdC1mb3VuZC1uZW9uLWVmZmVjdC1wbmctaW1hZ2VfMjkyODIxNC5qcGcnO1xuICAgICAgICAvKipcbiAgICAgICAgICogb3ZlcnJpZGUgYXMgYGZhbHNlYCBpZiB0aGUgcHJvdmlkZXIgaXMgKipkb3duKiogb3IgKipub3Qgd29ya2luZyoqXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlzV29ya2luZyA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHJldHVybnMgcHJvdmlkZXIgc3RhdHNcbiAgICAgKi9cbiAgICBnZXQgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBiYXNlVXJsOiB0aGlzLmJhc2VVcmwsXG4gICAgICAgICAgICBsYW5nOiB0aGlzLmxhbmd1YWdlcyxcbiAgICAgICAgICAgIGlzTlNGVzogdGhpcy5pc05TRlcsXG4gICAgICAgICAgICBsb2dvOiB0aGlzLmxvZ28sXG4gICAgICAgICAgICBjbGFzc1BhdGg6IHRoaXMuY2xhc3NQYXRoLFxuICAgICAgICAgICAgaXNXb3JraW5nOiB0aGlzLmlzV29ya2luZyxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBCYXNlUHJvdmlkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwcm94eV8xIiwicmVxdWlyZSIsIkJhc2VQcm92aWRlciIsImRlZmF1bHQiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImxhbmd1YWdlcyIsImlzTlNGVyIsImxvZ28iLCJpc1dvcmtpbmciLCJ0b1N0cmluZyIsIm5hbWUiLCJiYXNlVXJsIiwibGFuZyIsImNsYXNzUGF0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/base-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/book-parser.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/book-parser.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst _1 = __webpack_require__(/*! . */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass BookParser extends _1.BaseParser {\n}\nexports[\"default\"] = BookParser; //# sourceMappingURL=book-parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL2Jvb2stcGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLEtBQUtDLG1CQUFPQSxDQUFDLHVIQUFHO0FBQ3RCLE1BQU1DLG1CQUFtQkYsR0FBR0csVUFBVTtBQUN0QztBQUNBTCxrQkFBZSxHQUFHSSxZQUNsQix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29uc3VtZXQrZXh0ZW5zaW9uc0AxLjUuNC9ub2RlX21vZHVsZXMvQGNvbnN1bWV0L2V4dGVuc2lvbnMvZGlzdC9tb2RlbHMvYm9vay1wYXJzZXIuanM/NzJiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IF8xID0gcmVxdWlyZShcIi5cIik7XG5jbGFzcyBCb29rUGFyc2VyIGV4dGVuZHMgXzEuQmFzZVBhcnNlciB7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBCb29rUGFyc2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vay1wYXJzZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiXzEiLCJyZXF1aXJlIiwiQm9va1BhcnNlciIsIkJhc2VQYXJzZXIiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/book-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/comic-parser.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/comic-parser.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst _1 = __webpack_require__(/*! . */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass ComicParser extends _1.BaseParser {\n}\nexports[\"default\"] = ComicParser; //# sourceMappingURL=comic-parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL2NvbWljLXBhcnNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxLQUFLQyxtQkFBT0EsQ0FBQyx1SEFBRztBQUN0QixNQUFNQyxvQkFBb0JGLEdBQUdHLFVBQVU7QUFDdkM7QUFDQUwsa0JBQWUsR0FBR0ksYUFDbEIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL2NvbWljLXBhcnNlci5qcz83ZDkyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgXzEgPSByZXF1aXJlKFwiLlwiKTtcbmNsYXNzIENvbWljUGFyc2VyIGV4dGVuZHMgXzEuQmFzZVBhcnNlciB7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBDb21pY1BhcnNlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWljLXBhcnNlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfMSIsInJlcXVpcmUiLCJDb21pY1BhcnNlciIsIkJhc2VQYXJzZXIiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/comic-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MediaFormat = exports.Topics = exports.Genres = exports.MovieParser = exports.TvType = exports.GetComicsComicsObject = exports.ComicParser = exports.NewsParser = exports.MangaParser = exports.LightNovelParser = exports.SubOrSub = exports.MediaStatus = exports.StreamingServers = exports.LibgenBookObject = exports.VideoExtractor = exports.BookParser = exports.AnimeParser = exports.BaseParser = exports.BaseProvider = void 0;\nconst base_provider_1 = __importDefault(__webpack_require__(/*! ./base-provider */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/base-provider.js\"));\nexports.BaseProvider = base_provider_1.default;\nconst base_parser_1 = __importDefault(__webpack_require__(/*! ./base-parser */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/base-parser.js\"));\nexports.BaseParser = base_parser_1.default;\nconst anime_parser_1 = __importDefault(__webpack_require__(/*! ./anime-parser */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/anime-parser.js\"));\nexports.AnimeParser = anime_parser_1.default;\nconst book_parser_1 = __importDefault(__webpack_require__(/*! ./book-parser */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/book-parser.js\"));\nexports.BookParser = book_parser_1.default;\nconst comic_parser_1 = __importDefault(__webpack_require__(/*! ./comic-parser */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/comic-parser.js\"));\nexports.ComicParser = comic_parser_1.default;\nconst video_extractor_1 = __importDefault(__webpack_require__(/*! ./video-extractor */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/video-extractor.js\"));\nexports.VideoExtractor = video_extractor_1.default;\nconst manga_parser_1 = __importDefault(__webpack_require__(/*! ./manga-parser */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/manga-parser.js\"));\nexports.MangaParser = manga_parser_1.default;\nconst lightnovel_parser_1 = __importDefault(__webpack_require__(/*! ./lightnovel-parser */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/lightnovel-parser.js\"));\nexports.LightNovelParser = lightnovel_parser_1.default;\nconst movie_parser_1 = __importDefault(__webpack_require__(/*! ./movie-parser */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/movie-parser.js\"));\nexports.MovieParser = movie_parser_1.default;\nconst news_parser_1 = __importDefault(__webpack_require__(/*! ./news-parser */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/news-parser.js\"));\nexports.NewsParser = news_parser_1.default;\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/types.js\");\nObject.defineProperty(exports, \"StreamingServers\", ({\n    enumerable: true,\n    get: function() {\n        return types_1.StreamingServers;\n    }\n}));\nObject.defineProperty(exports, \"MediaStatus\", ({\n    enumerable: true,\n    get: function() {\n        return types_1.MediaStatus;\n    }\n}));\nObject.defineProperty(exports, \"SubOrSub\", ({\n    enumerable: true,\n    get: function() {\n        return types_1.SubOrSub;\n    }\n}));\nObject.defineProperty(exports, \"TvType\", ({\n    enumerable: true,\n    get: function() {\n        return types_1.TvType;\n    }\n}));\nObject.defineProperty(exports, \"Genres\", ({\n    enumerable: true,\n    get: function() {\n        return types_1.Genres;\n    }\n}));\nObject.defineProperty(exports, \"Topics\", ({\n    enumerable: true,\n    get: function() {\n        return types_1.Topics;\n    }\n}));\nObject.defineProperty(exports, \"MediaFormat\", ({\n    enumerable: true,\n    get: function() {\n        return types_1.MediaFormat;\n    }\n}));\nconst type_objects_1 = __webpack_require__(/*! ./type-objects */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/type-objects.js\");\nObject.defineProperty(exports, \"LibgenBookObject\", ({\n    enumerable: true,\n    get: function() {\n        return type_objects_1.LibgenBookObject;\n    }\n}));\nObject.defineProperty(exports, \"GetComicsComicsObject\", ({\n    enumerable: true,\n    get: function() {\n        return type_objects_1.GetComicsComicsObject;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/lightnovel-parser.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/lightnovel-parser.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst _1 = __webpack_require__(/*! . */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass LightNovelParser extends _1.BaseParser {\n}\nexports[\"default\"] = LightNovelParser; //# sourceMappingURL=lightnovel-parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL2xpZ2h0bm92ZWwtcGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLEtBQUtDLG1CQUFPQSxDQUFDLHVIQUFHO0FBQ3RCLE1BQU1DLHlCQUF5QkYsR0FBR0csVUFBVTtBQUM1QztBQUNBTCxrQkFBZSxHQUFHSSxrQkFDbEIsNkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL2xpZ2h0bm92ZWwtcGFyc2VyLmpzP2U4ZTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBfMSA9IHJlcXVpcmUoXCIuXCIpO1xuY2xhc3MgTGlnaHROb3ZlbFBhcnNlciBleHRlbmRzIF8xLkJhc2VQYXJzZXIge1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gTGlnaHROb3ZlbFBhcnNlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZ2h0bm92ZWwtcGFyc2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl8xIiwicmVxdWlyZSIsIkxpZ2h0Tm92ZWxQYXJzZXIiLCJCYXNlUGFyc2VyIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/lightnovel-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/manga-parser.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/manga-parser.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst _1 = __webpack_require__(/*! . */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass MangaParser extends _1.BaseParser {\n}\nexports[\"default\"] = MangaParser; //# sourceMappingURL=manga-parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL21hbmdhLXBhcnNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxLQUFLQyxtQkFBT0EsQ0FBQyx1SEFBRztBQUN0QixNQUFNQyxvQkFBb0JGLEdBQUdHLFVBQVU7QUFDdkM7QUFDQUwsa0JBQWUsR0FBR0ksYUFDbEIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL21hbmdhLXBhcnNlci5qcz9lNjIxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgXzEgPSByZXF1aXJlKFwiLlwiKTtcbmNsYXNzIE1hbmdhUGFyc2VyIGV4dGVuZHMgXzEuQmFzZVBhcnNlciB7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBNYW5nYVBhcnNlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hbmdhLXBhcnNlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfMSIsInJlcXVpcmUiLCJNYW5nYVBhcnNlciIsIkJhc2VQYXJzZXIiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/manga-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/movie-parser.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/movie-parser.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst _1 = __webpack_require__(/*! . */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass MovieParser extends _1.BaseParser {\n}\nexports[\"default\"] = MovieParser; //# sourceMappingURL=movie-parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL21vdmllLXBhcnNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxLQUFLQyxtQkFBT0EsQ0FBQyx1SEFBRztBQUN0QixNQUFNQyxvQkFBb0JGLEdBQUdHLFVBQVU7QUFDdkM7QUFDQUwsa0JBQWUsR0FBR0ksYUFDbEIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL21vdmllLXBhcnNlci5qcz9lOGJiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgXzEgPSByZXF1aXJlKFwiLlwiKTtcbmNsYXNzIE1vdmllUGFyc2VyIGV4dGVuZHMgXzEuQmFzZVBhcnNlciB7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBNb3ZpZVBhcnNlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vdmllLXBhcnNlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfMSIsInJlcXVpcmUiLCJNb3ZpZVBhcnNlciIsIkJhc2VQYXJzZXIiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/movie-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/news-parser.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/news-parser.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst _1 = __webpack_require__(/*! . */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass NewsParser extends _1.BaseProvider {\n}\nexports[\"default\"] = NewsParser; //# sourceMappingURL=news-parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL25ld3MtcGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLEtBQUtDLG1CQUFPQSxDQUFDLHVIQUFHO0FBQ3RCLE1BQU1DLG1CQUFtQkYsR0FBR0csWUFBWTtBQUN4QztBQUNBTCxrQkFBZSxHQUFHSSxZQUNsQix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29uc3VtZXQrZXh0ZW5zaW9uc0AxLjUuNC9ub2RlX21vZHVsZXMvQGNvbnN1bWV0L2V4dGVuc2lvbnMvZGlzdC9tb2RlbHMvbmV3cy1wYXJzZXIuanM/YzhhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IF8xID0gcmVxdWlyZShcIi5cIik7XG5jbGFzcyBOZXdzUGFyc2VyIGV4dGVuZHMgXzEuQmFzZVByb3ZpZGVyIHtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IE5ld3NQYXJzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXdzLXBhcnNlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfMSIsInJlcXVpcmUiLCJOZXdzUGFyc2VyIiwiQmFzZVByb3ZpZGVyIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/news-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/proxy.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/proxy.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Proxy = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/.pnpm/axios@0.27.2/node_modules/axios/index.js\"));\nclass Proxy {\n    /**\n     *\n     * @param proxyConfig The proxy config (optional)\n     * @param adapter The axios adapter (optional)\n     */ constructor(proxyConfig, adapter){\n        this.proxyConfig = proxyConfig;\n        this.adapter = adapter;\n        this.validUrl = /^https?:\\/\\/.+/;\n        this.rotateProxy = (proxy)=>{\n            var _a;\n            setInterval(()=>{\n                const url = proxy.urls.shift();\n                if (url) proxy.urls.push(url);\n                this.setProxy({\n                    url: proxy.urls[0],\n                    key: proxy.key\n                });\n            }, (_a = proxy === null || proxy === void 0 ? void 0 : proxy.rotateInterval) !== null && _a !== void 0 ? _a : 5000);\n        };\n        this.toMap = (arr)=>arr.map((v, i)=>[\n                    i,\n                    v\n                ]);\n        this.client = axios_1.default.create();\n        if (proxyConfig) this.setProxy(proxyConfig);\n        if (adapter) this.setAxiosAdapter(adapter);\n    }\n    /**\n     * Set or Change the proxy config\n     */ setProxy(proxyConfig) {\n        if (!(proxyConfig === null || proxyConfig === void 0 ? void 0 : proxyConfig.url)) return;\n        if (typeof (proxyConfig === null || proxyConfig === void 0 ? void 0 : proxyConfig.url) === \"string\") {\n            if (!this.validUrl.test(proxyConfig.url)) throw new Error(\"Proxy URL is invalid!\");\n        }\n        if (Array.isArray(proxyConfig === null || proxyConfig === void 0 ? void 0 : proxyConfig.url)) {\n            for (const [i, url] of this.toMap(proxyConfig.url))if (!this.validUrl.test(url)) throw new Error(`Proxy URL at index ${i} is invalid!`);\n            this.rotateProxy(Object.assign(Object.assign({}, proxyConfig), {\n                urls: proxyConfig.url\n            }));\n        }\n        this.client.interceptors.request.use((config)=>{\n            var _a, _b;\n            if (proxyConfig === null || proxyConfig === void 0 ? void 0 : proxyConfig.url) {\n                config.headers = Object.assign(Object.assign({}, config.headers), {\n                    \"x-api-key\": (_a = proxyConfig === null || proxyConfig === void 0 ? void 0 : proxyConfig.key) !== null && _a !== void 0 ? _a : \"\"\n                });\n                config.url = `${proxyConfig.url}${(config === null || config === void 0 ? void 0 : config.url) ? config === null || config === void 0 ? void 0 : config.url : \"\"}`;\n            }\n            if ((_b = config === null || config === void 0 ? void 0 : config.url) === null || _b === void 0 ? void 0 : _b.includes(\"anify\")) config.headers = Object.assign(Object.assign({}, config.headers), {\n                \"User-Agent\": \"consumet\"\n            });\n            return config;\n        });\n    }\n    /**\n     * Set or Change the axios adapter\n     */ setAxiosAdapter(adapter) {\n        this.client.defaults.adapter = adapter;\n    }\n}\nexports.Proxy = Proxy;\nexports[\"default\"] = Proxy; //# sourceMappingURL=proxy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/proxy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/type-objects.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/type-objects.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GetComicsComicsObject = exports.LibgenBookObject = void 0;\nclass LibgenBookObject {\n    constructor(){\n        this.title = \"\";\n        this.authors = [];\n        this.publisher = \"\";\n        this.year = \"\";\n        this.edition = \"\";\n        this.volume = \"\";\n        this.series = \"\";\n        this.isbn = [];\n        this.link = \"\";\n        this.id = \"\";\n        this.language = \"\";\n        this.format = \"\";\n        this.size = \"\";\n        this.pages = \"\";\n        this.image = \"\";\n        this.description = \"\";\n        this.tableOfContents = \"\";\n        this.topic = \"\";\n        this.hashes = new HashesObject();\n    }\n}\nexports.LibgenBookObject = LibgenBookObject;\nclass HashesObject {\n    constructor(){\n        this.AICH = \"\";\n        this.CRC32 = \"\";\n        this.eDonkey = \"\";\n        this.MD5 = \"\";\n        this.SHA1 = \"\";\n        this.SHA256 = [];\n        this.TTH = \"\";\n    }\n}\nclass GetComicsComicsObject {\n    constructor(){\n        this.image = \"\";\n        this.title = \"\";\n        this.year = \"\";\n        this.size = \"\";\n        this.excerpt = \"\";\n        this.description = \"\";\n        this.download = \"\";\n        this.category = \"\";\n        this.ufile = \"\";\n        this.mega = \"\";\n        this.mediafire = \"\";\n        this.zippyshare = \"\";\n        this.readOnline = \"\";\n    }\n}\nexports.GetComicsComicsObject = GetComicsComicsObject; //# sourceMappingURL=type-objects.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL3R5cGUtb2JqZWN0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUdBLHdCQUF3QixHQUFHLEtBQUs7QUFDaEUsTUFBTUc7SUFDRkMsYUFBYztRQUNWLElBQUksQ0FBQ0MsS0FBSyxHQUFHO1FBQ2IsSUFBSSxDQUFDQyxPQUFPLEdBQUcsRUFBRTtRQUNqQixJQUFJLENBQUNDLFNBQVMsR0FBRztRQUNqQixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBQ2YsSUFBSSxDQUFDQyxNQUFNLEdBQUc7UUFDZCxJQUFJLENBQUNDLE1BQU0sR0FBRztRQUNkLElBQUksQ0FBQ0MsSUFBSSxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsRUFBRSxHQUFHO1FBQ1YsSUFBSSxDQUFDQyxRQUFRLEdBQUc7UUFDaEIsSUFBSSxDQUFDQyxNQUFNLEdBQUc7UUFDZCxJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsS0FBSyxHQUFHO1FBQ2IsSUFBSSxDQUFDQyxLQUFLLEdBQUc7UUFDYixJQUFJLENBQUNDLFdBQVcsR0FBRztRQUNuQixJQUFJLENBQUNDLGVBQWUsR0FBRztRQUN2QixJQUFJLENBQUNDLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUlDO0lBQ3RCO0FBQ0o7QUFDQXhCLHdCQUF3QixHQUFHRztBQUMzQixNQUFNcUI7SUFDRnBCLGFBQWM7UUFDVixJQUFJLENBQUNxQixJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBQ2YsSUFBSSxDQUFDQyxHQUFHLEdBQUc7UUFDWCxJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEVBQUU7UUFDaEIsSUFBSSxDQUFDQyxHQUFHLEdBQUc7SUFDZjtBQUNKO0FBQ0EsTUFBTTdCO0lBQ0ZFLGFBQWM7UUFDVixJQUFJLENBQUNlLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ2QsS0FBSyxHQUFHO1FBQ2IsSUFBSSxDQUFDRyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNTLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ2UsT0FBTyxHQUFHO1FBQ2YsSUFBSSxDQUFDWixXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDYSxRQUFRLEdBQUc7UUFDaEIsSUFBSSxDQUFDQyxRQUFRLEdBQUc7UUFDaEIsSUFBSSxDQUFDQyxLQUFLLEdBQUc7UUFDYixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsU0FBUyxHQUFHO1FBQ2pCLElBQUksQ0FBQ0MsVUFBVSxHQUFHO1FBQ2xCLElBQUksQ0FBQ0MsVUFBVSxHQUFHO0lBQ3RCO0FBQ0o7QUFDQXZDLDZCQUE2QixHQUFHRSx1QkFDaEMsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL3R5cGUtb2JqZWN0cy5qcz9iMGM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HZXRDb21pY3NDb21pY3NPYmplY3QgPSBleHBvcnRzLkxpYmdlbkJvb2tPYmplY3QgPSB2b2lkIDA7XG5jbGFzcyBMaWJnZW5Cb29rT2JqZWN0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50aXRsZSA9ICcnO1xuICAgICAgICB0aGlzLmF1dGhvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5wdWJsaXNoZXIgPSAnJztcbiAgICAgICAgdGhpcy55ZWFyID0gJyc7XG4gICAgICAgIHRoaXMuZWRpdGlvbiA9ICcnO1xuICAgICAgICB0aGlzLnZvbHVtZSA9ICcnO1xuICAgICAgICB0aGlzLnNlcmllcyA9ICcnO1xuICAgICAgICB0aGlzLmlzYm4gPSBbXTtcbiAgICAgICAgdGhpcy5saW5rID0gJyc7XG4gICAgICAgIHRoaXMuaWQgPSAnJztcbiAgICAgICAgdGhpcy5sYW5ndWFnZSA9ICcnO1xuICAgICAgICB0aGlzLmZvcm1hdCA9ICcnO1xuICAgICAgICB0aGlzLnNpemUgPSAnJztcbiAgICAgICAgdGhpcy5wYWdlcyA9ICcnO1xuICAgICAgICB0aGlzLmltYWdlID0gJyc7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSAnJztcbiAgICAgICAgdGhpcy50YWJsZU9mQ29udGVudHMgPSAnJztcbiAgICAgICAgdGhpcy50b3BpYyA9ICcnO1xuICAgICAgICB0aGlzLmhhc2hlcyA9IG5ldyBIYXNoZXNPYmplY3QoKTtcbiAgICB9XG59XG5leHBvcnRzLkxpYmdlbkJvb2tPYmplY3QgPSBMaWJnZW5Cb29rT2JqZWN0O1xuY2xhc3MgSGFzaGVzT2JqZWN0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5BSUNIID0gJyc7XG4gICAgICAgIHRoaXMuQ1JDMzIgPSAnJztcbiAgICAgICAgdGhpcy5lRG9ua2V5ID0gJyc7XG4gICAgICAgIHRoaXMuTUQ1ID0gJyc7XG4gICAgICAgIHRoaXMuU0hBMSA9ICcnO1xuICAgICAgICB0aGlzLlNIQTI1NiA9IFtdO1xuICAgICAgICB0aGlzLlRUSCA9ICcnO1xuICAgIH1cbn1cbmNsYXNzIEdldENvbWljc0NvbWljc09iamVjdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaW1hZ2UgPSAnJztcbiAgICAgICAgdGhpcy50aXRsZSA9ICcnO1xuICAgICAgICB0aGlzLnllYXIgPSAnJztcbiAgICAgICAgdGhpcy5zaXplID0gJyc7XG4gICAgICAgIHRoaXMuZXhjZXJwdCA9ICcnO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gJyc7XG4gICAgICAgIHRoaXMuZG93bmxvYWQgPSAnJztcbiAgICAgICAgdGhpcy5jYXRlZ29yeSA9ICcnO1xuICAgICAgICB0aGlzLnVmaWxlID0gJyc7XG4gICAgICAgIHRoaXMubWVnYSA9ICcnO1xuICAgICAgICB0aGlzLm1lZGlhZmlyZSA9ICcnO1xuICAgICAgICB0aGlzLnppcHB5c2hhcmUgPSAnJztcbiAgICAgICAgdGhpcy5yZWFkT25saW5lID0gJyc7XG4gICAgfVxufVxuZXhwb3J0cy5HZXRDb21pY3NDb21pY3NPYmplY3QgPSBHZXRDb21pY3NDb21pY3NPYmplY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlLW9iamVjdHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiR2V0Q29taWNzQ29taWNzT2JqZWN0IiwiTGliZ2VuQm9va09iamVjdCIsImNvbnN0cnVjdG9yIiwidGl0bGUiLCJhdXRob3JzIiwicHVibGlzaGVyIiwieWVhciIsImVkaXRpb24iLCJ2b2x1bWUiLCJzZXJpZXMiLCJpc2JuIiwibGluayIsImlkIiwibGFuZ3VhZ2UiLCJmb3JtYXQiLCJzaXplIiwicGFnZXMiLCJpbWFnZSIsImRlc2NyaXB0aW9uIiwidGFibGVPZkNvbnRlbnRzIiwidG9waWMiLCJoYXNoZXMiLCJIYXNoZXNPYmplY3QiLCJBSUNIIiwiQ1JDMzIiLCJlRG9ua2V5IiwiTUQ1IiwiU0hBMSIsIlNIQTI1NiIsIlRUSCIsImV4Y2VycHQiLCJkb3dubG9hZCIsImNhdGVnb3J5IiwidWZpbGUiLCJtZWdhIiwibWVkaWFmaXJlIiwiemlwcHlzaGFyZSIsInJlYWRPbmxpbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/type-objects.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/types.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/types.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Topics = exports.Genres = exports.TvType = exports.SubOrSub = exports.MediaStatus = exports.StreamingServers = exports.MediaFormat = void 0;\nvar MediaFormat;\n(function(MediaFormat) {\n    MediaFormat[\"TV\"] = \"TV\";\n    MediaFormat[\"TV_SHORT\"] = \"TV_SHORT\";\n    MediaFormat[\"MOVIE\"] = \"MOVIE\";\n    MediaFormat[\"SPECIAL\"] = \"SPECIAL\";\n    MediaFormat[\"OVA\"] = \"OVA\";\n    MediaFormat[\"ONA\"] = \"ONA\";\n    MediaFormat[\"MUSIC\"] = \"MUSIC\";\n    MediaFormat[\"MANGA\"] = \"MANGA\";\n    MediaFormat[\"NOVEL\"] = \"NOVEL\";\n    MediaFormat[\"ONE_SHOT\"] = \"ONE_SHOT\";\n})(MediaFormat || (exports.MediaFormat = MediaFormat = {}));\nvar StreamingServers;\n(function(StreamingServers) {\n    StreamingServers[\"AsianLoad\"] = \"asianload\";\n    StreamingServers[\"GogoCDN\"] = \"gogocdn\";\n    StreamingServers[\"StreamSB\"] = \"streamsb\";\n    StreamingServers[\"MixDrop\"] = \"mixdrop\";\n    StreamingServers[\"Mp4Upload\"] = \"mp4upload\";\n    StreamingServers[\"UpCloud\"] = \"upcloud\";\n    StreamingServers[\"VidCloud\"] = \"vidcloud\";\n    StreamingServers[\"StreamTape\"] = \"streamtape\";\n    StreamingServers[\"VizCloud\"] = \"vizcloud\";\n    // same as vizcloud\n    StreamingServers[\"MyCloud\"] = \"mycloud\";\n    StreamingServers[\"Filemoon\"] = \"filemoon\";\n    StreamingServers[\"VidStreaming\"] = \"vidstreaming\";\n    StreamingServers[\"SmashyStream\"] = \"smashystream\";\n    StreamingServers[\"StreamHub\"] = \"streamhub\";\n    StreamingServers[\"StreamWish\"] = \"streamwish\";\n    StreamingServers[\"VidMoly\"] = \"vidmoly\";\n})(StreamingServers || (exports.StreamingServers = StreamingServers = {}));\nvar MediaStatus;\n(function(MediaStatus) {\n    MediaStatus[\"ONGOING\"] = \"Ongoing\";\n    MediaStatus[\"COMPLETED\"] = \"Completed\";\n    MediaStatus[\"HIATUS\"] = \"Hiatus\";\n    MediaStatus[\"CANCELLED\"] = \"Cancelled\";\n    MediaStatus[\"NOT_YET_AIRED\"] = \"Not yet aired\";\n    MediaStatus[\"UNKNOWN\"] = \"Unknown\";\n})(MediaStatus || (exports.MediaStatus = MediaStatus = {}));\nvar SubOrSub;\n(function(SubOrSub) {\n    SubOrSub[\"SUB\"] = \"sub\";\n    SubOrSub[\"DUB\"] = \"dub\";\n    SubOrSub[\"BOTH\"] = \"both\";\n})(SubOrSub || (exports.SubOrSub = SubOrSub = {}));\n/**\n * Used **only** for movie/tvshow providers\n */ var TvType;\n(function(TvType) {\n    TvType[\"TVSERIES\"] = \"TV Series\";\n    TvType[\"MOVIE\"] = \"Movie\";\n    TvType[\"ANIME\"] = \"Anime\";\n})(TvType || (exports.TvType = TvType = {}));\nvar Genres;\n(function(Genres) {\n    Genres[\"ACTION\"] = \"Action\";\n    Genres[\"ADVENTURE\"] = \"Adventure\";\n    Genres[\"CARS\"] = \"Cars\";\n    Genres[\"COMEDY\"] = \"Comedy\";\n    Genres[\"DRAMA\"] = \"Drama\";\n    Genres[\"FANTASY\"] = \"Fantasy\";\n    Genres[\"HORROR\"] = \"Horror\";\n    Genres[\"MAHOU_SHOUJO\"] = \"Mahou Shoujo\";\n    Genres[\"MECHA\"] = \"Mecha\";\n    Genres[\"MUSIC\"] = \"Music\";\n    Genres[\"MYSTERY\"] = \"Mystery\";\n    Genres[\"PSYCHOLOGICAL\"] = \"Psychological\";\n    Genres[\"ROMANCE\"] = \"Romance\";\n    Genres[\"SCI_FI\"] = \"Sci-Fi\";\n    Genres[\"SLICE_OF_LIFE\"] = \"Slice of Life\";\n    Genres[\"SPORTS\"] = \"Sports\";\n    Genres[\"SUPERNATURAL\"] = \"Supernatural\";\n    Genres[\"THRILLER\"] = \"Thriller\";\n})(Genres || (exports.Genres = Genres = {}));\nvar Topics;\n(function(Topics) {\n    Topics[\"ANIME\"] = \"anime\";\n    Topics[\"ANIMATION\"] = \"animation\";\n    Topics[\"MANGA\"] = \"manga\";\n    Topics[\"GAMES\"] = \"games\";\n    Topics[\"NOVELS\"] = \"novels\";\n    Topics[\"LIVE_ACTION\"] = \"live-action\";\n    Topics[\"COVID_19\"] = \"covid-19\";\n    Topics[\"INDUSTRY\"] = \"industry\";\n    Topics[\"MUSIC\"] = \"music\";\n    Topics[\"PEOPLE\"] = \"people\";\n    Topics[\"MERCH\"] = \"merch\";\n    Topics[\"EVENTS\"] = \"events\";\n})(Topics || (exports.Topics = Topics = {})); //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/video-extractor.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/video-extractor.js ***!
  \************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst proxy_1 = __importDefault(__webpack_require__(/*! ../models/proxy */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/proxy.js\"));\nclass VideoExtractor extends proxy_1.default {\n}\nexports[\"default\"] = VideoExtractor; //# sourceMappingURL=video-extractor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvbW9kZWxzL3ZpZGVvLWV4dHJhY3Rvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVVAsZ0JBQWdCUSxtQkFBT0EsQ0FBQyxxSUFBaUI7QUFDekQsTUFBTUMsdUJBQXVCRixRQUFRRyxPQUFPO0FBQzVDO0FBQ0FMLGtCQUFlLEdBQUdJLGdCQUNsQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29uc3VtZXQrZXh0ZW5zaW9uc0AxLjUuNC9ub2RlX21vZHVsZXMvQGNvbnN1bWV0L2V4dGVuc2lvbnMvZGlzdC9tb2RlbHMvdmlkZW8tZXh0cmFjdG9yLmpzP2Y3MzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBwcm94eV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9tb2RlbHMvcHJveHlcIikpO1xuY2xhc3MgVmlkZW9FeHRyYWN0b3IgZXh0ZW5kcyBwcm94eV8xLmRlZmF1bHQge1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gVmlkZW9FeHRyYWN0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWRlby1leHRyYWN0b3IuanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInByb3h5XzEiLCJyZXF1aXJlIiwiVmlkZW9FeHRyYWN0b3IiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/video-extractor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/9anime.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/9anime.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst extractors_1 = __webpack_require__(/*! ../../extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\n/**\n * **Use at your own risk :)** 9anime devs keep changing the keys every week\n */ class NineAnime extends models_1.AnimeParser {\n    constructor(nineAnimeResolver, proxyConfig, apiKey, adapter){\n        super(proxyConfig, adapter);\n        this.name = \"9Anime\";\n        this.nineAnimeResolver = \"\";\n        this.apiKey = \"\";\n        this.baseUrl = \"https://9anime.pl\";\n        this.logo = \"https://d1nxzqpcg2bym0.cloudfront.net/google_play/com.my.nineanime/87b2fe48-9c36-11eb-8292-21241b1c199b/128x128\";\n        this.classPath = \"ANIME.NineAnime\";\n        this.isWorking = false;\n        this.nineAnimeResolver = nineAnimeResolver !== null && nineAnimeResolver !== void 0 ? nineAnimeResolver : this.nineAnimeResolver;\n        this.apiKey = apiKey !== null && apiKey !== void 0 ? apiKey : this.apiKey;\n    }\n    async search(query, page = 1) {\n        const searchResult = {\n            currentPage: page,\n            hasNextPage: false,\n            results: []\n        };\n        try {\n            const vrf = await this.searchVrf(query);\n            const res = await this.client.get(`${this.baseUrl}/filter?keyword=${encodeURIComponent(query).replace(/%20/g, \"+\")}&vrf=${encodeURIComponent(vrf)}&page=${page}`);\n            const $ = (0, cheerio_1.load)(res.data);\n            searchResult.hasNextPage = $(`ul.pagination`).length > 0 ? $(\"ul.pagination > li\").last().hasClass(\"disabled\") ? false : true : false;\n            $(\"#list-items > div.item\").each((i, el)=>{\n                var _a;\n                let type = undefined;\n                switch($(el).find(\"div > div.ani > a > div.meta > div > div.right\").text().trim()){\n                    case \"MOVIE\":\n                        type = models_1.MediaFormat.MOVIE;\n                        break;\n                    case \"TV\":\n                        type = models_1.MediaFormat.TV;\n                        break;\n                    case \"OVA\":\n                        type = models_1.MediaFormat.OVA;\n                        break;\n                    case \"SPECIAL\":\n                        type = models_1.MediaFormat.SPECIAL;\n                        break;\n                    case \"ONA\":\n                        type = models_1.MediaFormat.ONA;\n                        break;\n                    case \"MUSIC\":\n                        type = models_1.MediaFormat.MUSIC;\n                        break;\n                }\n                searchResult.results.push({\n                    id: (_a = $(el).find(\"div > div.ani > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[2],\n                    title: $(el).find(\"div > div.info > div.b1 > a\").text(),\n                    url: `${this.baseUrl}${$(el).find(\"div > div.ani > a\").attr(\"href\")}`,\n                    image: $(el).find(\"div > div.ani > a > img\").attr(\"src\"),\n                    type: type,\n                    hasSub: $(el).find(\"div > div.ani > a .meta .sub\").length > 0,\n                    hasDub: $(el).find(\"div > div.ani > a .meta .dub\").length > 0\n                });\n            });\n            return searchResult;\n        } catch (err) {\n            throw new Error(err.message);\n        }\n    }\n    async fetchAnimeInfo(animeUrl) {\n        var _a, _b, _c, _d, _e;\n        if (!animeUrl.startsWith(this.baseUrl)) animeUrl = `${this.baseUrl}/watch/${animeUrl}`;\n        const animeInfo = {\n            id: \"\",\n            title: \"\",\n            url: animeUrl\n        };\n        try {\n            const res = await this.client.get(animeUrl);\n            const $ = (0, cheerio_1.load)(res.data);\n            animeInfo.id = new URL(`${this.baseUrl}/animeUrl`).pathname.split(\"/\")[2];\n            animeInfo.title = $(\"h1.title\").text();\n            animeInfo.jpTitle = $(\"h1.title\").attr(\"data-jp\");\n            animeInfo.genres = Array.from($(\"div.meta:nth-child(1) > div:nth-child(5) > span > a\").map((i, el)=>$(el).text()));\n            animeInfo.image = $(\".binfo > div.poster > span > img\").attr(\"src\");\n            animeInfo.description = (_a = $(\".content\").text()) === null || _a === void 0 ? void 0 : _a.trim();\n            switch($(\"div.meta:nth-child(1) > div:nth-child(1) > span:nth-child(1) > a\").text()){\n                case \"MOVIE\":\n                    animeInfo.type = models_1.MediaFormat.MOVIE;\n                    break;\n                case \"TV\":\n                    animeInfo.type = models_1.MediaFormat.TV;\n                    break;\n                case \"OVA\":\n                    animeInfo.type = models_1.MediaFormat.OVA;\n                    break;\n                case \"SPECIAL\":\n                    animeInfo.type = models_1.MediaFormat.SPECIAL;\n                    break;\n                case \"ONA\":\n                    animeInfo.type = models_1.MediaFormat.ONA;\n                    break;\n                case \"MUSIC\":\n                    animeInfo.type = models_1.MediaFormat.MUSIC;\n                    break;\n            }\n            animeInfo.studios = Array.from($(\"div.meta:nth-child(1) > div:nth-child(2) > span:nth-child(1) > a\").map((i, el)=>{\n                var _a;\n                return (_a = $(el).text()) === null || _a === void 0 ? void 0 : _a.trim();\n            }));\n            animeInfo.releaseDate = (_b = $(\"div.meta:nth-child(1) > div:nth-child(3) > span:nth-child(1)\").text().trim().split(\"to\")[0]) === null || _b === void 0 ? void 0 : _b.trim();\n            switch((_c = $(\"div.meta:nth-child(1) > div:nth-child(4) > span:nth-child(1)\").text()) === null || _c === void 0 ? void 0 : _c.trim()){\n                case \"Releasing\":\n                    animeInfo.status = models_1.MediaStatus.ONGOING;\n                    break;\n                case \"Completed\":\n                    animeInfo.status = models_1.MediaStatus.COMPLETED;\n                    break;\n                case \"Cancelled\":\n                    animeInfo.status = models_1.MediaStatus.CANCELLED;\n                    break;\n                case \"Unknown\":\n                    animeInfo.status = models_1.MediaStatus.UNKNOWN;\n                    break;\n                default:\n                    animeInfo.status = models_1.MediaStatus.UNKNOWN;\n                    break;\n            }\n            animeInfo.score = parseFloat((_d = $(\".bmeta > div:nth-child(2) > div:nth-child(2) > span:nth-child(1)\")) === null || _d === void 0 ? void 0 : _d.text().split(\"by\")[0]);\n            animeInfo.premiered = $(\".bmeta > div:nth-child(2) > div:nth-child(3) > span:nth-child(1) > a:nth-child(1)\").text();\n            animeInfo.duration = $(\".bmeta > div:nth-child(2) > div:nth-child(4) > span:nth-child(1)\").text();\n            animeInfo.views = parseInt($(\".bmeta > div:nth-child(2) > div:nth-child(5) > span:nth-child(1)\").text().split(\"by\").join(\"\").split(\",\").join(\"\").trim());\n            animeInfo.otherNames = $(\".names\").text().split(\"; \").map((name)=>name === null || name === void 0 ? void 0 : name.trim());\n            animeInfo.hasSub = $(\"div#w-info > .binfo > .info > .meta .sub\").length == 1;\n            animeInfo.hasDub = $(\"div#w-info > .binfo > .info > .meta .dub\").length == 1;\n            const id = $(\"#watch-main\").attr(\"data-id\");\n            const vrf = await this.ev(id);\n            const { data: { result } } = await this.client.get(`${this.baseUrl}/ajax/episode/list/${id}?vrf=${encodeURIComponent(vrf)}`);\n            const $$ = (0, cheerio_1.load)(result);\n            animeInfo.totalEpisodes = $$(\"div.episodes > ul > li > a\").length;\n            animeInfo.episodes = [];\n            const episodes = [];\n            $$(\"div.episodes > ul > li > a\").map((i, el)=>{\n                $$(el).map((i, el)=>{\n                    var _a, _b;\n                    const possibleIds = (_a = $$(el).attr(\"data-ids\")) === null || _a === void 0 ? void 0 : _a.split(\",\");\n                    const number = parseInt((_b = $$(el).attr(\"data-num\")) === null || _b === void 0 ? void 0 : _b.toString());\n                    const title = $$(el).find(\"span\").text().length > 0 ? $$(el).find(\"span\").text() : undefined;\n                    const isFiller = $$(el).hasClass(\"filler\");\n                    episodes.push({\n                        id: possibleIds[0],\n                        dubId: possibleIds[1],\n                        number: number,\n                        title: title,\n                        isFiller: isFiller\n                    });\n                }).get();\n            });\n            (_e = animeInfo.episodes) === null || _e === void 0 ? void 0 : _e.push(...episodes);\n            return animeInfo;\n        } catch (err) {\n            console.log(err);\n            throw new Error(err.message);\n        }\n    }\n    async fetchEpisodeSources(episodeId, server = models_1.StreamingServers.VizCloud) {\n        var _a, _b, _c, _d, _e, _f;\n        if (episodeId.startsWith(\"http\")) {\n            const serverUrl = new URL(episodeId);\n            switch(server){\n                case models_1.StreamingServers.StreamTape:\n                    return {\n                        headers: {\n                            Referer: serverUrl.href,\n                            \"User-Agent\": utils_1.USER_AGENT\n                        },\n                        sources: await new extractors_1.StreamTape().extract(serverUrl)\n                    };\n                case models_1.StreamingServers.VizCloud:\n                case models_1.StreamingServers.VidCloud:\n                    return {\n                        headers: {\n                            Referer: serverUrl.href,\n                            \"User-Agent\": utils_1.USER_AGENT\n                        },\n                        sources: await new extractors_1.VizCloud().extract(serverUrl, this.nineAnimeResolver, this.apiKey)\n                    };\n                case models_1.StreamingServers.MyCloud:\n                    return {\n                        headers: {\n                            Referer: serverUrl.href,\n                            \"User-Agent\": utils_1.USER_AGENT\n                        },\n                        sources: await new extractors_1.VizCloud().extract(serverUrl, this.nineAnimeResolver, this.apiKey)\n                    };\n                case models_1.StreamingServers.Filemoon:\n                    return {\n                        headers: {\n                            Referer: serverUrl.href,\n                            \"User-Agent\": utils_1.USER_AGENT\n                        },\n                        sources: await new extractors_1.Filemoon().extract(serverUrl)\n                    };\n                default:\n                    throw new Error(\"Server not supported\");\n            }\n        }\n        try {\n            const servers = await this.fetchEpisodeServers(episodeId);\n            let s = servers.find((s)=>s.name === server);\n            switch(server){\n                case models_1.StreamingServers.VizCloud:\n                    s = servers.find((s)=>s.name === \"vidstream\");\n                    if (!s) throw new Error(\"Vidstream server found\");\n                    break;\n                case models_1.StreamingServers.StreamTape:\n                    s = servers.find((s)=>s.name === \"streamtape\");\n                    if (!s) throw new Error(\"Streamtape server found\");\n                    break;\n                case models_1.StreamingServers.MyCloud:\n                    s = servers.find((s)=>s.name === \"mycloud\");\n                    if (!s) throw new Error(\"Mycloud server found\");\n                    break;\n                case models_1.StreamingServers.Filemoon:\n                    s = servers.find((s)=>s.name === \"filemoon\");\n                    if (!s) throw new Error(\"Filemoon server found\");\n                    break;\n                default:\n                    throw new Error(\"Server not found\");\n            }\n            const serverVrf = (await this.client.get(`${this.nineAnimeResolver}/vrf?query=${encodeURIComponent(s.url)}&apikey=${this.apiKey}`)).data.url;\n            const serverSource = (await this.client.get(`${this.baseUrl}/ajax/server/${s.url}?vrf=${encodeURIComponent(serverVrf)}`)).data;\n            const embedURL = (await this.client.get(`${this.nineAnimeResolver}/decrypt?query=${encodeURIComponent(serverSource.result.url)}&apikey=${this.apiKey}`)).data.url;\n            if (embedURL.startsWith(\"http\")) {\n                const response = await this.fetchEpisodeSources(embedURL, server);\n                response.embedURL = embedURL;\n                response.intro = {\n                    start: (_c = (_b = (_a = serverSource === null || serverSource === void 0 ? void 0 : serverSource.result) === null || _a === void 0 ? void 0 : _a.skip_data) === null || _b === void 0 ? void 0 : _b.intro_begin) !== null && _c !== void 0 ? _c : 0,\n                    end: (_f = (_e = (_d = serverSource === null || serverSource === void 0 ? void 0 : serverSource.result) === null || _d === void 0 ? void 0 : _d.skip_data) === null || _e === void 0 ? void 0 : _e.intro_end) !== null && _f !== void 0 ? _f : 0\n                };\n                return response;\n            } else {\n                throw new Error(\"Server did not respond correctly\");\n            }\n        } catch (err) {\n            throw new Error(err.message);\n        }\n    }\n    async fetchEpisodeServers(episodeId) {\n        if (!episodeId.startsWith(this.baseUrl)) episodeId = `${this.baseUrl}/ajax/server/list/${episodeId}?vrf=${encodeURIComponent(await this.ev(episodeId))}`;\n        const { data: { result } } = await this.client.get(episodeId);\n        const $ = (0, cheerio_1.load)(result);\n        const servers = [];\n        $(\".type > ul > li\").each((i, el)=>{\n            const serverId = $(el).attr(\"data-link-id\");\n            servers.push({\n                name: $(el).text().toLocaleLowerCase(),\n                url: `${serverId}`\n            });\n        });\n        return servers;\n    }\n    async ev(query, raw = false) {\n        const { data } = await this.client.get(`${this.nineAnimeResolver}/vrf?query=${encodeURIComponent(query)}&apikey=${this.apiKey}`);\n        if (raw) {\n            return data;\n        } else {\n            return data.url;\n        }\n    }\n    async searchVrf(query, raw = false) {\n        const { data } = await this.client.get(`${this.nineAnimeResolver}/9anime-search?query=${encodeURIComponent(query)}&apikey=${this.apiKey}`);\n        if (raw) {\n            return data;\n        } else {\n            return data.url;\n        }\n    }\n    async decrypt(query, raw = false) {\n        const { data } = await this.client.get(`${this.nineAnimeResolver}/decrypt?query=${encodeURIComponent(query)}&apikey=${this.apiKey}`);\n        if (raw) {\n            return data;\n        } else {\n            return data.url;\n        }\n    }\n    async vizcloud(query) {\n        const { data } = await this.client.get(`${this.nineAnimeResolver}/vizcloud?query=${encodeURIComponent(query)}&apikey=${this.apiKey}`);\n        return data;\n    }\n    async customRequest(query, action) {\n        const { data } = await this.client.get(`${this.nineAnimeResolver}/${action}?query=${encodeURIComponent(query)}&apikey=${this.apiKey}`);\n        return data;\n    }\n}\n// (async () => {\n//   // const nineAnime = new NineAnime();\n//   // const searchResults = await nineAnime.search('attack on titan');\n//   // const animeInfo = await nineAnime.fetchAnimeInfo('shadowverse-flame.rljqn');\n//   // @ts-ignore\n//   // const episodeSources = await nineAnime.fetchEpisodeSources(\"ab68\", \"decrypt\");\n//   // console.log(await nineAnime.vizcloud(\"LNPEK8Q0QPXW\"));\n//   // console.log(await nineAnime.decrypt(\"ab6/\", true));\n//   // console.log(await nineAnime.customRequest(\"LNPEK8Q0QPXW\", \"9anime-search\"));\n// })();\nexports[\"default\"] = NineAnime; //# sourceMappingURL=9anime.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/9anime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/anify.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/anify.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass Anify extends models_1.AnimeParser {\n    constructor(proxyConfig, adapter, providerId = \"gogoanime\"){\n        super(proxyConfig, adapter);\n        this.proxyConfig = proxyConfig;\n        this.adapter = adapter;\n        this.providerId = providerId;\n        this.name = \"Anify\";\n        this.baseUrl = \"https://api.anify.tv\";\n        this.classPath = \"ANIME.Anify\";\n        this.actions = {\n            gogoanime: {\n                format: (episodeId)=>`/${episodeId}`,\n                unformat: (episodeId)=>episodeId.replace(\"/\", \"\")\n            },\n            zoro: {\n                format: (episodeId)=>`watch/${episodeId.replace(\"$episode$\", \"?ep=\")}`,\n                unformat: (episodeId)=>episodeId.replace(\"?ep=\", \"$episode$\").split(\"watch/\")[1] + \"$sub\"\n            },\n            animepahe: {\n                format: (episodeId)=>episodeId,\n                unformat: (episodeId)=>episodeId\n            },\n            \"9anime\": {\n                format: (episodeId)=>episodeId,\n                unformat: (episodeId)=>episodeId\n            }\n        };\n        /**\n         * @param query Search query\n         * @param page Page number (optional)\n         */ this.rawSearch = async (query, page = 1)=>{\n            const { data } = await this.client.get(`${this.baseUrl}/search/anime/${query}?page=${page}`);\n            return data;\n        };\n        /**\n         * @param query Search query\n         * @param page Page number (optional)\n         */ this.search = async (query, page = 1)=>{\n            const res = {\n                currentPage: page,\n                hasNextPage: false,\n                results: []\n            };\n            const { data } = await this.client.get(`${this.baseUrl}/search-advanced?type=anime&query=${query}&page=${page}`);\n            if (data.currentPage !== res.currentPage) res.hasNextPage = true;\n            res.results = data === null || data === void 0 ? void 0 : data.map((anime)=>{\n                var _a, _b;\n                return {\n                    id: anime.id,\n                    anilistId: anime.id,\n                    title: (_b = (_a = anime.title.english) !== null && _a !== void 0 ? _a : anime.title.romaji) !== null && _b !== void 0 ? _b : anime.title.native,\n                    image: anime.coverImage,\n                    cover: anime.bannerImage,\n                    releaseDate: anime.year,\n                    description: anime.description,\n                    genres: anime.genres,\n                    rating: anime.rating.anilist,\n                    status: anime.status,\n                    mappings: anime.mappings,\n                    type: anime.type\n                };\n            });\n            return res;\n        };\n        /**\n         * @param id Anime id\n         */ this.fetchAnimeInfo = async (id)=>{\n            var _a, _b;\n            const animeInfo = {\n                id: id,\n                title: \"\"\n            };\n            const { data } = await this.client.get(`${this.baseUrl}/info/${id}`).catch(()=>{\n                throw new Error(\"Anime not found. Please use a valid id!\");\n            });\n            animeInfo.anilistId = data.id;\n            animeInfo.title = (_b = (_a = data.title.english) !== null && _a !== void 0 ? _a : data.title.romaji) !== null && _b !== void 0 ? _b : data.title.native;\n            animeInfo.image = data.coverImage;\n            animeInfo.cover = data.bannerImage;\n            animeInfo.season = data.season;\n            animeInfo.releaseDate = data.year;\n            animeInfo.duration = data.duration;\n            animeInfo.popularity = data.popularity.anilist;\n            animeInfo.description = data.description;\n            animeInfo.genres = data.genres;\n            animeInfo.rating = data.rating.anilist;\n            animeInfo.status = data.status;\n            animeInfo.synonyms = data.synonyms;\n            animeInfo.mappings = data.mappings;\n            animeInfo.type = data.type;\n            animeInfo.artwork = data.artwork;\n            const providerData = data.episodes.data.filter((e)=>e.providerId === this.providerId)[0];\n            animeInfo.episodes = providerData.episodes.map((episode)=>({\n                    id: this.actions[this.providerId].unformat(episode.id),\n                    number: episode.number,\n                    isFiller: episode.isFiller,\n                    title: episode.title,\n                    description: episode.description,\n                    image: episode.img,\n                    rating: episode.rating\n                }));\n            return animeInfo;\n        };\n        this.fetchAnimeInfoByIdRaw = async (id)=>{\n            const { data } = await this.client.get(`${this.baseUrl}/info/${id}`).catch((err)=>{\n                throw new Error(\"Backup api seems to be down! Can't fetch anime info\");\n            });\n            return data;\n        };\n        /**\n         * @param id anilist id\n         */ this.fetchAnimeInfoByAnilistId = async (id, providerId = \"gogoanime\")=>await this.fetchAnimeInfo(id);\n        this.fetchEpisodeSources = async (episodeId, episodeNumber, id)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/sources?providerId=${this.providerId}&watchId=${this.actions[this.providerId].format(episodeId)}&episodeNumber=${episodeNumber}&id=${id}&subType=sub`);\n                return data;\n            } catch (err) {\n                throw new Error(\"Episode not found!\\n\" + err);\n            }\n        };\n    }\n    /**\n     * @deprecated\n     */ fetchEpisodeServers(episodeId) {\n        throw new Error(\"Method not implemented.\");\n    }\n}\nexports[\"default\"] = Anify; // (async () => {\n //   const anify = new Anify();\n //   const res = await anify.fetchAnimeInfo('1');\n //   console.log(res);\n //   const souces = await anify.fetchEpisodeSources(res.episodes![0].id, 1, 1);\n //   console.log(souces);\n // })();\n //# sourceMappingURL=anify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/anify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/animefox.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/animefox.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst extractors_1 = __webpack_require__(/*! ../../extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nclass AnimeFox extends models_1.AnimeParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"AnimeFox\";\n        this.baseUrl = \"https://animefox.tv\";\n        this.logo = \"https://animefox.tv/assets/images/logo.png\";\n        this.classPath = \"ANIME.AnimeFox\";\n        /**\n         * @param query Search query\n         * @param page Page number (optional)\n         */ this.search = async (query, page = 1)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/search?keyword=${decodeURIComponent(query)}&page=${page}`);\n                const $ = (0, cheerio_1.load)(data);\n                const hasNextPage = $(\".pagination > nav > ul > li\").last().hasClass(\"disabled\") ? false : true;\n                const searchResults = [];\n                $(\"div.film_list-wrap > div\").each((i, el)=>{\n                    var _a;\n                    let type = undefined;\n                    switch($(el).find(\"div.fd-infor > span\").text()){\n                        case \"TV Series\":\n                            type = models_1.MediaFormat.TV;\n                            break;\n                        case \"Movie\":\n                            type = models_1.MediaFormat.MOVIE;\n                            break;\n                        case \"Special\":\n                            type = models_1.MediaFormat.SPECIAL;\n                            break;\n                        case \"OVA\":\n                            type = models_1.MediaFormat.OVA;\n                            break;\n                        default:\n                            type = models_1.MediaFormat.TV;\n                            break;\n                    }\n                    searchResults.push({\n                        id: (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.replace(\"/anime/\", \"\"),\n                        title: $(el).find(\"div.film-poster > img\").attr(\"alt\"),\n                        type: type,\n                        image: $(el).find(\"div.fd-infor > span:nth-child(1)\").text(),\n                        url: `${this.baseUrl}${$(el).find(\"div.film-poster > a\").attr(\"href\")}`,\n                        episode: parseInt($(el).find(\"div.tick-eps\").text().replace(\"EP\", \"\").trim())\n                    });\n                });\n                return {\n                    currentPage: page,\n                    hasNextPage: hasNextPage,\n                    results: searchResults\n                };\n            } catch (err) {\n                throw new Error(err);\n            }\n        };\n        /**\n         * @param id Anime id\n         */ this.fetchAnimeInfo = async (id)=>{\n            const info = {\n                id: id,\n                title: \"\"\n            };\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/anime/${id}`);\n                const $ = (0, cheerio_1.load)(data);\n                info.title = $(\"h2.film-name\").attr(\"data-jname\");\n                info.image = $(\"img.film-poster-img\").attr(\"data-src\");\n                info.description = $(\"div.anisc-info > div:nth-child(1) > div\").text().trim();\n                switch($(\"div.anisc-info > div:nth-child(8) > a\").text().trim()){\n                    case \"TV Series\":\n                        info.type = models_1.MediaFormat.TV;\n                        break;\n                    case \"Movie\":\n                        info.type = models_1.MediaFormat.MOVIE;\n                        break;\n                    case \"Special\":\n                        info.type = models_1.MediaFormat.SPECIAL;\n                        break;\n                    case \"OVA\":\n                        info.type = models_1.MediaFormat.OVA;\n                        break;\n                    default:\n                        info.type = models_1.MediaFormat.TV;\n                        break;\n                }\n                info.releaseYear = $(\"div.anisc-info > div:nth-child(7) > a\").text().trim();\n                switch($(\"div.anisc-info > div:nth-child(9) > a\").text().trim()){\n                    case \"Ongoing\":\n                        info.status = models_1.MediaStatus.ONGOING;\n                        break;\n                    case \"Completed\":\n                        info.status = models_1.MediaStatus.COMPLETED;\n                        break;\n                    case \"Upcoming\":\n                        info.status = models_1.MediaStatus.NOT_YET_AIRED;\n                        break;\n                    default:\n                        info.status = models_1.MediaStatus.UNKNOWN;\n                        break;\n                }\n                info.totalEpisodes = parseInt($(\"div.anisc-info > div:nth-child(4) > span:nth-child(2)\").text().trim());\n                info.url = `${this.baseUrl}/${id}`;\n                info.episodes = [];\n                info.hasSub = $(\"div.anisc-info > div:nth-child(3) > span:nth-child(2)\").text().trim() == \"Subbed\";\n                info.hasDub = $(\"div.anisc-info > div:nth-child(3) > span:nth-child(2)\").text().trim() == \"Dubbed\";\n                const episodes = Array.from({\n                    length: info.totalEpisodes\n                }, (_, i)=>i + 1);\n                episodes.forEach((element, i)=>{\n                    var _a;\n                    return (_a = info.episodes) === null || _a === void 0 ? void 0 : _a.push({\n                        id: `${id}-episode-${i + 1}`,\n                        number: i + 1,\n                        title: `${info.title} Episode ${i + 1}`,\n                        url: `${this.baseUrl}/watch/${id}-episode-${i + 1}`\n                    });\n                });\n                return info;\n            } catch (err) {\n                throw new Error(err);\n            }\n        };\n        /**\n         * @param page Page number\n         */ this.fetchRecentEpisodes = async (page = 1)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/latest-added?page=${page}`);\n                const $ = (0, cheerio_1.load)(data);\n                const hasNextPage = $(\".pagination > nav > ul > li\").last().hasClass(\"disabled\") ? false : true;\n                const recentEpisodes = [];\n                $(\"div.film_list-wrap > div\").each((i, el)=>{\n                    var _a;\n                    recentEpisodes.push({\n                        id: (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.replace(\"/watch/\", \"\"),\n                        image: $(el).find(\"div.film-poster > img\").attr(\"data-src\"),\n                        title: $(el).find(\"div.film-poster > img\").attr(\"alt\"),\n                        url: `${this.baseUrl}${$(el).find(\"div.film-poster > a\").attr(\"href\")}!`,\n                        episode: parseInt($(el).find(\"div.tick-eps\").text().replace(\"EP \", \"\").split(\"/\")[0])\n                    });\n                });\n                return {\n                    currentPage: page,\n                    hasNextPage: hasNextPage,\n                    results: recentEpisodes\n                };\n            } catch (err) {\n                throw new Error(\"Something went wrong. Please try again later.\");\n            }\n        };\n        /**\n         *\n         * @param episodeId episode id\n         */ this.fetchEpisodeSources = async (episodeId)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/watch/${episodeId}`);\n                const $ = (0, cheerio_1.load)(data);\n                const iframe = $(\"#iframe-to-load\").attr(\"src\") || \"\";\n                const streamUrl = `https://goload.io/streaming.php?id=${iframe.split(\"=\")[1]}`;\n                return {\n                    sources: await new extractors_1.GogoCDN(this.proxyConfig).extract(new URL(streamUrl))\n                };\n            } catch (err) {\n                console.log(err);\n                throw new Error(\"Something went wrong. Please try again later.\");\n            }\n        };\n        /**\n         * @deprecated Use fetchEpisodeSources instead\n         */ this.fetchEpisodeServers = (episodeIs)=>{\n            throw new Error(\"Method not implemented.\");\n        };\n    }\n}\nexports[\"default\"] = AnimeFox; // (async () => {\n //   const animepahe = new AnimeFox();\n //   const sources = await animepahe.fetchEpisodeSources(\n //     'youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e-tv-episode-1'\n //   );\n //   console.log(sources);\n // })();\n //# sourceMappingURL=animefox.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/animefox.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/animepahe.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/animepahe.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst extractors_1 = __webpack_require__(/*! ../../extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nclass AnimePahe extends models_1.AnimeParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"AnimePahe\";\n        this.baseUrl = \"https://animepahe.com\";\n        this.logo = \"https://animepahe.com/pikacon.ico\";\n        this.classPath = \"ANIME.AnimePahe\";\n        // private readonly sgProxy = 'https://cors.consumet.stream';\n        /**\n         * @param query Search query\n         */ this.search = async (query)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/api?m=search&q=${encodeURIComponent(query)}`);\n                const res = {\n                    results: data.data.map((item)=>({\n                            id: `${item.id}/${item.session}`,\n                            title: item.title,\n                            image: item.poster,\n                            rating: item.score,\n                            releaseDate: item.year,\n                            type: item.type\n                        }))\n                };\n                return res;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         * @param id id format id/session\n         * @param episodePage Episode page number (optional) default: -1 to get all episodes. number of episode pages can be found in the anime info object\n         */ this.fetchAnimeInfo = async (id, episodePage = -1)=>{\n            const animeInfo = {\n                id: id,\n                title: \"\"\n            };\n            try {\n                const res = await this.client.get(`${this.baseUrl}/anime/${id.split(\"/\")[1]}?anime_id=${id.split(\"/\")[0]}`);\n                const $ = (0, cheerio_1.load)(res.data);\n                animeInfo.title = $(\"div.title-wrapper > h1 > span\").first().text();\n                animeInfo.image = $(\"div.anime-poster a\").attr(\"href\");\n                animeInfo.cover = `https:${$(\"div.anime-cover\").attr(\"data-src\")}`;\n                animeInfo.description = $(\"div.anime-summary\").text();\n                animeInfo.genres = $(\"div.anime-genre ul li\").map((i, el)=>$(el).find(\"a\").attr(\"title\")).get();\n                switch($('div.col-sm-4.anime-info p:icontains(\"Status:\") a').text().trim()){\n                    case \"Currently Airing\":\n                        animeInfo.status = models_1.MediaStatus.ONGOING;\n                        break;\n                    case \"Finished Airing\":\n                        animeInfo.status = models_1.MediaStatus.COMPLETED;\n                        break;\n                    default:\n                        animeInfo.status = models_1.MediaStatus.UNKNOWN;\n                }\n                animeInfo.type = $(\"div.col-sm-4.anime-info > p:nth-child(2) > a\").text().trim().toUpperCase();\n                animeInfo.releaseDate = $(\"div.col-sm-4.anime-info > p:nth-child(5)\").text().split(\"to\")[0].replace(\"Aired:\", \"\").trim();\n                animeInfo.aired = $(\"div.col-sm-4.anime-info > p:nth-child(5)\").text().replace(\"Aired:\", \"\").trim().replace(\"\\n\", \" \");\n                animeInfo.studios = $(\"div.col-sm-4.anime-info > p:nth-child(7)\").text().replace(\"Studio:\", \"\").trim().split(\"\\n\");\n                animeInfo.totalEpisodes = parseInt($(\"div.col-sm-4.anime-info > p:nth-child(3)\").text().replace(\"Episodes:\", \"\"));\n                animeInfo.episodes = [];\n                if (episodePage < 0) {\n                    const { data: { last_page, data } } = await this.client.get(`${this.baseUrl}/api?m=release&id=${id.split(\"/\")[1]}&sort=episode_asc&page=1`);\n                    animeInfo.episodePages = last_page;\n                    animeInfo.episodes.push(...data.map((item)=>({\n                            id: `${id.split(\"/\")[1]}/${item.session}`,\n                            number: item.episode,\n                            title: item.title,\n                            image: item.snapshot,\n                            duration: item.duration,\n                            url: `${this.baseUrl}/play/${id.split(\"/\")[1]}/${item.session}`\n                        })));\n                    for(let i = 1; i < last_page; i++){\n                        animeInfo.episodes.push(...await this.fetchEpisodes(id.split(\"/\")[1], i + 1));\n                    }\n                } else {\n                    animeInfo.episodes.push(...await this.fetchEpisodes(id.split(\"/\")[1], episodePage));\n                }\n                return animeInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param episodeId episode id\n         */ this.fetchEpisodeSources = async (episodeId)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/play/${episodeId}`, {\n                    headers: {\n                        Referer: `${this.baseUrl}`\n                    }\n                });\n                const $ = (0, cheerio_1.load)(data);\n                const links = $(\"div#resolutionMenu > button\").map((i, el)=>({\n                        url: $(el).attr(\"data-src\"),\n                        quality: $(el).text(),\n                        audio: $(el).attr(\"data-audio\")\n                    }));\n                const iSource = {\n                    headers: {\n                        Referer: \"https://kwik.cx/\"\n                    },\n                    sources: []\n                };\n                for (const link of links){\n                    const res = await new extractors_1.Kwik(this.proxyConfig).extract(new URL(link.url));\n                    res[0].quality = link.quality;\n                    res[0].isDub = link.audio === \"eng\";\n                    iSource.sources.push(res[0]);\n                }\n                return iSource;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchEpisodes = async (session, page)=>{\n            const res = await this.client.get(`${this.baseUrl}/api?m=release&id=${session}&sort=episode_asc&page=${page}`);\n            const epData = res.data.data;\n            return [\n                ...epData.map((item)=>({\n                        id: item.anime_id,\n                        number: item.episode,\n                        title: item.title,\n                        image: item.snapshot,\n                        duration: item.duration,\n                        url: `${this.baseUrl}/play/${session}/${item.session}`\n                    }))\n            ];\n        };\n        /**\n         * @deprecated\n         * @attention AnimePahe doesn't support this method\n         */ this.fetchEpisodeServers = (episodeLink)=>{\n            throw new Error(\"Method not implemented.\");\n        };\n    }\n}\nexports[\"default\"] = AnimePahe; // (async () => {\n //   const animepahe = new AnimePahe();\n //\n //   const anime = await animepahe.search('Classroom of the elite');\n //   const info = await animepahe.fetchAnimeInfo(anime.results[0].id);\n //   const sources = await animepahe.fetchEpisodeSources(info.episodes![0].id);\n //   console.log(sources);\n // })();\n //# sourceMappingURL=animepahe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/animepahe.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/animesaturn.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/animesaturn.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nclass AnimeSaturn extends models_1.AnimeParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"AnimeSaturn\";\n        this.baseUrl = \"https://www.animesaturn.tv/\";\n        this.logo = \"https://www.animesaturn.tv/immagini/favicon-32x32.png\";\n        this.classPath = \"ANIME.AnimeSaturn\";\n        /**\n         * @param query Search query\n         */ this.search = async (query)=>{\n            // baseUrl/animelist?search={query}\n            const data = await this.client.get(`${this.baseUrl}animelist?search=${query}`);\n            const $ = await (0, cheerio_1.load)(data.data);\n            if (!$) return {\n                results: []\n            };\n            const res = {\n                hasNextPage: false,\n                results: []\n            };\n            $(\"ul.list-group li\").each((i, element)=>{\n                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n                const item = {\n                    id: (_e = (_d = (_c = (_b = (_a = $(element)) === null || _a === void 0 ? void 0 : _a.find(\"a.thumb\")) === null || _b === void 0 ? void 0 : _b.attr(\"href\")) === null || _c === void 0 ? void 0 : _c.split(\"/\")) === null || _d === void 0 ? void 0 : _d.pop()) !== null && _e !== void 0 ? _e : \"\",\n                    title: (_g = (_f = $(element)) === null || _f === void 0 ? void 0 : _f.find(\"h3 a\")) === null || _g === void 0 ? void 0 : _g.text(),\n                    image: (_j = (_h = $(element)) === null || _h === void 0 ? void 0 : _h.find(\"img.copertina-archivio\")) === null || _j === void 0 ? void 0 : _j.attr(\"src\"),\n                    url: (_l = (_k = $(element)) === null || _k === void 0 ? void 0 : _k.find(\"h3 a\")) === null || _l === void 0 ? void 0 : _l.attr(\"href\")\n                };\n                if (!item.id) throw new Error(\"Invalid id\");\n                res.results.push(item);\n            });\n            return res;\n        };\n        /**\n         * @param id Anime id\n         */ this.fetchAnimeInfo = async (id)=>{\n            var _a, _b, _c, _d, _e, _f, _g, _h;\n            const data = await this.client.get(`${this.baseUrl}anime/${id}`);\n            const $ = await (0, cheerio_1.load)(data.data);\n            const info = {\n                id,\n                title: $(\"div.container.anime-title-as> b\").text(),\n                malID: (_a = $('a[href^=\"https://myanimelist.net/anime/\"]').attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(30, -1),\n                alID: (_b = $('a[href^=\"https://anilist.co/anime/\"]').attr(\"href\")) === null || _b === void 0 ? void 0 : _b.slice(25, -1),\n                genres: (_d = (_c = $(\"div.container a.badge.badge-light\")) === null || _c === void 0 ? void 0 : _c.map((i, element)=>{\n                    return $(element).text();\n                }).toArray()) !== null && _d !== void 0 ? _d : undefined,\n                image: ((_e = $(\"img.img-fluid\")) === null || _e === void 0 ? void 0 : _e.attr(\"src\")) || undefined,\n                cover: ((_h = (_g = (_f = $(\"div.banner\")) === null || _f === void 0 ? void 0 : _f.attr(\"style\")) === null || _g === void 0 ? void 0 : _g.match(/background:\\s*url\\(['\"]?([^'\")]+)['\"]?\\)/i)) === null || _h === void 0 ? void 0 : _h[1]) || undefined,\n                description: $(\"#full-trama\").text(),\n                episodes: []\n            };\n            const episodes = [];\n            $(\".tab-pane.fade\").each((i, element)=>{\n                $(element).find(\".bottone-ep\").each((i, element)=>{\n                    var _a, _b;\n                    const link = $(element).attr(\"href\");\n                    const episodeNumber = $(element).text().trim().replace(\"Episodio \", \"\").trim();\n                    episodes.push({\n                        number: parseInt(episodeNumber),\n                        id: (_b = (_a = link === null || link === void 0 ? void 0 : link.split(\"/\")) === null || _a === void 0 ? void 0 : _a.pop()) !== null && _b !== void 0 ? _b : \"\"\n                    });\n                });\n            });\n            info.episodes = episodes.sort((a, b)=>a.number - b.number);\n            return info;\n        };\n        /**\n         *\n         * @param episodeId Episode id\n         */ this.fetchEpisodeSources = async (episodeId)=>{\n            var _a;\n            const fakeData = await this.client.get(`${this.baseUrl}ep/${episodeId}`);\n            const $2 = await (0, cheerio_1.load)(fakeData.data);\n            const serverOneUrl = $2(\"div > a:contains('Streaming')\").attr(\"href\"); // scrape from server 1 (m3u8 and mp4 urls)\n            if (serverOneUrl == null) throw new Error(\"Invalid url\");\n            let data = await this.client.get(serverOneUrl);\n            let $ = await (0, cheerio_1.load)(data.data);\n            const sources = {\n                headers: {},\n                subtitles: [],\n                sources: []\n            };\n            // M3U8 and MP4\n            const scriptTag = $(\"script\").filter(function() {\n                return $(this).text().includes(\"jwplayer('player_hls')\");\n            });\n            let serverOneSource;\n            // m3u8\n            scriptTag.each((i, element)=>{\n                const scriptText = $(element).text();\n                scriptText.split(\"\\n\").forEach((line)=>{\n                    if (line.includes(\"file:\") && !serverOneSource) {\n                        serverOneSource = line.split(\"file:\")[1].trim().replace(/'/g, \"\").replace(/,/g, \"\").replace(/\"/g, \"\");\n                    }\n                });\n            });\n            // mp4\n            if (!serverOneSource) {\n                serverOneSource = $(\"#myvideo > source\").attr(\"src\");\n            }\n            if (!serverOneSource) throw new Error(\"Invalid source\");\n            sources.sources.push({\n                url: serverOneSource,\n                isM3U8: serverOneSource.includes(\".m3u8\")\n            });\n            if (serverOneSource.includes(\".m3u8\")) {\n                (_a = sources.subtitles) === null || _a === void 0 ? void 0 : _a.push({\n                    url: serverOneSource.replace(\"playlist.m3u8\", \"subtitles.vtt\"),\n                    lang: \"Spanish\"\n                });\n            }\n            // STREAMTAPE\n            const serverTwoUrl = serverOneUrl + \"&server=1\"; // scrape from server 2 (streamtape)\n            data = await this.client.get(serverTwoUrl);\n            $ = await (0, cheerio_1.load)(data.data);\n            const videoUrl = $(\".embed-container > iframe\").attr(\"src\");\n            const serverTwoSource = await new utils_1.StreamTape(this.proxyConfig, this.adapter).extract(new URL(videoUrl));\n            if (!serverTwoSource) throw new Error(\"Invalid source\");\n            sources.sources.push({\n                url: serverTwoSource[0].url,\n                isM3U8: serverTwoSource[0].isM3U8\n            });\n            return sources;\n        };\n        /**\n         *\n         * @param episodeId Episode id\n         */ this.fetchEpisodeServers = (episodeId)=>{\n            throw new Error(\"Method not implemented.\");\n        };\n    }\n}\nexports[\"default\"] = AnimeSaturn; // Test this dog code\n // const animeSaturn = new AnimeSaturn();\n /*animeSaturn.search('naruto').then((res) => {\nconsole.log(res);\n\n  animeSaturn.fetchAnimeInfo(res.results[0].id).then((res) => {\n    console.log(res);\n\n    animeSaturn.fetchEpisodeSources(res?.episodes?.at(0)?.id || \"0\").then((res) => {\n      console.log(res);\n    })\n  });\n});*/  //# sourceMappingURL=animesaturn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/animesaturn.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/bilibili.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/bilibili.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst extractors_1 = __webpack_require__(/*! ../../extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nclass Bilibili extends models_1.AnimeParser {\n    constructor(cookie, locale, proxyConfig, adapter){\n        super(proxyConfig, adapter);\n        this.name = \"Bilibili\";\n        this.baseUrl = \"https://bilibili.tv\";\n        this.logo = \"https://w7.pngwing.com/pngs/656/356/png-transparent-bilibili-thumbnail-social-media-icons.png\";\n        this.classPath = \"ANIME.Bilibili\";\n        this.apiUrl = \"https://api.bilibili.tv/intl/gateway/web\";\n        this.cookie = \"\";\n        this.locale = \"en_US\";\n        this.sgProxy = \"https://cors.consumet.stream\";\n        this.locale = locale !== null && locale !== void 0 ? locale : this.locale;\n        if (!cookie) return;\n        this.cookie = cookie;\n    }\n    async search(query) {\n        var _a;\n        const { data } = await this.client.get(`${this.sgProxy}/${this.apiUrl}/v2/search?keyword=${query}&platform=web&pn=1&ps=20&qid=&s_locale=${this.locale}`, {\n            headers: {\n                cookie: this.cookie\n            }\n        });\n        if (!data.data.filter((item)=>item.module.includes(\"ogv\")).length) return {\n            results: [],\n            totalResults: 0\n        };\n        const results = data.data.find((item)=>item.module.includes(\"ogv\"));\n        return {\n            totalResults: (_a = results.items.length) !== null && _a !== void 0 ? _a : 0,\n            results: results.items.map((item)=>({\n                    id: item.season_id,\n                    title: item.title,\n                    image: item.cover,\n                    genres: item.styles.split(\" / \"),\n                    rating: item.score,\n                    view: item.view\n                }))\n        };\n    }\n    async fetchAnimeInfo(id) {\n        try {\n            const { data } = await this.client.get(`${this.sgProxy}/https://app.biliintl.com/intl/gateway/v2/ogv/view/app/season2?locale=${this.locale}&platform=android&season_id=${id}`, {\n                headers: {\n                    cookie: this.cookie\n                }\n            });\n            let counter = 1;\n            const episodes = data.data.sections.section.flatMap((section)=>section.ep_details.map((ep)=>({\n                        id: ep.episode_id.toString(),\n                        number: counter++,\n                        title: ep.long_title || ep.title,\n                        image: ep.horizontal_cover\n                    })));\n            return {\n                id,\n                title: data.data.title,\n                description: data.data.details.desc.value,\n                seasons: data.data.season_series.map((season)=>({\n                        id: season.season_id,\n                        title: season.title\n                    })),\n                recommendations: data.data.for_you.item_details.map((section)=>({\n                        id: section.season_id,\n                        title: section.title,\n                        image: section.horizontal_cover,\n                        genres: section.styles.split(\" / \"),\n                        views: section.view\n                    })),\n                subOrDub: models_1.SubOrSub.SUB,\n                episodes: episodes,\n                totalEpisodes: episodes.length\n            };\n        } catch (err) {\n            throw err;\n        }\n    }\n    async fetchEpisodeSources(episodeId, ...args) {\n        try {\n            const { data } = await this.client.get(`${this.sgProxy}/${this.apiUrl}/v2/subtitle?s_locale=${this.locale}&platform=web&episode_id=${episodeId}`, {\n                headers: {\n                    cookie: this.cookie\n                }\n            });\n            const ss = await this.client.get(`${this.sgProxy}/${this.apiUrl}/playurl?s_locale=${this.locale}&platform=web&ep_id=${episodeId}`, {\n                headers: {\n                    cookie: this.cookie\n                }\n            });\n            const sources = await new extractors_1.BilibiliExtractor().extract(episodeId);\n            return {\n                sources: sources.sources,\n                subtitles: data.data.subtitles.map((sub)=>({\n                        id: sub.subtitle_id,\n                        lang: sub.lang,\n                        url: `https://api.consumet.org/utils/bilibili/subtitle?url=${sub.url}`\n                    }))\n            };\n        } catch (err) {\n            throw err;\n        }\n    }\n    async fetchEpisodeServers(episodeId) {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n// (async () => {\n//   const source = new Bilibili();\n//   const result = await source.search('classroom of the elite');\n//   const info = await source.fetchAnimeInfo(result.results[0].id);\n//   const episode = await source.fetchEpisodeSources('10143090');\n//   console.log(episode);\n// })();\nexports[\"default\"] = Bilibili; //# sourceMappingURL=bilibili.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/bilibili.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/crunchyroll.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/crunchyroll.js ***!
  \*****************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/.pnpm/axios@0.27.2/node_modules/axios/index.js\"));\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nclass Crunchyroll extends models_1.AnimeParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"Crunchyroll\";\n        this.baseUrl = \"https://cronchy.consumet.stream\";\n        this.logo = \"https://play-lh.googleusercontent.com/CjzbMcLbmTswzCGauGQExkFsSHvwjKEeWLbVVJx0B-J9G6OQ-UCl2eOuGBfaIozFqow\";\n        this.classPath = `ANIME.${this.name}`;\n        this.locale = \"en-US\";\n        this.TOKEN = undefined;\n        this.locales = [\n            \"[ar-ME] Arabic\",\n            \"[ar-SA] Arabic (Saudi Arabia)\",\n            \"[de-DE] German\",\n            \"[en-US] English\",\n            \"[es-419] Spanish (Latin America)\",\n            \"[es-ES] Spanish (Spain)\",\n            \"[fr-FR] French\",\n            \"[he-IL] Hebrew\",\n            \"[it-IT] Italian\",\n            \"[pt-BR] Portuguese (Brazil)\",\n            \"[pt-PT] Portuguese (Portugal)\",\n            \"[pl-PL] Polish\",\n            \"[ru-RU] Russian\",\n            \"[ro-RO] Romanian\",\n            \"[sv-SE] Swedish\",\n            \"[tr-TR] Turkish\",\n            \"[uk-UK] Ukrainian\",\n            \"[zh-CN] Chinese (Simplified)\",\n            \"[zh-TW] Chinese (Traditional)\"\n        ];\n        this.subOrder = [\n            \"Subbed\",\n            \"English Dub\",\n            \"German Dub\",\n            \"French Dub\",\n            \"Spanish Dub\",\n            \"Italian Dub\",\n            \"Portuguese Dub\"\n        ];\n        /**\n         * @param query Search query\n         */ this.search = async (query)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/search/${query}`, this.options);\n                return data;\n            } catch (error) {\n                throw new Error(`Couldn't fetch data from ${this.name}`);\n            }\n        };\n        /**\n         * @param id Anime id\n         * @param mediaType Anime type (series, movie)\n         * @param fetchAllSeasons Fetch all episode seasons\n         */ this.fetchAnimeInfo = async (id, mediaType, fetchAllSeasons = false)=>{\n            if (mediaType == \"series\") {\n                const { data } = await this.client.get(`${this.baseUrl}/info/${id}?type=${mediaType}&fetchAllSeasons=${fetchAllSeasons}`, this.options);\n                return data;\n            } else {\n                throw new Error(\"Couldn't fetch data from Crunchyroll\");\n            }\n        };\n        /**\n         *\n         * @param episodeId Episode id\n         * @param format subtitle format (default: `srt`) (srt, vtt, ass)\n         * @param type Video type (default: `adaptive_hls` (m3u8)) `adaptive_dash` (dash), `drm_adaptive_dash` (dash with drm)\n         */ this.fetchEpisodeSources = async (episodeId)=>{\n            const { data } = await this.client.get(`${this.baseUrl}/episode/${episodeId}`, this.options);\n            //TODO: Add hardcoded subtitles for all languages\n            return data;\n        };\n        /**\n         *\n         * @param episodeId Episode id\n         */ this.fetchEpisodeServers = (episodeId)=>{\n            throw new Error(\"Method not implemented.\");\n        };\n    }\n    get options() {\n        var _a;\n        return {\n            headers: {\n                \"User-Agent\": utils_1.USER_AGENT,\n                Authorization: \"Bearer \" + ((_a = this.TOKEN) === null || _a === void 0 ? void 0 : _a.access_token)\n            }\n        };\n    }\n    static async create(locale, token, accessToken, proxyConfig, adapter) {\n        var _a;\n        const instance = new Crunchyroll(proxyConfig, adapter);\n        instance.TOKEN = (_a = instance.TOKEN) !== null && _a !== void 0 ? _a : (await axios_1.default.get(`${instance.baseUrl}/token`)).data;\n        return instance;\n    }\n}\nexports[\"default\"] = Crunchyroll; // (async () => {\n //   const crunchyroll = await Crunchyroll.create();\n //   const search = await crunchyroll.search('spy-x-family');\n //   const res = await crunchyroll.fetchAnimeInfo(search.results[0].id, search.results[0].type!);\n //   const sources = await crunchyroll.fetchEpisodeSources(res.episodes![res.episodes?.length! - 1].id);\n // })();\n //# sourceMappingURL=crunchyroll.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/crunchyroll.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/gogoanime.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/gogoanime.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nconst extractors_1 = __webpack_require__(/*! ../../extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nclass Gogoanime extends models_1.AnimeParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"Gogoanime\";\n        this.baseUrl = \"https://gogoanimehd.io\";\n        this.logo = \"https://play-lh.googleusercontent.com/MaGEiAEhNHAJXcXKzqTNgxqRmhuKB1rCUgb15UrN_mWUNRnLpO5T1qja64oRasO7mn0\";\n        this.classPath = \"ANIME.Gogoanime\";\n        this.ajaxUrl = \"https://ajax.gogo-load.com/ajax\";\n        /**\n         *\n         * @param query search query string\n         * @param page page number (default 1) (optional)\n         */ this.search = async (query, page = 1)=>{\n            const searchResult = {\n                currentPage: page,\n                hasNextPage: false,\n                results: []\n            };\n            try {\n                const res = await this.client.get(`${this.baseUrl}/search.html?keyword=${encodeURIComponent(query)}&page=${page}`);\n                const $ = (0, cheerio_1.load)(res.data);\n                searchResult.hasNextPage = $(\"div.anime_name.new_series > div > div > ul > li.selected\").next().length > 0;\n                $(\"div.last_episodes > ul > li\").each((i, el)=>{\n                    var _a;\n                    searchResult.results.push({\n                        id: (_a = $(el).find(\"p.name > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[2],\n                        title: $(el).find(\"p.name > a\").attr(\"title\"),\n                        url: `${this.baseUrl}/${$(el).find(\"p.name > a\").attr(\"href\")}`,\n                        image: $(el).find(\"div > a > img\").attr(\"src\"),\n                        releaseDate: $(el).find(\"p.released\").text().trim(),\n                        subOrDub: $(el).find(\"p.name > a\").text().toLowerCase().includes(\"dub\") ? models_1.SubOrSub.DUB : models_1.SubOrSub.SUB\n                    });\n                });\n                return searchResult;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param id anime id\n         */ this.fetchAnimeInfo = async (id)=>{\n            if (!id.includes(\"gogoanime\")) id = `${this.baseUrl}/category/${id}`;\n            const animeInfo = {\n                id: \"\",\n                title: \"\",\n                url: \"\",\n                genres: [],\n                totalEpisodes: 0\n            };\n            try {\n                const res = await this.client.get(id);\n                const $ = (0, cheerio_1.load)(res.data);\n                animeInfo.id = new URL(id).pathname.split(\"/\")[2];\n                animeInfo.title = $(\"section.content_left > div.main_body > div:nth-child(2) > div.anime_info_body_bg > h1\").text().trim();\n                animeInfo.url = id;\n                animeInfo.image = $(\"div.anime_info_body_bg > img\").attr(\"src\");\n                animeInfo.releaseDate = $(\"div.anime_info_body_bg > p:nth-child(7)\").text().trim().split(\"Released: \")[1];\n                animeInfo.description = $(\"div.anime_info_body_bg > p:nth-child(5)\").text().trim().replace(\"Plot Summary: \", \"\");\n                animeInfo.subOrDub = animeInfo.title.toLowerCase().includes(\"dub\") ? models_1.SubOrSub.DUB : models_1.SubOrSub.SUB;\n                animeInfo.type = $(\"div.anime_info_body_bg > p:nth-child(4) > a\").text().trim().toUpperCase();\n                animeInfo.status = models_1.MediaStatus.UNKNOWN;\n                switch($(\"div.anime_info_body_bg > p:nth-child(8) > a\").text().trim()){\n                    case \"Ongoing\":\n                        animeInfo.status = models_1.MediaStatus.ONGOING;\n                        break;\n                    case \"Completed\":\n                        animeInfo.status = models_1.MediaStatus.COMPLETED;\n                        break;\n                    case \"Upcoming\":\n                        animeInfo.status = models_1.MediaStatus.NOT_YET_AIRED;\n                        break;\n                    default:\n                        animeInfo.status = models_1.MediaStatus.UNKNOWN;\n                        break;\n                }\n                animeInfo.otherName = $(\"div.anime_info_body_bg > p:nth-child(9)\").text().replace(\"Other name: \", \"\").replace(/;/g, \",\");\n                $(\"div.anime_info_body_bg > p:nth-child(6) > a\").each((i, el)=>{\n                    var _a;\n                    (_a = animeInfo.genres) === null || _a === void 0 ? void 0 : _a.push($(el).attr(\"title\").toString());\n                });\n                const ep_start = $(\"#episode_page > li\").first().find(\"a\").attr(\"ep_start\");\n                const ep_end = $(\"#episode_page > li\").last().find(\"a\").attr(\"ep_end\");\n                const movie_id = $(\"#movie_id\").attr(\"value\");\n                const alias = $(\"#alias_anime\").attr(\"value\");\n                const html = await this.client.get(`${this.ajaxUrl}/load-list-episode?ep_start=${ep_start}&ep_end=${ep_end}&id=${movie_id}&default_ep=${0}&alias=${alias}`);\n                const $$ = (0, cheerio_1.load)(html.data);\n                animeInfo.episodes = [];\n                $$(\"#episode_related > li\").each((i, el)=>{\n                    var _a, _b, _c;\n                    (_a = animeInfo.episodes) === null || _a === void 0 ? void 0 : _a.push({\n                        id: (_b = $(el).find(\"a\").attr(\"href\")) === null || _b === void 0 ? void 0 : _b.split(\"/\")[1],\n                        number: parseFloat($(el).find(`div.name`).text().replace(\"EP \", \"\")),\n                        url: `${this.baseUrl}/${(_c = $(el).find(`a`).attr(\"href\")) === null || _c === void 0 ? void 0 : _c.trim()}`\n                    });\n                });\n                animeInfo.episodes = animeInfo.episodes.reverse();\n                animeInfo.totalEpisodes = parseInt(ep_end !== null && ep_end !== void 0 ? ep_end : \"0\");\n                return animeInfo;\n            } catch (err) {\n                throw new Error(`failed to fetch anime info: ${err}`);\n            }\n        };\n        /**\n         *\n         * @param episodeId episode id\n         * @param server server type (default 'GogoCDN') (optional)\n         */ this.fetchEpisodeSources = async (episodeId, server = models_1.StreamingServers.VidStreaming)=>{\n            if (episodeId.startsWith(\"http\")) {\n                const serverUrl = new URL(episodeId);\n                switch(server){\n                    case models_1.StreamingServers.GogoCDN:\n                        return {\n                            headers: {\n                                Referer: serverUrl.href\n                            },\n                            sources: await new extractors_1.GogoCDN(this.proxyConfig, this.adapter).extract(serverUrl),\n                            download: `https://gogohd.net/download${serverUrl.search}`\n                        };\n                    case models_1.StreamingServers.StreamSB:\n                        return {\n                            headers: {\n                                Referer: serverUrl.href,\n                                watchsb: \"streamsb\",\n                                \"User-Agent\": utils_1.USER_AGENT\n                            },\n                            sources: await new extractors_1.StreamSB(this.proxyConfig, this.adapter).extract(serverUrl),\n                            download: `https://gogohd.net/download${serverUrl.search}`\n                        };\n                    default:\n                        return {\n                            headers: {\n                                Referer: serverUrl.href\n                            },\n                            sources: await new extractors_1.GogoCDN(this.proxyConfig, this.adapter).extract(serverUrl),\n                            download: `https://gogohd.net/download${serverUrl.search}`\n                        };\n                }\n            }\n            try {\n                const res = await this.client.get(`${this.baseUrl}/${episodeId}`);\n                const $ = (0, cheerio_1.load)(res.data);\n                let serverUrl;\n                switch(server){\n                    case models_1.StreamingServers.GogoCDN:\n                        serverUrl = new URL(`${$(\"#load_anime > div > div > iframe\").attr(\"src\")}`);\n                        break;\n                    case models_1.StreamingServers.VidStreaming:\n                        serverUrl = new URL(`${$(\"div.anime_video_body > div.anime_muti_link > ul > li.vidcdn > a\").attr(\"data-video\")}`);\n                        break;\n                    case models_1.StreamingServers.StreamSB:\n                        serverUrl = new URL($(\"div.anime_video_body > div.anime_muti_link > ul > li.streamsb > a\").attr(\"data-video\"));\n                        break;\n                    default:\n                        serverUrl = new URL(`${$(\"#load_anime > div > div > iframe\").attr(\"src\")}`);\n                        break;\n                }\n                return await this.fetchEpisodeSources(serverUrl.href, server);\n            } catch (err) {\n                console.log(err);\n                throw new Error(\"Episode not found.\");\n            }\n        };\n        /**\n         *\n         * @param episodeId episode link or episode id\n         */ this.fetchEpisodeServers = async (episodeId)=>{\n            try {\n                if (!episodeId.startsWith(this.baseUrl)) episodeId = `${this.baseUrl}/${episodeId}`;\n                const res = await this.client.get(episodeId);\n                const $ = (0, cheerio_1.load)(res.data);\n                const servers = [];\n                $(\"div.anime_video_body > div.anime_muti_link > ul > li\").each((i, el)=>{\n                    let url = $(el).find(\"a\").attr(\"data-video\");\n                    if (!(url === null || url === void 0 ? void 0 : url.startsWith(\"http\"))) url = `https:${url}`;\n                    servers.push({\n                        name: $(el).find(\"a\").text().replace(\"Choose this server\", \"\").trim(),\n                        url: url\n                    });\n                });\n                return servers;\n            } catch (err) {\n                throw new Error(\"Episode not found.\");\n            }\n        };\n        /**\n         *\n         * @param episodeId episode link or episode id\n         */ this.fetchAnimeIdFromEpisodeId = async (episodeId)=>{\n            try {\n                if (!episodeId.startsWith(this.baseUrl)) episodeId = `${this.baseUrl}/${episodeId}`;\n                const res = await this.client.get(episodeId);\n                const $ = (0, cheerio_1.load)(res.data);\n                return $(\"#wrapper_bg > section > section.content_left > div:nth-child(1) > div.anime_video_body > div.anime_video_body_cate > div.anime-info > a\").attr(\"href\").split(\"/\")[2];\n            } catch (err) {\n                throw new Error(\"Episode not found.\");\n            }\n        };\n        /**\n         * @param page page number (optional)\n         * @param type type of media. (optional) (default `1`) `1`: Japanese with subtitles, `2`: english/dub with no subtitles, `3`: chinese with english subtitles\n         */ this.fetchRecentEpisodes = async (page = 1, type = 1)=>{\n            try {\n                const res = await this.client.get(`${this.ajaxUrl}/page-recent-release.html?page=${page}&type=${type}`);\n                const $ = (0, cheerio_1.load)(res.data);\n                const recentEpisodes = [];\n                $(\"div.last_episodes.loaddub > ul > li\").each((i, el)=>{\n                    var _a, _b, _c, _d;\n                    recentEpisodes.push({\n                        id: (_b = (_a = $(el).find(\"a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[1]) === null || _b === void 0 ? void 0 : _b.split(\"-episode\")[0],\n                        episodeId: (_c = $(el).find(\"a\").attr(\"href\")) === null || _c === void 0 ? void 0 : _c.split(\"/\")[1],\n                        episodeNumber: parseInt($(el).find(\"p.episode\").text().replace(\"Episode \", \"\")),\n                        title: $(el).find(\"p.name > a\").attr(\"title\"),\n                        image: $(el).find(\"div > a > img\").attr(\"src\"),\n                        url: `${this.baseUrl}${(_d = $(el).find(\"a\").attr(\"href\")) === null || _d === void 0 ? void 0 : _d.trim()}`\n                    });\n                });\n                const hasNextPage = !$(\"div.anime_name_pagination.intro > div > ul > li\").last().hasClass(\"selected\");\n                return {\n                    currentPage: page,\n                    hasNextPage: hasNextPage,\n                    results: recentEpisodes\n                };\n            } catch (err) {\n                throw new Error(\"Something went wrong. Please try again later.\");\n            }\n        };\n        this.fetchGenreInfo = async (genre, page = 1)=>{\n            try {\n                const res = await this.client.get(`${this.baseUrl}/genre/${genre}?page=${page}`);\n                const $ = (0, cheerio_1.load)(res.data);\n                const genreInfo = [];\n                $(\"div.last_episodes > ul > li\").each((i, elem)=>{\n                    var _a;\n                    genreInfo.push({\n                        id: (_a = $(elem).find(\"p.name > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[2],\n                        title: $(elem).find(\"p.name > a\").attr(\"title\"),\n                        image: $(elem).find(\"div > a > img\").attr(\"src\"),\n                        released: $(elem).find(\"p.released\").text().replace(\"Released: \", \"\").trim(),\n                        url: this.baseUrl + \"/\" + $(elem).find(\"p.name > a\").attr(\"href\")\n                    });\n                });\n                const paginatorDom = $(\"div.anime_name_pagination > div > ul > li\");\n                const hasNextPage = paginatorDom.length > 0 && !paginatorDom.last().hasClass(\"selected\");\n                return {\n                    currentPage: page,\n                    hasNextPage: hasNextPage,\n                    results: genreInfo\n                };\n            } catch (err) {\n                throw new Error(\"Something went wrong. Please try again later.\");\n            }\n        };\n        this.fetchTopAiring = async (page = 1)=>{\n            try {\n                const res = await this.client.get(`${this.ajaxUrl}/page-recent-release-ongoing.html?page=${page}`);\n                const $ = (0, cheerio_1.load)(res.data);\n                const topAiring = [];\n                $(\"div.added_series_body.popular > ul > li\").each((i, el)=>{\n                    var _a, _b;\n                    topAiring.push({\n                        id: (_a = $(el).find(\"a:nth-child(1)\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[2],\n                        title: $(el).find(\"a:nth-child(1)\").attr(\"title\"),\n                        image: (_b = $(el).find(\"a:nth-child(1) > div\").attr(\"style\")) === null || _b === void 0 ? void 0 : _b.match(\"(https?://.*.(?:png|jpg))\")[0],\n                        url: `${this.baseUrl}${$(el).find(\"a:nth-child(1)\").attr(\"href\")}`,\n                        genres: $(el).find(\"p.genres > a\").map((i, el)=>$(el).attr(\"title\")).get()\n                    });\n                });\n                const hasNextPage = !$(\"div.anime_name.comedy > div > div > ul > li\").last().hasClass(\"selected\");\n                return {\n                    currentPage: page,\n                    hasNextPage: hasNextPage,\n                    results: topAiring\n                };\n            } catch (err) {\n                throw new Error(\"Something went wrong. Please try again later.\");\n            }\n        };\n    }\n}\n// (async () => {\n//   const gogo = new Gogoanime();\n//   const search = await gogo.fetchEpisodeSources('jigokuraku-dub-episode-1');\n//   console.log(search);\n// })();\nexports[\"default\"] = Gogoanime; //# sourceMappingURL=gogoanime.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL2FuaW1lL2dvZ29hbmltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxZQUFZQyxtQkFBT0EsQ0FBQyxpR0FBUztBQUNuQyxNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyxrSUFBYztBQUN2QyxNQUFNRSxVQUFVRixtQkFBT0EsQ0FBQyxnSUFBYTtBQUNyQyxNQUFNRyxlQUFlSCxtQkFBT0EsQ0FBQywwSUFBa0I7QUFDL0MsTUFBTUksa0JBQWtCSCxTQUFTSSxXQUFXO0lBQ3hDQyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsU0FBUyxHQUFHO1FBQ2pCLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBQ2Y7Ozs7U0FJQyxHQUNELElBQUksQ0FBQ0MsTUFBTSxHQUFHLE9BQU9DLE9BQU9DLE9BQU8sQ0FBQztZQUNoQyxNQUFNQyxlQUFlO2dCQUNqQkMsYUFBYUY7Z0JBQ2JHLGFBQWE7Z0JBQ2JDLFNBQVMsRUFBRTtZQUNmO1lBQ0EsSUFBSTtnQkFDQSxNQUFNQyxNQUFNLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDYixPQUFPLENBQUMscUJBQXFCLEVBQUVjLG1CQUFtQlQsT0FBTyxNQUFNLEVBQUVDLEtBQUssQ0FBQztnQkFDakgsTUFBTVMsSUFBSSxDQUFDLEdBQUd6QixVQUFVMEIsSUFBSSxFQUFFTCxJQUFJTSxJQUFJO2dCQUN0Q1YsYUFBYUUsV0FBVyxHQUNwQk0sRUFBRSw0REFBNERHLElBQUksR0FBR0MsTUFBTSxHQUFHO2dCQUNsRkosRUFBRSwrQkFBK0JLLElBQUksQ0FBQyxDQUFDQyxHQUFHQztvQkFDdEMsSUFBSUM7b0JBQ0poQixhQUFhRyxPQUFPLENBQUNjLElBQUksQ0FBQzt3QkFDdEJDLElBQUksQ0FBQ0YsS0FBS1IsRUFBRU8sSUFBSUksSUFBSSxDQUFDLGNBQWNDLElBQUksQ0FBQyxPQUFNLE1BQU8sUUFBUUosT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHSyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7d0JBQ3RHQyxPQUFPZCxFQUFFTyxJQUFJSSxJQUFJLENBQUMsY0FBY0MsSUFBSSxDQUFDO3dCQUNyQ0csS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDOUIsT0FBTyxDQUFDLENBQUMsRUFBRWUsRUFBRU8sSUFBSUksSUFBSSxDQUFDLGNBQWNDLElBQUksQ0FBQyxRQUFRLENBQUM7d0JBQy9ESSxPQUFPaEIsRUFBRU8sSUFBSUksSUFBSSxDQUFDLGlCQUFpQkMsSUFBSSxDQUFDO3dCQUN4Q0ssYUFBYWpCLEVBQUVPLElBQUlJLElBQUksQ0FBQyxjQUFjTyxJQUFJLEdBQUdDLElBQUk7d0JBQ2pEQyxVQUFVcEIsRUFBRU8sSUFBSUksSUFBSSxDQUFDLGNBQWNPLElBQUksR0FBR0csV0FBVyxHQUFHQyxRQUFRLENBQUMsU0FDM0Q3QyxTQUFTOEMsUUFBUSxDQUFDQyxHQUFHLEdBQ3JCL0MsU0FBUzhDLFFBQVEsQ0FBQ0UsR0FBRztvQkFDL0I7Z0JBQ0o7Z0JBQ0EsT0FBT2pDO1lBQ1gsRUFDQSxPQUFPa0MsS0FBSztnQkFDUixNQUFNLElBQUlDLE1BQU1ELElBQUlFLE9BQU87WUFDL0I7UUFDSjtRQUNBOzs7U0FHQyxHQUNELElBQUksQ0FBQ0MsY0FBYyxHQUFHLE9BQU9uQjtZQUN6QixJQUFJLENBQUNBLEdBQUdZLFFBQVEsQ0FBQyxjQUNiWixLQUFLLENBQUMsRUFBRSxJQUFJLENBQUN6QixPQUFPLENBQUMsVUFBVSxFQUFFeUIsR0FBRyxDQUFDO1lBQ3pDLE1BQU1vQixZQUFZO2dCQUNkcEIsSUFBSTtnQkFDSkksT0FBTztnQkFDUEMsS0FBSztnQkFDTGdCLFFBQVEsRUFBRTtnQkFDVkMsZUFBZTtZQUNuQjtZQUNBLElBQUk7Z0JBQ0EsTUFBTXBDLE1BQU0sTUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDWTtnQkFDbEMsTUFBTVYsSUFBSSxDQUFDLEdBQUd6QixVQUFVMEIsSUFBSSxFQUFFTCxJQUFJTSxJQUFJO2dCQUN0QzRCLFVBQVVwQixFQUFFLEdBQUcsSUFBSXVCLElBQUl2QixJQUFJd0IsUUFBUSxDQUFDckIsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNqRGlCLFVBQVVoQixLQUFLLEdBQUdkLEVBQUUseUZBQ2ZrQixJQUFJLEdBQ0pDLElBQUk7Z0JBQ1RXLFVBQVVmLEdBQUcsR0FBR0w7Z0JBQ2hCb0IsVUFBVWQsS0FBSyxHQUFHaEIsRUFBRSxnQ0FBZ0NZLElBQUksQ0FBQztnQkFDekRrQixVQUFVYixXQUFXLEdBQUdqQixFQUFFLDJDQUNyQmtCLElBQUksR0FDSkMsSUFBSSxHQUNKTixLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUU7Z0JBQzNCaUIsVUFBVUssV0FBVyxHQUFHbkMsRUFBRSwyQ0FDckJrQixJQUFJLEdBQ0pDLElBQUksR0FDSmlCLE9BQU8sQ0FBQyxrQkFBa0I7Z0JBQy9CTixVQUFVVixRQUFRLEdBQUdVLFVBQVVoQixLQUFLLENBQUNPLFdBQVcsR0FBR0MsUUFBUSxDQUFDLFNBQVM3QyxTQUFTOEMsUUFBUSxDQUFDQyxHQUFHLEdBQUcvQyxTQUFTOEMsUUFBUSxDQUFDRSxHQUFHO2dCQUNsSEssVUFBVU8sSUFBSSxHQUFHckMsRUFBRSwrQ0FDZGtCLElBQUksR0FDSkMsSUFBSSxHQUNKbUIsV0FBVztnQkFDaEJSLFVBQVVTLE1BQU0sR0FBRzlELFNBQVMrRCxXQUFXLENBQUNDLE9BQU87Z0JBQy9DLE9BQVF6QyxFQUFFLCtDQUErQ2tCLElBQUksR0FBR0MsSUFBSTtvQkFDaEUsS0FBSzt3QkFDRFcsVUFBVVMsTUFBTSxHQUFHOUQsU0FBUytELFdBQVcsQ0FBQ0UsT0FBTzt3QkFDL0M7b0JBQ0osS0FBSzt3QkFDRFosVUFBVVMsTUFBTSxHQUFHOUQsU0FBUytELFdBQVcsQ0FBQ0csU0FBUzt3QkFDakQ7b0JBQ0osS0FBSzt3QkFDRGIsVUFBVVMsTUFBTSxHQUFHOUQsU0FBUytELFdBQVcsQ0FBQ0ksYUFBYTt3QkFDckQ7b0JBQ0o7d0JBQ0lkLFVBQVVTLE1BQU0sR0FBRzlELFNBQVMrRCxXQUFXLENBQUNDLE9BQU87d0JBQy9DO2dCQUNSO2dCQUNBWCxVQUFVZSxTQUFTLEdBQUc3QyxFQUFFLDJDQUNuQmtCLElBQUksR0FDSmtCLE9BQU8sQ0FBQyxnQkFBZ0IsSUFDeEJBLE9BQU8sQ0FBQyxNQUFNO2dCQUNuQnBDLEVBQUUsK0NBQStDSyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7b0JBQ3RELElBQUlDO29CQUNIQSxDQUFBQSxLQUFLc0IsVUFBVUMsTUFBTSxNQUFNLFFBQVF2QixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdDLElBQUksQ0FBQ1QsRUFBRU8sSUFBSUssSUFBSSxDQUFDLFNBQVNrQyxRQUFRO2dCQUNyRztnQkFDQSxNQUFNQyxXQUFXL0MsRUFBRSxzQkFBc0JnRCxLQUFLLEdBQUdyQyxJQUFJLENBQUMsS0FBS0MsSUFBSSxDQUFDO2dCQUNoRSxNQUFNcUMsU0FBU2pELEVBQUUsc0JBQXNCa0QsSUFBSSxHQUFHdkMsSUFBSSxDQUFDLEtBQUtDLElBQUksQ0FBQztnQkFDN0QsTUFBTXVDLFdBQVduRCxFQUFFLGFBQWFZLElBQUksQ0FBQztnQkFDckMsTUFBTXdDLFFBQVFwRCxFQUFFLGdCQUFnQlksSUFBSSxDQUFDO2dCQUNyQyxNQUFNeUMsT0FBTyxNQUFNLElBQUksQ0FBQ3hELE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNWLE9BQU8sQ0FBQyw0QkFBNEIsRUFBRTJELFNBQVMsUUFBUSxFQUFFRSxPQUFPLElBQUksRUFBRUUsU0FBUyxZQUFZLEVBQUUsRUFBRSxPQUFPLEVBQUVDLE1BQU0sQ0FBQztnQkFDMUosTUFBTUUsS0FBSyxDQUFDLEdBQUcvRSxVQUFVMEIsSUFBSSxFQUFFb0QsS0FBS25ELElBQUk7Z0JBQ3hDNEIsVUFBVXlCLFFBQVEsR0FBRyxFQUFFO2dCQUN2QkQsR0FBRyx5QkFBeUJqRCxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7b0JBQ2pDLElBQUlDLElBQUlnRCxJQUFJQztvQkFDWGpELENBQUFBLEtBQUtzQixVQUFVeUIsUUFBUSxNQUFNLFFBQVEvQyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdDLElBQUksQ0FBQzt3QkFDbkVDLElBQUksQ0FBQzhDLEtBQUt4RCxFQUFFTyxJQUFJSSxJQUFJLENBQUMsS0FBS0MsSUFBSSxDQUFDLE9BQU0sTUFBTyxRQUFRNEMsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHM0MsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUM3RjZDLFFBQVFDLFdBQVczRCxFQUFFTyxJQUFJSSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRU8sSUFBSSxHQUFHa0IsT0FBTyxDQUFDLE9BQU87d0JBQ2hFckIsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDOUIsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDd0UsS0FBS3pELEVBQUVPLElBQUlJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFQyxJQUFJLENBQUMsT0FBTSxNQUFPLFFBQVE2QyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUd0QyxJQUFJLEdBQUcsQ0FBQztvQkFDaEg7Z0JBQ0o7Z0JBQ0FXLFVBQVV5QixRQUFRLEdBQUd6QixVQUFVeUIsUUFBUSxDQUFDSyxPQUFPO2dCQUMvQzlCLFVBQVVFLGFBQWEsR0FBRzZCLFNBQVNaLFdBQVcsUUFBUUEsV0FBVyxLQUFLLElBQUlBLFNBQVM7Z0JBQ25GLE9BQU9uQjtZQUNYLEVBQ0EsT0FBT0osS0FBSztnQkFDUixNQUFNLElBQUlDLE1BQU0sQ0FBQyw0QkFBNEIsRUFBRUQsSUFBSSxDQUFDO1lBQ3hEO1FBQ0o7UUFDQTs7OztTQUlDLEdBQ0QsSUFBSSxDQUFDb0MsbUJBQW1CLEdBQUcsT0FBT0MsV0FBV0MsU0FBU3ZGLFNBQVN3RixnQkFBZ0IsQ0FBQ0MsWUFBWTtZQUN4RixJQUFJSCxVQUFVSSxVQUFVLENBQUMsU0FBUztnQkFDOUIsTUFBTUMsWUFBWSxJQUFJbkMsSUFBSThCO2dCQUMxQixPQUFRQztvQkFDSixLQUFLdkYsU0FBU3dGLGdCQUFnQixDQUFDSSxPQUFPO3dCQUNsQyxPQUFPOzRCQUNIQyxTQUFTO2dDQUFFQyxTQUFTSCxVQUFVSSxJQUFJOzRCQUFDOzRCQUNuQ0MsU0FBUyxNQUFNLElBQUk5RixhQUFhMEYsT0FBTyxDQUFDLElBQUksQ0FBQ0ssV0FBVyxFQUFFLElBQUksQ0FBQ0MsT0FBTyxFQUFFQyxPQUFPLENBQUNSOzRCQUNoRlMsVUFBVSxDQUFDLDJCQUEyQixFQUFFVCxVQUFVL0UsTUFBTSxDQUFDLENBQUM7d0JBQzlEO29CQUNKLEtBQUtaLFNBQVN3RixnQkFBZ0IsQ0FBQ2EsUUFBUTt3QkFDbkMsT0FBTzs0QkFDSFIsU0FBUztnQ0FDTEMsU0FBU0gsVUFBVUksSUFBSTtnQ0FDdkJPLFNBQVM7Z0NBQ1QsY0FBY3JHLFFBQVFzRyxVQUFVOzRCQUNwQzs0QkFDQVAsU0FBUyxNQUFNLElBQUk5RixhQUFhbUcsUUFBUSxDQUFDLElBQUksQ0FBQ0osV0FBVyxFQUFFLElBQUksQ0FBQ0MsT0FBTyxFQUFFQyxPQUFPLENBQUNSOzRCQUNqRlMsVUFBVSxDQUFDLDJCQUEyQixFQUFFVCxVQUFVL0UsTUFBTSxDQUFDLENBQUM7d0JBQzlEO29CQUNKO3dCQUNJLE9BQU87NEJBQ0hpRixTQUFTO2dDQUFFQyxTQUFTSCxVQUFVSSxJQUFJOzRCQUFDOzRCQUNuQ0MsU0FBUyxNQUFNLElBQUk5RixhQUFhMEYsT0FBTyxDQUFDLElBQUksQ0FBQ0ssV0FBVyxFQUFFLElBQUksQ0FBQ0MsT0FBTyxFQUFFQyxPQUFPLENBQUNSOzRCQUNoRlMsVUFBVSxDQUFDLDJCQUEyQixFQUFFVCxVQUFVL0UsTUFBTSxDQUFDLENBQUM7d0JBQzlEO2dCQUNSO1lBQ0o7WUFDQSxJQUFJO2dCQUNBLE1BQU1PLE1BQU0sTUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNiLE9BQU8sQ0FBQyxDQUFDLEVBQUU4RSxVQUFVLENBQUM7Z0JBQ2hFLE1BQU0vRCxJQUFJLENBQUMsR0FBR3pCLFVBQVUwQixJQUFJLEVBQUVMLElBQUlNLElBQUk7Z0JBQ3RDLElBQUlrRTtnQkFDSixPQUFRSjtvQkFDSixLQUFLdkYsU0FBU3dGLGdCQUFnQixDQUFDSSxPQUFPO3dCQUNsQ0QsWUFBWSxJQUFJbkMsSUFBSSxDQUFDLEVBQUVqQyxFQUFFLG9DQUFvQ1ksSUFBSSxDQUFDLE9BQU8sQ0FBQzt3QkFDMUU7b0JBQ0osS0FBS25DLFNBQVN3RixnQkFBZ0IsQ0FBQ0MsWUFBWTt3QkFDdkNFLFlBQVksSUFBSW5DLElBQUksQ0FBQyxFQUFFakMsRUFBRSxtRUFBbUVZLElBQUksQ0FBQyxjQUFjLENBQUM7d0JBQ2hIO29CQUNKLEtBQUtuQyxTQUFTd0YsZ0JBQWdCLENBQUNhLFFBQVE7d0JBQ25DVixZQUFZLElBQUluQyxJQUFJakMsRUFBRSxxRUFBcUVZLElBQUksQ0FBQzt3QkFDaEc7b0JBQ0o7d0JBQ0l3RCxZQUFZLElBQUluQyxJQUFJLENBQUMsRUFBRWpDLEVBQUUsb0NBQW9DWSxJQUFJLENBQUMsT0FBTyxDQUFDO3dCQUMxRTtnQkFDUjtnQkFDQSxPQUFPLE1BQU0sSUFBSSxDQUFDa0QsbUJBQW1CLENBQUNNLFVBQVVJLElBQUksRUFBRVI7WUFDMUQsRUFDQSxPQUFPdEMsS0FBSztnQkFDUnVELFFBQVFDLEdBQUcsQ0FBQ3hEO2dCQUNaLE1BQU0sSUFBSUMsTUFBTTtZQUNwQjtRQUNKO1FBQ0E7OztTQUdDLEdBQ0QsSUFBSSxDQUFDd0QsbUJBQW1CLEdBQUcsT0FBT3BCO1lBQzlCLElBQUk7Z0JBQ0EsSUFBSSxDQUFDQSxVQUFVSSxVQUFVLENBQUMsSUFBSSxDQUFDbEYsT0FBTyxHQUNsQzhFLFlBQVksQ0FBQyxFQUFFLElBQUksQ0FBQzlFLE9BQU8sQ0FBQyxDQUFDLEVBQUU4RSxVQUFVLENBQUM7Z0JBQzlDLE1BQU1uRSxNQUFNLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQ2lFO2dCQUNsQyxNQUFNL0QsSUFBSSxDQUFDLEdBQUd6QixVQUFVMEIsSUFBSSxFQUFFTCxJQUFJTSxJQUFJO2dCQUN0QyxNQUFNa0YsVUFBVSxFQUFFO2dCQUNsQnBGLEVBQUUsd0RBQXdESyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7b0JBQy9ELElBQUlRLE1BQU1mLEVBQUVPLElBQUlJLElBQUksQ0FBQyxLQUFLQyxJQUFJLENBQUM7b0JBQy9CLElBQUksQ0FBRUcsQ0FBQUEsUUFBUSxRQUFRQSxRQUFRLEtBQUssSUFBSSxLQUFLLElBQUlBLElBQUlvRCxVQUFVLENBQUMsT0FBTSxHQUNqRXBELE1BQU0sQ0FBQyxNQUFNLEVBQUVBLElBQUksQ0FBQztvQkFDeEJxRSxRQUFRM0UsSUFBSSxDQUFDO3dCQUNUekIsTUFBTWdCLEVBQUVPLElBQUlJLElBQUksQ0FBQyxLQUFLTyxJQUFJLEdBQUdrQixPQUFPLENBQUMsc0JBQXNCLElBQUlqQixJQUFJO3dCQUNuRUosS0FBS0E7b0JBQ1Q7Z0JBQ0o7Z0JBQ0EsT0FBT3FFO1lBQ1gsRUFDQSxPQUFPMUQsS0FBSztnQkFDUixNQUFNLElBQUlDLE1BQU07WUFDcEI7UUFDSjtRQUNBOzs7U0FHQyxHQUNELElBQUksQ0FBQzBELHlCQUF5QixHQUFHLE9BQU90QjtZQUNwQyxJQUFJO2dCQUNBLElBQUksQ0FBQ0EsVUFBVUksVUFBVSxDQUFDLElBQUksQ0FBQ2xGLE9BQU8sR0FDbEM4RSxZQUFZLENBQUMsRUFBRSxJQUFJLENBQUM5RSxPQUFPLENBQUMsQ0FBQyxFQUFFOEUsVUFBVSxDQUFDO2dCQUM5QyxNQUFNbkUsTUFBTSxNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUNpRTtnQkFDbEMsTUFBTS9ELElBQUksQ0FBQyxHQUFHekIsVUFBVTBCLElBQUksRUFBRUwsSUFBSU0sSUFBSTtnQkFDdEMsT0FBT0YsRUFBRSwySUFBMklZLElBQUksQ0FBQyxRQUFRQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEwsRUFDQSxPQUFPYSxLQUFLO2dCQUNSLE1BQU0sSUFBSUMsTUFBTTtZQUNwQjtRQUNKO1FBQ0E7OztTQUdDLEdBQ0QsSUFBSSxDQUFDMkQsbUJBQW1CLEdBQUcsT0FBTy9GLE9BQU8sQ0FBQyxFQUFFOEMsT0FBTyxDQUFDO1lBQ2hELElBQUk7Z0JBQ0EsTUFBTXpDLE1BQU0sTUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNWLE9BQU8sQ0FBQywrQkFBK0IsRUFBRUcsS0FBSyxNQUFNLEVBQUU4QyxLQUFLLENBQUM7Z0JBQ3RHLE1BQU1yQyxJQUFJLENBQUMsR0FBR3pCLFVBQVUwQixJQUFJLEVBQUVMLElBQUlNLElBQUk7Z0JBQ3RDLE1BQU1xRixpQkFBaUIsRUFBRTtnQkFDekJ2RixFQUFFLHVDQUF1Q0ssSUFBSSxDQUFDLENBQUNDLEdBQUdDO29CQUM5QyxJQUFJQyxJQUFJZ0QsSUFBSUMsSUFBSStCO29CQUNoQkQsZUFBZTlFLElBQUksQ0FBQzt3QkFDaEJDLElBQUksQ0FBQzhDLEtBQUssQ0FBQ2hELEtBQUtSLEVBQUVPLElBQUlJLElBQUksQ0FBQyxLQUFLQyxJQUFJLENBQUMsT0FBTSxNQUFPLFFBQVFKLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0ssS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sUUFBUTJDLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBRzNDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRTt3QkFDaktrRCxXQUFXLENBQUNOLEtBQUt6RCxFQUFFTyxJQUFJSSxJQUFJLENBQUMsS0FBS0MsSUFBSSxDQUFDLE9BQU0sTUFBTyxRQUFRNkMsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHNUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUNwRzRFLGVBQWU1QixTQUFTN0QsRUFBRU8sSUFBSUksSUFBSSxDQUFDLGFBQWFPLElBQUksR0FBR2tCLE9BQU8sQ0FBQyxZQUFZO3dCQUMzRXRCLE9BQU9kLEVBQUVPLElBQUlJLElBQUksQ0FBQyxjQUFjQyxJQUFJLENBQUM7d0JBQ3JDSSxPQUFPaEIsRUFBRU8sSUFBSUksSUFBSSxDQUFDLGlCQUFpQkMsSUFBSSxDQUFDO3dCQUN4Q0csS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDOUIsT0FBTyxDQUFDLEVBQUUsQ0FBQ3VHLEtBQUt4RixFQUFFTyxJQUFJSSxJQUFJLENBQUMsS0FBS0MsSUFBSSxDQUFDLE9BQU0sTUFBTyxRQUFRNEUsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHckUsSUFBSSxHQUFHLENBQUM7b0JBQy9HO2dCQUNKO2dCQUNBLE1BQU16QixjQUFjLENBQUNNLEVBQUUsbURBQW1Ea0QsSUFBSSxHQUFHd0MsUUFBUSxDQUFDO2dCQUMxRixPQUFPO29CQUNIakcsYUFBYUY7b0JBQ2JHLGFBQWFBO29CQUNiQyxTQUFTNEY7Z0JBQ2I7WUFDSixFQUNBLE9BQU83RCxLQUFLO2dCQUNSLE1BQU0sSUFBSUMsTUFBTTtZQUNwQjtRQUNKO1FBQ0EsSUFBSSxDQUFDZ0UsY0FBYyxHQUFHLE9BQU9DLE9BQU9yRyxPQUFPLENBQUM7WUFDeEMsSUFBSTtnQkFDQSxNQUFNSyxNQUFNLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDYixPQUFPLENBQUMsT0FBTyxFQUFFMkcsTUFBTSxNQUFNLEVBQUVyRyxLQUFLLENBQUM7Z0JBQy9FLE1BQU1TLElBQUksQ0FBQyxHQUFHekIsVUFBVTBCLElBQUksRUFBRUwsSUFBSU0sSUFBSTtnQkFDdEMsTUFBTTJGLFlBQVksRUFBRTtnQkFDcEI3RixFQUFFLCtCQUErQkssSUFBSSxDQUFDLENBQUNDLEdBQUd3RjtvQkFDdEMsSUFBSXRGO29CQUNKcUYsVUFBVXBGLElBQUksQ0FBQzt3QkFDWEMsSUFBSSxDQUFDRixLQUFLUixFQUFFOEYsTUFBTW5GLElBQUksQ0FBQyxjQUFjQyxJQUFJLENBQUMsT0FBTSxNQUFPLFFBQVFKLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0ssS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUN4R0MsT0FBT2QsRUFBRThGLE1BQU1uRixJQUFJLENBQUMsY0FBY0MsSUFBSSxDQUFDO3dCQUN2Q0ksT0FBT2hCLEVBQUU4RixNQUFNbkYsSUFBSSxDQUFDLGlCQUFpQkMsSUFBSSxDQUFDO3dCQUMxQ21GLFVBQVUvRixFQUFFOEYsTUFBTW5GLElBQUksQ0FBQyxjQUFjTyxJQUFJLEdBQUdrQixPQUFPLENBQUMsY0FBYyxJQUFJakIsSUFBSTt3QkFDMUVKLEtBQUssSUFBSSxDQUFDOUIsT0FBTyxHQUFHLE1BQU1lLEVBQUU4RixNQUFNbkYsSUFBSSxDQUFDLGNBQWNDLElBQUksQ0FBQztvQkFDOUQ7Z0JBQ0o7Z0JBQ0EsTUFBTW9GLGVBQWVoRyxFQUFFO2dCQUN2QixNQUFNTixjQUFjc0csYUFBYTVGLE1BQU0sR0FBRyxLQUFLLENBQUM0RixhQUFhOUMsSUFBSSxHQUFHd0MsUUFBUSxDQUFDO2dCQUM3RSxPQUFPO29CQUNIakcsYUFBYUY7b0JBQ2JHLGFBQWFBO29CQUNiQyxTQUFTa0c7Z0JBQ2I7WUFDSixFQUNBLE9BQU9uRSxLQUFLO2dCQUNSLE1BQU0sSUFBSUMsTUFBTTtZQUNwQjtRQUNKO1FBQ0EsSUFBSSxDQUFDc0UsY0FBYyxHQUFHLE9BQU8xRyxPQUFPLENBQUM7WUFDakMsSUFBSTtnQkFDQSxNQUFNSyxNQUFNLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDVixPQUFPLENBQUMsdUNBQXVDLEVBQUVHLEtBQUssQ0FBQztnQkFDakcsTUFBTVMsSUFBSSxDQUFDLEdBQUd6QixVQUFVMEIsSUFBSSxFQUFFTCxJQUFJTSxJQUFJO2dCQUN0QyxNQUFNZ0csWUFBWSxFQUFFO2dCQUNwQmxHLEVBQUUsMkNBQTJDSyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7b0JBQ2xELElBQUlDLElBQUlnRDtvQkFDUjBDLFVBQVV6RixJQUFJLENBQUM7d0JBQ1hDLElBQUksQ0FBQ0YsS0FBS1IsRUFBRU8sSUFBSUksSUFBSSxDQUFDLGtCQUFrQkMsSUFBSSxDQUFDLE9BQU0sTUFBTyxRQUFRSixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdLLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTt3QkFDMUdDLE9BQU9kLEVBQUVPLElBQUlJLElBQUksQ0FBQyxrQkFBa0JDLElBQUksQ0FBQzt3QkFDekNJLE9BQU8sQ0FBQ3dDLEtBQUt4RCxFQUFFTyxJQUFJSSxJQUFJLENBQUMsd0JBQXdCQyxJQUFJLENBQUMsUUFBTyxNQUFPLFFBQVE0QyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUcyQyxLQUFLLENBQUMsNEJBQTRCLENBQUMsRUFBRTt3QkFDNUlwRixLQUFLLENBQUMsRUFBRSxJQUFJLENBQUM5QixPQUFPLENBQUMsRUFBRWUsRUFBRU8sSUFBSUksSUFBSSxDQUFDLGtCQUFrQkMsSUFBSSxDQUFDLFFBQVEsQ0FBQzt3QkFDbEVtQixRQUFRL0IsRUFBRU8sSUFDTEksSUFBSSxDQUFDLGdCQUNMeUYsR0FBRyxDQUFDLENBQUM5RixHQUFHQyxLQUFPUCxFQUFFTyxJQUFJSyxJQUFJLENBQUMsVUFDMUJkLEdBQUc7b0JBQ1o7Z0JBQ0o7Z0JBQ0EsTUFBTUosY0FBYyxDQUFDTSxFQUFFLCtDQUErQ2tELElBQUksR0FBR3dDLFFBQVEsQ0FBQztnQkFDdEYsT0FBTztvQkFDSGpHLGFBQWFGO29CQUNiRyxhQUFhQTtvQkFDYkMsU0FBU3VHO2dCQUNiO1lBQ0osRUFDQSxPQUFPeEUsS0FBSztnQkFDUixNQUFNLElBQUlDLE1BQU07WUFDcEI7UUFDSjtJQUNKO0FBQ0o7QUFDQSxpQkFBaUI7QUFDakIsa0NBQWtDO0FBQ2xDLCtFQUErRTtBQUMvRSx5QkFBeUI7QUFDekIsUUFBUTtBQUNSdEQsa0JBQWUsR0FBR08sV0FDbEIscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL2FuaW1lL2dvZ29hbmltZS5qcz9kZjkyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY2hlZXJpb18xID0gcmVxdWlyZShcImNoZWVyaW9cIik7XG5jb25zdCBtb2RlbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9tb2RlbHNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3QgZXh0cmFjdG9yc18xID0gcmVxdWlyZShcIi4uLy4uL2V4dHJhY3RvcnNcIik7XG5jbGFzcyBHb2dvYW5pbWUgZXh0ZW5kcyBtb2RlbHNfMS5BbmltZVBhcnNlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdHb2dvYW5pbWUnO1xuICAgICAgICB0aGlzLmJhc2VVcmwgPSAnaHR0cHM6Ly9nb2dvYW5pbWVoZC5pbyc7XG4gICAgICAgIHRoaXMubG9nbyA9ICdodHRwczovL3BsYXktbGguZ29vZ2xldXNlcmNvbnRlbnQuY29tL01hR0VpQUVoTkhBSlhjWEt6cVROZ3hxUm1odUtCMXJDVWdiMTVVck5fbVdVTlJuTHBPNVQxcWphNjRvUmFzTzdtbjAnO1xuICAgICAgICB0aGlzLmNsYXNzUGF0aCA9ICdBTklNRS5Hb2dvYW5pbWUnO1xuICAgICAgICB0aGlzLmFqYXhVcmwgPSAnaHR0cHM6Ly9hamF4LmdvZ28tbG9hZC5jb20vYWpheCc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gcXVlcnkgc2VhcmNoIHF1ZXJ5IHN0cmluZ1xuICAgICAgICAgKiBAcGFyYW0gcGFnZSBwYWdlIG51bWJlciAoZGVmYXVsdCAxKSAob3B0aW9uYWwpXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNlYXJjaCA9IGFzeW5jIChxdWVyeSwgcGFnZSA9IDEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlYXJjaFJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTogcGFnZSxcbiAgICAgICAgICAgICAgICBoYXNOZXh0UGFnZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVzdWx0czogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQoYCR7dGhpcy5iYXNlVXJsfS9zZWFyY2guaHRtbD9rZXl3b3JkPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5KX0mcGFnZT0ke3BhZ2V9YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgJCA9ICgwLCBjaGVlcmlvXzEubG9hZCkocmVzLmRhdGEpO1xuICAgICAgICAgICAgICAgIHNlYXJjaFJlc3VsdC5oYXNOZXh0UGFnZSA9XG4gICAgICAgICAgICAgICAgICAgICQoJ2Rpdi5hbmltZV9uYW1lLm5ld19zZXJpZXMgPiBkaXYgPiBkaXYgPiB1bCA+IGxpLnNlbGVjdGVkJykubmV4dCgpLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAgICAgJCgnZGl2Lmxhc3RfZXBpc29kZXMgPiB1bCA+IGxpJykuZWFjaCgoaSwgZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2hSZXN1bHQucmVzdWx0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAoX2EgPSAkKGVsKS5maW5kKCdwLm5hbWUgPiBhJykuYXR0cignaHJlZicpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3BsaXQoJy8nKVsyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAkKGVsKS5maW5kKCdwLm5hbWUgPiBhJykuYXR0cigndGl0bGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYCR7dGhpcy5iYXNlVXJsfS8keyQoZWwpLmZpbmQoJ3AubmFtZSA+IGEnKS5hdHRyKCdocmVmJyl9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiAkKGVsKS5maW5kKCdkaXYgPiBhID4gaW1nJykuYXR0cignc3JjJyksXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxlYXNlRGF0ZTogJChlbCkuZmluZCgncC5yZWxlYXNlZCcpLnRleHQoKS50cmltKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJPckR1YjogJChlbCkuZmluZCgncC5uYW1lID4gYScpLnRleHQoKS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdkdWInKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbW9kZWxzXzEuU3ViT3JTdWIuRFVCXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBtb2RlbHNfMS5TdWJPclN1Yi5TVUIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWFyY2hSZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBpZCBhbmltZSBpZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mZXRjaEFuaW1lSW5mbyA9IGFzeW5jIChpZCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpZC5pbmNsdWRlcygnZ29nb2FuaW1lJykpXG4gICAgICAgICAgICAgICAgaWQgPSBgJHt0aGlzLmJhc2VVcmx9L2NhdGVnb3J5LyR7aWR9YDtcbiAgICAgICAgICAgIGNvbnN0IGFuaW1lSW5mbyA9IHtcbiAgICAgICAgICAgICAgICBpZDogJycsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICcnLFxuICAgICAgICAgICAgICAgIHVybDogJycsXG4gICAgICAgICAgICAgICAgZ2VucmVzOiBbXSxcbiAgICAgICAgICAgICAgICB0b3RhbEVwaXNvZGVzOiAwLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jbGllbnQuZ2V0KGlkKTtcbiAgICAgICAgICAgICAgICBjb25zdCAkID0gKDAsIGNoZWVyaW9fMS5sb2FkKShyZXMuZGF0YSk7XG4gICAgICAgICAgICAgICAgYW5pbWVJbmZvLmlkID0gbmV3IFVSTChpZCkucGF0aG5hbWUuc3BsaXQoJy8nKVsyXTtcbiAgICAgICAgICAgICAgICBhbmltZUluZm8udGl0bGUgPSAkKCdzZWN0aW9uLmNvbnRlbnRfbGVmdCA+IGRpdi5tYWluX2JvZHkgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2LmFuaW1lX2luZm9fYm9keV9iZyA+IGgxJylcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoKVxuICAgICAgICAgICAgICAgICAgICAudHJpbSgpO1xuICAgICAgICAgICAgICAgIGFuaW1lSW5mby51cmwgPSBpZDtcbiAgICAgICAgICAgICAgICBhbmltZUluZm8uaW1hZ2UgPSAkKCdkaXYuYW5pbWVfaW5mb19ib2R5X2JnID4gaW1nJykuYXR0cignc3JjJyk7XG4gICAgICAgICAgICAgICAgYW5pbWVJbmZvLnJlbGVhc2VEYXRlID0gJCgnZGl2LmFuaW1lX2luZm9fYm9keV9iZyA+IHA6bnRoLWNoaWxkKDcpJylcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoKVxuICAgICAgICAgICAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnUmVsZWFzZWQ6ICcpWzFdO1xuICAgICAgICAgICAgICAgIGFuaW1lSW5mby5kZXNjcmlwdGlvbiA9ICQoJ2Rpdi5hbmltZV9pbmZvX2JvZHlfYmcgPiBwOm50aC1jaGlsZCg1KScpXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0KClcbiAgICAgICAgICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnUGxvdCBTdW1tYXJ5OiAnLCAnJyk7XG4gICAgICAgICAgICAgICAgYW5pbWVJbmZvLnN1Yk9yRHViID0gYW5pbWVJbmZvLnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2R1YicpID8gbW9kZWxzXzEuU3ViT3JTdWIuRFVCIDogbW9kZWxzXzEuU3ViT3JTdWIuU1VCO1xuICAgICAgICAgICAgICAgIGFuaW1lSW5mby50eXBlID0gJCgnZGl2LmFuaW1lX2luZm9fYm9keV9iZyA+IHA6bnRoLWNoaWxkKDQpID4gYScpXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0KClcbiAgICAgICAgICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBhbmltZUluZm8uc3RhdHVzID0gbW9kZWxzXzEuTWVkaWFTdGF0dXMuVU5LTk9XTjtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKCQoJ2Rpdi5hbmltZV9pbmZvX2JvZHlfYmcgPiBwOm50aC1jaGlsZCg4KSA+IGEnKS50ZXh0KCkudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ09uZ29pbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWVJbmZvLnN0YXR1cyA9IG1vZGVsc18xLk1lZGlhU3RhdHVzLk9OR09JTkc7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQ29tcGxldGVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1lSW5mby5zdGF0dXMgPSBtb2RlbHNfMS5NZWRpYVN0YXR1cy5DT01QTEVURUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVXBjb21pbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWVJbmZvLnN0YXR1cyA9IG1vZGVsc18xLk1lZGlhU3RhdHVzLk5PVF9ZRVRfQUlSRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1lSW5mby5zdGF0dXMgPSBtb2RlbHNfMS5NZWRpYVN0YXR1cy5VTktOT1dOO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFuaW1lSW5mby5vdGhlck5hbWUgPSAkKCdkaXYuYW5pbWVfaW5mb19ib2R5X2JnID4gcDpudGgtY2hpbGQoOSknKVxuICAgICAgICAgICAgICAgICAgICAudGV4dCgpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdPdGhlciBuYW1lOiAnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLzsvZywgJywnKTtcbiAgICAgICAgICAgICAgICAkKCdkaXYuYW5pbWVfaW5mb19ib2R5X2JnID4gcDpudGgtY2hpbGQoNikgPiBhJykuZWFjaCgoaSwgZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBhbmltZUluZm8uZ2VucmVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHVzaCgkKGVsKS5hdHRyKCd0aXRsZScpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVwX3N0YXJ0ID0gJCgnI2VwaXNvZGVfcGFnZSA+IGxpJykuZmlyc3QoKS5maW5kKCdhJykuYXR0cignZXBfc3RhcnQnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlcF9lbmQgPSAkKCcjZXBpc29kZV9wYWdlID4gbGknKS5sYXN0KCkuZmluZCgnYScpLmF0dHIoJ2VwX2VuZCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vdmllX2lkID0gJCgnI21vdmllX2lkJykuYXR0cigndmFsdWUnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhbGlhcyA9ICQoJyNhbGlhc19hbmltZScpLmF0dHIoJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IHRoaXMuY2xpZW50LmdldChgJHt0aGlzLmFqYXhVcmx9L2xvYWQtbGlzdC1lcGlzb2RlP2VwX3N0YXJ0PSR7ZXBfc3RhcnR9JmVwX2VuZD0ke2VwX2VuZH0maWQ9JHttb3ZpZV9pZH0mZGVmYXVsdF9lcD0kezB9JmFsaWFzPSR7YWxpYXN9YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgJCQgPSAoMCwgY2hlZXJpb18xLmxvYWQpKGh0bWwuZGF0YSk7XG4gICAgICAgICAgICAgICAgYW5pbWVJbmZvLmVwaXNvZGVzID0gW107XG4gICAgICAgICAgICAgICAgJCQoJyNlcGlzb2RlX3JlbGF0ZWQgPiBsaScpLmVhY2goKGksIGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBhbmltZUluZm8uZXBpc29kZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAoX2IgPSAkKGVsKS5maW5kKCdhJykuYXR0cignaHJlZicpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc3BsaXQoJy8nKVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlcjogcGFyc2VGbG9hdCgkKGVsKS5maW5kKGBkaXYubmFtZWApLnRleHQoKS5yZXBsYWNlKCdFUCAnLCAnJykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBgJHt0aGlzLmJhc2VVcmx9LyR7KF9jID0gJChlbCkuZmluZChgYWApLmF0dHIoJ2hyZWYnKSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnRyaW0oKX1gLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhbmltZUluZm8uZXBpc29kZXMgPSBhbmltZUluZm8uZXBpc29kZXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIGFuaW1lSW5mby50b3RhbEVwaXNvZGVzID0gcGFyc2VJbnQoZXBfZW5kICE9PSBudWxsICYmIGVwX2VuZCAhPT0gdm9pZCAwID8gZXBfZW5kIDogJzAnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5pbWVJbmZvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZmFpbGVkIHRvIGZldGNoIGFuaW1lIGluZm86ICR7ZXJyfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGVwaXNvZGVJZCBlcGlzb2RlIGlkXG4gICAgICAgICAqIEBwYXJhbSBzZXJ2ZXIgc2VydmVyIHR5cGUgKGRlZmF1bHQgJ0dvZ29DRE4nKSAob3B0aW9uYWwpXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZldGNoRXBpc29kZVNvdXJjZXMgPSBhc3luYyAoZXBpc29kZUlkLCBzZXJ2ZXIgPSBtb2RlbHNfMS5TdHJlYW1pbmdTZXJ2ZXJzLlZpZFN0cmVhbWluZykgPT4ge1xuICAgICAgICAgICAgaWYgKGVwaXNvZGVJZC5zdGFydHNXaXRoKCdodHRwJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXJ2ZXJVcmwgPSBuZXcgVVJMKGVwaXNvZGVJZCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBtb2RlbHNfMS5TdHJlYW1pbmdTZXJ2ZXJzLkdvZ29DRE46XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgUmVmZXJlcjogc2VydmVyVXJsLmhyZWYgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBhd2FpdCBuZXcgZXh0cmFjdG9yc18xLkdvZ29DRE4odGhpcy5wcm94eUNvbmZpZywgdGhpcy5hZGFwdGVyKS5leHRyYWN0KHNlcnZlclVybCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWQ6IGBodHRwczovL2dvZ29oZC5uZXQvZG93bmxvYWQke3NlcnZlclVybC5zZWFyY2h9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgbW9kZWxzXzEuU3RyZWFtaW5nU2VydmVycy5TdHJlYW1TQjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWZlcmVyOiBzZXJ2ZXJVcmwuaHJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2F0Y2hzYjogJ3N0cmVhbXNiJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiB1dGlsc18xLlVTRVJfQUdFTlQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBhd2FpdCBuZXcgZXh0cmFjdG9yc18xLlN0cmVhbVNCKHRoaXMucHJveHlDb25maWcsIHRoaXMuYWRhcHRlcikuZXh0cmFjdChzZXJ2ZXJVcmwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkOiBgaHR0cHM6Ly9nb2dvaGQubmV0L2Rvd25sb2FkJHtzZXJ2ZXJVcmwuc2VhcmNofWAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7IFJlZmVyZXI6IHNlcnZlclVybC5ocmVmIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlczogYXdhaXQgbmV3IGV4dHJhY3RvcnNfMS5Hb2dvQ0ROKHRoaXMucHJveHlDb25maWcsIHRoaXMuYWRhcHRlcikuZXh0cmFjdChzZXJ2ZXJVcmwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkOiBgaHR0cHM6Ly9nb2dvaGQubmV0L2Rvd25sb2FkJHtzZXJ2ZXJVcmwuc2VhcmNofWAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jbGllbnQuZ2V0KGAke3RoaXMuYmFzZVVybH0vJHtlcGlzb2RlSWR9YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgJCA9ICgwLCBjaGVlcmlvXzEubG9hZCkocmVzLmRhdGEpO1xuICAgICAgICAgICAgICAgIGxldCBzZXJ2ZXJVcmw7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBtb2RlbHNfMS5TdHJlYW1pbmdTZXJ2ZXJzLkdvZ29DRE46XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJVcmwgPSBuZXcgVVJMKGAkeyQoJyNsb2FkX2FuaW1lID4gZGl2ID4gZGl2ID4gaWZyYW1lJykuYXR0cignc3JjJyl9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBtb2RlbHNfMS5TdHJlYW1pbmdTZXJ2ZXJzLlZpZFN0cmVhbWluZzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlclVybCA9IG5ldyBVUkwoYCR7JCgnZGl2LmFuaW1lX3ZpZGVvX2JvZHkgPiBkaXYuYW5pbWVfbXV0aV9saW5rID4gdWwgPiBsaS52aWRjZG4gPiBhJykuYXR0cignZGF0YS12aWRlbycpfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgbW9kZWxzXzEuU3RyZWFtaW5nU2VydmVycy5TdHJlYW1TQjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlclVybCA9IG5ldyBVUkwoJCgnZGl2LmFuaW1lX3ZpZGVvX2JvZHkgPiBkaXYuYW5pbWVfbXV0aV9saW5rID4gdWwgPiBsaS5zdHJlYW1zYiA+IGEnKS5hdHRyKCdkYXRhLXZpZGVvJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJVcmwgPSBuZXcgVVJMKGAkeyQoJyNsb2FkX2FuaW1lID4gZGl2ID4gZGl2ID4gaWZyYW1lJykuYXR0cignc3JjJyl9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmV0Y2hFcGlzb2RlU291cmNlcyhzZXJ2ZXJVcmwuaHJlZiwgc2VydmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXBpc29kZSBub3QgZm91bmQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gZXBpc29kZUlkIGVwaXNvZGUgbGluayBvciBlcGlzb2RlIGlkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZldGNoRXBpc29kZVNlcnZlcnMgPSBhc3luYyAoZXBpc29kZUlkKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghZXBpc29kZUlkLnN0YXJ0c1dpdGgodGhpcy5iYXNlVXJsKSlcbiAgICAgICAgICAgICAgICAgICAgZXBpc29kZUlkID0gYCR7dGhpcy5iYXNlVXJsfS8ke2VwaXNvZGVJZH1gO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY2xpZW50LmdldChlcGlzb2RlSWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0ICQgPSAoMCwgY2hlZXJpb18xLmxvYWQpKHJlcy5kYXRhKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXJ2ZXJzID0gW107XG4gICAgICAgICAgICAgICAgJCgnZGl2LmFuaW1lX3ZpZGVvX2JvZHkgPiBkaXYuYW5pbWVfbXV0aV9saW5rID4gdWwgPiBsaScpLmVhY2goKGksIGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSAkKGVsKS5maW5kKCdhJykuYXR0cignZGF0YS12aWRlbycpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoISh1cmwgPT09IG51bGwgfHwgdXJsID09PSB2b2lkIDAgPyB2b2lkIDAgOiB1cmwuc3RhcnRzV2l0aCgnaHR0cCcpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IGBodHRwczoke3VybH1gO1xuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJChlbCkuZmluZCgnYScpLnRleHQoKS5yZXBsYWNlKCdDaG9vc2UgdGhpcyBzZXJ2ZXInLCAnJykudHJpbSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2ZXJzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXBpc29kZSBub3QgZm91bmQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gZXBpc29kZUlkIGVwaXNvZGUgbGluayBvciBlcGlzb2RlIGlkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZldGNoQW5pbWVJZEZyb21FcGlzb2RlSWQgPSBhc3luYyAoZXBpc29kZUlkKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghZXBpc29kZUlkLnN0YXJ0c1dpdGgodGhpcy5iYXNlVXJsKSlcbiAgICAgICAgICAgICAgICAgICAgZXBpc29kZUlkID0gYCR7dGhpcy5iYXNlVXJsfS8ke2VwaXNvZGVJZH1gO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY2xpZW50LmdldChlcGlzb2RlSWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0ICQgPSAoMCwgY2hlZXJpb18xLmxvYWQpKHJlcy5kYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJCgnI3dyYXBwZXJfYmcgPiBzZWN0aW9uID4gc2VjdGlvbi5jb250ZW50X2xlZnQgPiBkaXY6bnRoLWNoaWxkKDEpID4gZGl2LmFuaW1lX3ZpZGVvX2JvZHkgPiBkaXYuYW5pbWVfdmlkZW9fYm9keV9jYXRlID4gZGl2LmFuaW1lLWluZm8gPiBhJykuYXR0cignaHJlZicpLnNwbGl0KCcvJylbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcGlzb2RlIG5vdCBmb3VuZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSBwYWdlIHBhZ2UgbnVtYmVyIChvcHRpb25hbClcbiAgICAgICAgICogQHBhcmFtIHR5cGUgdHlwZSBvZiBtZWRpYS4gKG9wdGlvbmFsKSAoZGVmYXVsdCBgMWApIGAxYDogSmFwYW5lc2Ugd2l0aCBzdWJ0aXRsZXMsIGAyYDogZW5nbGlzaC9kdWIgd2l0aCBubyBzdWJ0aXRsZXMsIGAzYDogY2hpbmVzZSB3aXRoIGVuZ2xpc2ggc3VidGl0bGVzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZldGNoUmVjZW50RXBpc29kZXMgPSBhc3luYyAocGFnZSA9IDEsIHR5cGUgPSAxKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY2xpZW50LmdldChgJHt0aGlzLmFqYXhVcmx9L3BhZ2UtcmVjZW50LXJlbGVhc2UuaHRtbD9wYWdlPSR7cGFnZX0mdHlwZT0ke3R5cGV9YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgJCA9ICgwLCBjaGVlcmlvXzEubG9hZCkocmVzLmRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlY2VudEVwaXNvZGVzID0gW107XG4gICAgICAgICAgICAgICAgJCgnZGl2Lmxhc3RfZXBpc29kZXMubG9hZGR1YiA+IHVsID4gbGknKS5lYWNoKChpLCBlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgICAgICAgICAgICAgIHJlY2VudEVwaXNvZGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IChfYiA9IChfYSA9ICQoZWwpLmZpbmQoJ2EnKS5hdHRyKCdocmVmJykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zcGxpdCgnLycpWzFdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc3BsaXQoJy1lcGlzb2RlJylbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBlcGlzb2RlSWQ6IChfYyA9ICQoZWwpLmZpbmQoJ2EnKS5hdHRyKCdocmVmJykpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5zcGxpdCgnLycpWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXBpc29kZU51bWJlcjogcGFyc2VJbnQoJChlbCkuZmluZCgncC5lcGlzb2RlJykudGV4dCgpLnJlcGxhY2UoJ0VwaXNvZGUgJywgJycpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAkKGVsKS5maW5kKCdwLm5hbWUgPiBhJykuYXR0cigndGl0bGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiAkKGVsKS5maW5kKCdkaXYgPiBhID4gaW1nJykuYXR0cignc3JjJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGAke3RoaXMuYmFzZVVybH0keyhfZCA9ICQoZWwpLmZpbmQoJ2EnKS5hdHRyKCdocmVmJykpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC50cmltKCl9YCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzTmV4dFBhZ2UgPSAhJCgnZGl2LmFuaW1lX25hbWVfcGFnaW5hdGlvbi5pbnRybyA+IGRpdiA+IHVsID4gbGknKS5sYXN0KCkuaGFzQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhZ2U6IHBhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGhhc05leHRQYWdlOiBoYXNOZXh0UGFnZSxcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0czogcmVjZW50RXBpc29kZXMsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NvbWV0aGluZyB3ZW50IHdyb25nLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmZldGNoR2VucmVJbmZvID0gYXN5bmMgKGdlbnJlLCBwYWdlID0gMSkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQoYCR7dGhpcy5iYXNlVXJsfS9nZW5yZS8ke2dlbnJlfT9wYWdlPSR7cGFnZX1gKTtcbiAgICAgICAgICAgICAgICBjb25zdCAkID0gKDAsIGNoZWVyaW9fMS5sb2FkKShyZXMuZGF0YSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2VucmVJbmZvID0gW107XG4gICAgICAgICAgICAgICAgJCgnZGl2Lmxhc3RfZXBpc29kZXMgPiB1bCA+IGxpJykuZWFjaCgoaSwgZWxlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIGdlbnJlSW5mby5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAoX2EgPSAkKGVsZW0pLmZpbmQoJ3AubmFtZSA+IGEnKS5hdHRyKCdocmVmJykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zcGxpdCgnLycpWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICQoZWxlbSkuZmluZCgncC5uYW1lID4gYScpLmF0dHIoJ3RpdGxlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTogJChlbGVtKS5maW5kKCdkaXYgPiBhID4gaW1nJykuYXR0cignc3JjJyksXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxlYXNlZDogJChlbGVtKS5maW5kKCdwLnJlbGVhc2VkJykudGV4dCgpLnJlcGxhY2UoJ1JlbGVhc2VkOiAnLCAnJykudHJpbSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB0aGlzLmJhc2VVcmwgKyAnLycgKyAkKGVsZW0pLmZpbmQoJ3AubmFtZSA+IGEnKS5hdHRyKCdocmVmJyksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2luYXRvckRvbSA9ICQoJ2Rpdi5hbmltZV9uYW1lX3BhZ2luYXRpb24gPiBkaXYgPiB1bCA+IGxpJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzTmV4dFBhZ2UgPSBwYWdpbmF0b3JEb20ubGVuZ3RoID4gMCAmJiAhcGFnaW5hdG9yRG9tLmxhc3QoKS5oYXNDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTogcGFnZSxcbiAgICAgICAgICAgICAgICAgICAgaGFzTmV4dFBhZ2U6IGhhc05leHRQYWdlLFxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzOiBnZW5yZUluZm8sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NvbWV0aGluZyB3ZW50IHdyb25nLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmZldGNoVG9wQWlyaW5nID0gYXN5bmMgKHBhZ2UgPSAxKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY2xpZW50LmdldChgJHt0aGlzLmFqYXhVcmx9L3BhZ2UtcmVjZW50LXJlbGVhc2Utb25nb2luZy5odG1sP3BhZ2U9JHtwYWdlfWApO1xuICAgICAgICAgICAgICAgIGNvbnN0ICQgPSAoMCwgY2hlZXJpb18xLmxvYWQpKHJlcy5kYXRhKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b3BBaXJpbmcgPSBbXTtcbiAgICAgICAgICAgICAgICAkKCdkaXYuYWRkZWRfc2VyaWVzX2JvZHkucG9wdWxhciA+IHVsID4gbGknKS5lYWNoKChpLCBlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgICAgICB0b3BBaXJpbmcucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogKF9hID0gJChlbCkuZmluZCgnYTpudGgtY2hpbGQoMSknKS5hdHRyKCdocmVmJykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zcGxpdCgnLycpWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICQoZWwpLmZpbmQoJ2E6bnRoLWNoaWxkKDEpJykuYXR0cigndGl0bGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiAoX2IgPSAkKGVsKS5maW5kKCdhOm50aC1jaGlsZCgxKSA+IGRpdicpLmF0dHIoJ3N0eWxlJykpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5tYXRjaCgnKGh0dHBzPzovLy4qLig/OnBuZ3xqcGcpKScpWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBgJHt0aGlzLmJhc2VVcmx9JHskKGVsKS5maW5kKCdhOm50aC1jaGlsZCgxKScpLmF0dHIoJ2hyZWYnKX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VucmVzOiAkKGVsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCdwLmdlbnJlcyA+IGEnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKGksIGVsKSA9PiAkKGVsKS5hdHRyKCd0aXRsZScpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzTmV4dFBhZ2UgPSAhJCgnZGl2LmFuaW1lX25hbWUuY29tZWR5ID4gZGl2ID4gZGl2ID4gdWwgPiBsaScpLmxhc3QoKS5oYXNDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTogcGFnZSxcbiAgICAgICAgICAgICAgICAgICAgaGFzTmV4dFBhZ2U6IGhhc05leHRQYWdlLFxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzOiB0b3BBaXJpbmcsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NvbWV0aGluZyB3ZW50IHdyb25nLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn1cbi8vIChhc3luYyAoKSA9PiB7XG4vLyAgIGNvbnN0IGdvZ28gPSBuZXcgR29nb2FuaW1lKCk7XG4vLyAgIGNvbnN0IHNlYXJjaCA9IGF3YWl0IGdvZ28uZmV0Y2hFcGlzb2RlU291cmNlcygnamlnb2t1cmFrdS1kdWItZXBpc29kZS0xJyk7XG4vLyAgIGNvbnNvbGUubG9nKHNlYXJjaCk7XG4vLyB9KSgpO1xuZXhwb3J0cy5kZWZhdWx0ID0gR29nb2FuaW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z29nb2FuaW1lLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNoZWVyaW9fMSIsInJlcXVpcmUiLCJtb2RlbHNfMSIsInV0aWxzXzEiLCJleHRyYWN0b3JzXzEiLCJHb2dvYW5pbWUiLCJBbmltZVBhcnNlciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwibmFtZSIsImJhc2VVcmwiLCJsb2dvIiwiY2xhc3NQYXRoIiwiYWpheFVybCIsInNlYXJjaCIsInF1ZXJ5IiwicGFnZSIsInNlYXJjaFJlc3VsdCIsImN1cnJlbnRQYWdlIiwiaGFzTmV4dFBhZ2UiLCJyZXN1bHRzIiwicmVzIiwiY2xpZW50IiwiZ2V0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiJCIsImxvYWQiLCJkYXRhIiwibmV4dCIsImxlbmd0aCIsImVhY2giLCJpIiwiZWwiLCJfYSIsInB1c2giLCJpZCIsImZpbmQiLCJhdHRyIiwic3BsaXQiLCJ0aXRsZSIsInVybCIsImltYWdlIiwicmVsZWFzZURhdGUiLCJ0ZXh0IiwidHJpbSIsInN1Yk9yRHViIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsIlN1Yk9yU3ViIiwiRFVCIiwiU1VCIiwiZXJyIiwiRXJyb3IiLCJtZXNzYWdlIiwiZmV0Y2hBbmltZUluZm8iLCJhbmltZUluZm8iLCJnZW5yZXMiLCJ0b3RhbEVwaXNvZGVzIiwiVVJMIiwicGF0aG5hbWUiLCJkZXNjcmlwdGlvbiIsInJlcGxhY2UiLCJ0eXBlIiwidG9VcHBlckNhc2UiLCJzdGF0dXMiLCJNZWRpYVN0YXR1cyIsIlVOS05PV04iLCJPTkdPSU5HIiwiQ09NUExFVEVEIiwiTk9UX1lFVF9BSVJFRCIsIm90aGVyTmFtZSIsInRvU3RyaW5nIiwiZXBfc3RhcnQiLCJmaXJzdCIsImVwX2VuZCIsImxhc3QiLCJtb3ZpZV9pZCIsImFsaWFzIiwiaHRtbCIsIiQkIiwiZXBpc29kZXMiLCJfYiIsIl9jIiwibnVtYmVyIiwicGFyc2VGbG9hdCIsInJldmVyc2UiLCJwYXJzZUludCIsImZldGNoRXBpc29kZVNvdXJjZXMiLCJlcGlzb2RlSWQiLCJzZXJ2ZXIiLCJTdHJlYW1pbmdTZXJ2ZXJzIiwiVmlkU3RyZWFtaW5nIiwic3RhcnRzV2l0aCIsInNlcnZlclVybCIsIkdvZ29DRE4iLCJoZWFkZXJzIiwiUmVmZXJlciIsImhyZWYiLCJzb3VyY2VzIiwicHJveHlDb25maWciLCJhZGFwdGVyIiwiZXh0cmFjdCIsImRvd25sb2FkIiwiU3RyZWFtU0IiLCJ3YXRjaHNiIiwiVVNFUl9BR0VOVCIsImNvbnNvbGUiLCJsb2ciLCJmZXRjaEVwaXNvZGVTZXJ2ZXJzIiwic2VydmVycyIsImZldGNoQW5pbWVJZEZyb21FcGlzb2RlSWQiLCJmZXRjaFJlY2VudEVwaXNvZGVzIiwicmVjZW50RXBpc29kZXMiLCJfZCIsImVwaXNvZGVOdW1iZXIiLCJoYXNDbGFzcyIsImZldGNoR2VucmVJbmZvIiwiZ2VucmUiLCJnZW5yZUluZm8iLCJlbGVtIiwicmVsZWFzZWQiLCJwYWdpbmF0b3JEb20iLCJmZXRjaFRvcEFpcmluZyIsInRvcEFpcmluZyIsIm1hdGNoIiwibWFwIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/gogoanime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/index.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/index.js ***!
  \***********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst gogoanime_1 = __importDefault(__webpack_require__(/*! ./gogoanime */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/gogoanime.js\"));\nconst _9anime_1 = __importDefault(__webpack_require__(/*! ./9anime */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/9anime.js\"));\nconst animepahe_1 = __importDefault(__webpack_require__(/*! ./animepahe */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/animepahe.js\"));\nconst zoro_1 = __importDefault(__webpack_require__(/*! ./zoro */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/zoro.js\"));\nconst animefox_1 = __importDefault(__webpack_require__(/*! ./animefox */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/animefox.js\"));\nconst anify_1 = __importDefault(__webpack_require__(/*! ./anify */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/anify.js\"));\nconst crunchyroll_1 = __importDefault(__webpack_require__(/*! ./crunchyroll */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/crunchyroll.js\"));\nconst bilibili_1 = __importDefault(__webpack_require__(/*! ./bilibili */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/bilibili.js\"));\nconst marin_1 = __importDefault(__webpack_require__(/*! ./marin */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/marin.js\"));\nconst animesaturn_1 = __importDefault(__webpack_require__(/*! ./animesaturn */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/animesaturn.js\"));\nexports[\"default\"] = {\n    Gogoanime: gogoanime_1.default,\n    NineAnime: _9anime_1.default,\n    AnimePahe: animepahe_1.default,\n    Zoro: zoro_1.default,\n    AnimeFox: animefox_1.default,\n    Anify: anify_1.default,\n    Crunchyroll: crunchyroll_1.default,\n    Bilibili: bilibili_1.default,\n    Marin: marin_1.default,\n    AnimeSaturn: animesaturn_1.default\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL2FuaW1lL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxjQUFjUCxnQkFBZ0JRLG1CQUFPQSxDQUFDLDhJQUFhO0FBQ3pELE1BQU1DLFlBQVlULGdCQUFnQlEsbUJBQU9BLENBQUMsd0lBQVU7QUFDcEQsTUFBTUUsY0FBY1YsZ0JBQWdCUSxtQkFBT0EsQ0FBQyw4SUFBYTtBQUN6RCxNQUFNRyxTQUFTWCxnQkFBZ0JRLG1CQUFPQSxDQUFDLG9JQUFRO0FBQy9DLE1BQU1JLGFBQWFaLGdCQUFnQlEsbUJBQU9BLENBQUMsNElBQVk7QUFDdkQsTUFBTUssVUFBVWIsZ0JBQWdCUSxtQkFBT0EsQ0FBQyxzSUFBUztBQUNqRCxNQUFNTSxnQkFBZ0JkLGdCQUFnQlEsbUJBQU9BLENBQUMsa0pBQWU7QUFDN0QsTUFBTU8sYUFBYWYsZ0JBQWdCUSxtQkFBT0EsQ0FBQyw0SUFBWTtBQUN2RCxNQUFNUSxVQUFVaEIsZ0JBQWdCUSxtQkFBT0EsQ0FBQyxzSUFBUztBQUNqRCxNQUFNUyxnQkFBZ0JqQixnQkFBZ0JRLG1CQUFPQSxDQUFDLGtKQUFlO0FBQzdESCxrQkFBZSxHQUFHO0lBQ2RjLFdBQVdaLFlBQVlXLE9BQU87SUFDOUJFLFdBQVdYLFVBQVVTLE9BQU87SUFDNUJHLFdBQVdYLFlBQVlRLE9BQU87SUFDOUJJLE1BQU1YLE9BQU9PLE9BQU87SUFDcEJLLFVBQVVYLFdBQVdNLE9BQU87SUFDNUJNLE9BQU9YLFFBQVFLLE9BQU87SUFDdEJPLGFBQWFYLGNBQWNJLE9BQU87SUFDbENRLFVBQVVYLFdBQVdHLE9BQU87SUFDNUJTLE9BQU9YLFFBQVFFLE9BQU87SUFDdEJVLGFBQWFYLGNBQWNDLE9BQU87QUFDdEMsR0FDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29uc3VtZXQrZXh0ZW5zaW9uc0AxLjUuNC9ub2RlX21vZHVsZXMvQGNvbnN1bWV0L2V4dGVuc2lvbnMvZGlzdC9wcm92aWRlcnMvYW5pbWUvaW5kZXguanM/ZWY5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGdvZ29hbmltZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2dvZ29hbmltZVwiKSk7XG5jb25zdCBfOWFuaW1lXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vOWFuaW1lXCIpKTtcbmNvbnN0IGFuaW1lcGFoZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2FuaW1lcGFoZVwiKSk7XG5jb25zdCB6b3JvXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vem9yb1wiKSk7XG5jb25zdCBhbmltZWZveF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2FuaW1lZm94XCIpKTtcbmNvbnN0IGFuaWZ5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vYW5pZnlcIikpO1xuY29uc3QgY3J1bmNoeXJvbGxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jcnVuY2h5cm9sbFwiKSk7XG5jb25zdCBiaWxpYmlsaV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2JpbGliaWxpXCIpKTtcbmNvbnN0IG1hcmluXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFyaW5cIikpO1xuY29uc3QgYW5pbWVzYXR1cm5fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9hbmltZXNhdHVyblwiKSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgR29nb2FuaW1lOiBnb2dvYW5pbWVfMS5kZWZhdWx0LFxuICAgIE5pbmVBbmltZTogXzlhbmltZV8xLmRlZmF1bHQsXG4gICAgQW5pbWVQYWhlOiBhbmltZXBhaGVfMS5kZWZhdWx0LFxuICAgIFpvcm86IHpvcm9fMS5kZWZhdWx0LFxuICAgIEFuaW1lRm94OiBhbmltZWZveF8xLmRlZmF1bHQsXG4gICAgQW5pZnk6IGFuaWZ5XzEuZGVmYXVsdCxcbiAgICBDcnVuY2h5cm9sbDogY3J1bmNoeXJvbGxfMS5kZWZhdWx0LFxuICAgIEJpbGliaWxpOiBiaWxpYmlsaV8xLmRlZmF1bHQsXG4gICAgTWFyaW46IG1hcmluXzEuZGVmYXVsdCxcbiAgICBBbmltZVNhdHVybjogYW5pbWVzYXR1cm5fMS5kZWZhdWx0LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnb2dvYW5pbWVfMSIsInJlcXVpcmUiLCJfOWFuaW1lXzEiLCJhbmltZXBhaGVfMSIsInpvcm9fMSIsImFuaW1lZm94XzEiLCJhbmlmeV8xIiwiY3J1bmNoeXJvbGxfMSIsImJpbGliaWxpXzEiLCJtYXJpbl8xIiwiYW5pbWVzYXR1cm5fMSIsImRlZmF1bHQiLCJHb2dvYW5pbWUiLCJOaW5lQW5pbWUiLCJBbmltZVBhaGUiLCJab3JvIiwiQW5pbWVGb3giLCJBbmlmeSIsIkNydW5jaHlyb2xsIiwiQmlsaWJpbGkiLCJNYXJpbiIsIkFuaW1lU2F0dXJuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/marin.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/marin.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\n/**\n * @attention Cloudflare bypass is **REQUIRED**.\n */ class Marin extends models_1.AnimeParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"Marin\";\n        this.baseUrl = \"https://marin.moe\";\n        this.logo = \"https://i.pinimg.com/736x/62/8d/3f/628d3f2e60b0aa8c8fa9598e8dae6320.jpg\";\n        this.classPath = \"ANIME.Marin\";\n        this.recentEpisodes = async (page = 1)=>{\n            const token = await this.getToken();\n            let data;\n            try {\n                const response = await this.client.post(\"https://marin.moe/anime\", {\n                    page: page,\n                    sort: \"rel-d\",\n                    filter: {\n                        type: [],\n                        status: [],\n                        content_rating: [],\n                        genre: [],\n                        group: [],\n                        production: [],\n                        source: [],\n                        resolution: [],\n                        audio: [],\n                        subtitle: []\n                    },\n                    search: \"\"\n                }, {\n                    headers: {\n                        Origin: \"https://marin.moe/\",\n                        Referer: \"https://marin.moe/anime\",\n                        Cookie: `__ddg1=;__ddg2_=; XSRF-TOKEN=${token[1]}; marin_session=${token[0]};`,\n                        \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\",\n                        \"x-xsrf-token\": token[1].split(\";\")[0].replace(\"%3D\", \"=\"),\n                        \"x-inertia\": true\n                    }\n                });\n                data = await response.data;\n            } catch (error) {\n                console.log(error);\n            }\n            const response_data = {\n                currentPage: page,\n                hasNextPage: data.props.anime_list.meta.last_page > page,\n                results: data.props.anime_list.data.map((el)=>{\n                    return {\n                        id: el.slug,\n                        title: el.title,\n                        image: el.cover,\n                        releaseDate: el.year,\n                        type: el.type\n                    };\n                })\n            };\n            return response_data;\n        };\n        /**\n         * @param query Search query\n         */ this.search = async (query, page = 1)=>{\n            const token = await this.getToken();\n            let data;\n            try {\n                const response = await this.client.post(\"https://marin.moe/anime\", {\n                    page: page,\n                    sort: \"az-a\",\n                    filter: {\n                        type: [],\n                        status: [],\n                        content_rating: [],\n                        genre: [],\n                        group: [],\n                        production: [],\n                        source: [],\n                        resolution: [],\n                        audio: [],\n                        subtitle: []\n                    },\n                    search: query\n                }, {\n                    headers: {\n                        Origin: \"https://marin.moe/\",\n                        Referer: \"https://marin.moe/anime\",\n                        Cookie: `__ddg1=;__ddg2_=; XSRF-TOKEN=${token[1]}; marin_session=${token[0]};`,\n                        \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\",\n                        \"x-xsrf-token\": token[1].split(\";\")[0].replace(\"%3D\", \"=\"),\n                        \"x-inertia\": true\n                    }\n                });\n                data = await response.data;\n            } catch (error) {\n                console.log(error);\n            }\n            const response_data = {\n                currentPage: page,\n                hasNextPage: data.props.anime_list.meta.last_page > page,\n                results: data.props.anime_list.data.map((el)=>{\n                    return {\n                        id: el.slug,\n                        title: el.title,\n                        image: el.cover,\n                        releaseDate: el.year,\n                        type: el.type\n                    };\n                })\n            };\n            return response_data;\n        };\n        /**\n         * @param id Anime id\n         */ this.fetchAnimeInfo = async (id)=>{\n            var _a;\n            const token = await this.getToken();\n            let data;\n            try {\n                const response = await this.client.post(`https://marin.moe/anime/${id}`, {}, {\n                    headers: {\n                        Origin: \"https://marin.moe/\",\n                        Referer: `https://marin.moe/anime/${id}`,\n                        Cookie: `__ddg1=;__ddg2_=; XSRF-TOKEN=${token[1].split(\";\")[0]}; marin_session=${token[0].split(\";\")[0]};`,\n                        \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\",\n                        \"x-inertia\": true,\n                        \"x-inertia-version\": \"884345c4d568d16e3bb2fb3ae350cca9\",\n                        \"x-requested-with\": \"XMLHttpRequest\",\n                        \"x-xsrf-token\": token[1].split(\";\")[0].replace(\"%3D\", \"=\")\n                    }\n                });\n                data = await response.data;\n                console.log(data);\n            } catch (error) {\n                console.log(error);\n            }\n            let episodes = data.props.episode_list.data;\n            if (data.props.anime.last_episode > 36) {\n                for(let index = 2; index < data.props.anime.last_episode / 36; index++){\n                    const response = await this.client.post(`https://marin.moe/anime/${id}`, {\n                        filter: {\n                            episodes: true,\n                            specials: true\n                        },\n                        eps_page: index\n                    }, {\n                        headers: {\n                            Origin: \"https://marin.moe/\",\n                            Referer: `https://marin.moe/anime/${id}`,\n                            Cookie: `__ddg1=;__ddg2_=; XSRF-TOKEN=${token[1].split(\";\")[0]}; marin_session=${token[0].split(\";\")[0]};`,\n                            \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\",\n                            \"x-inertia\": true,\n                            \"x-inertia-version\": \"884345c4d568d16e3bb2fb3ae350cca9\",\n                            \"x-requested-with\": \"XMLHttpRequest\",\n                            \"x-xsrf-token\": token[1].split(\";\")[0].replace(\"%3D\", \"=\")\n                        }\n                    });\n                    const data = await response.data;\n                    episodes = episodes.concat(data.props.episode_list.data);\n                }\n            }\n            //{\"filter\":{\"episodes\":true,\"specials\":true},\"eps_page\":2}\n            const response_data = {\n                id: id,\n                title: {\n                    native: data.props.anime.alt_titles[\"Official Title\"][0].text,\n                    romaji: data.props.anime.title,\n                    english: data.props.anime.alt_titles[\"Official Title\"][1].text\n                },\n                synonyms: ((_a = data.props.anime.alt_titles[\"Synonym\"]) === null || _a === void 0 ? void 0 : _a.map((el)=>{\n                    return el.text;\n                })) || [],\n                image: data.props.anime.cover,\n                cover: data.props.anime.cover,\n                description: data.props.anime.description,\n                status: data.props.anime.status.name,\n                releaseDate: data.props.anime.release_date,\n                totalEpisodes: data.props.anime.last_episode,\n                currentEpisode: data.props.anime.last_episode,\n                genres: data.props.anime.genre_list.map((el)=>{\n                    return el.name;\n                }),\n                studios: data.props.anime.production_list.map((el)=>{\n                    return el.name;\n                }),\n                type: data.props.anime.type.name,\n                ageRating: data.props.anime.content_rating.name,\n                episodes: episodes.map((el)=>{\n                    return {\n                        id: `${id}/${el.sort}`,\n                        title: el.title,\n                        number: el.sort,\n                        image: el.cover,\n                        airdate: el.release_date\n                    };\n                })\n            };\n            return response_data;\n        };\n        /**\n         *\n         * @param episodeId Episode id\n         */ this.fetchEpisodeSources = async (id)=>{\n            const token = await this.getToken();\n            const cookie = `__ddg1=;__ddg2_=; XSRF-TOKEN=${token[1].split(\";\")[0]}; marin_session=${token[0].split(\";\")[0]};`;\n            let data;\n            try {\n                const response = await this.client.post(`https://marin.moe/anime/${id}`, {}, {\n                    headers: {\n                        Origin: \"https://marin.moe/\",\n                        Referer: `https://marin.moe/anime/${id}`,\n                        Cookie: cookie,\n                        \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\",\n                        \"x-inertia\": true,\n                        \"x-inertia-version\": \"884345c4d568d16e3bb2fb3ae350cca9\",\n                        \"x-requested-with\": \"XMLHttpRequest\",\n                        \"x-xsrf-token\": token[1].split(\";\")[0].replace(\"%3D\", \"=\")\n                    }\n                });\n                data = await response.data;\n            } catch (error) {\n                console.log(error);\n            }\n            const response_data = {\n                headers: {\n                    Cookie: cookie\n                },\n                sources: data.props.video.data.mirror.map((el)=>{\n                    return {\n                        url: el.code.file,\n                        quality: el.resolution,\n                        isM3U8: false,\n                        duration: el.code.duration,\n                        thumbnail: el.code.thumbnail\n                    };\n                }),\n                sprites: data.props.video.data.mirror[0].code.sprite,\n                spriteVtt: data.props.video.data.mirror[0].code.vtt\n            };\n            return response_data;\n        };\n        /**\n         *\n         * @param episodeId Episode id\n         */ this.fetchEpisodeServers = (episodeId)=>{\n            throw new Error(\"Method not implemented.\");\n        };\n    }\n    async getToken() {\n        const token = [];\n        const response = await this.client.get(\"https://marin.moe/anime\", {\n            headers: {\n                Referer: \"https://marin.moe/anime\",\n                Cookie: \"__ddg1_=;__ddg2_=;\"\n            }\n        });\n        token.push(response.headers[\"set-cookie\"][1].replace(\"marin_session=\", \"\"));\n        token.push(response.headers[\"set-cookie\"][0].replace(\"XSRF-TOKEN=\", \"\"));\n        return token;\n    }\n}\nexports[\"default\"] = Marin; // (async () => {\n //   const marin = new Marin();\n //   const search = await marin.search('vermeil in gold');\n //   const anime = await marin.fetchAnimeInfo(search.results[0].id);\n //   const sources = await marin.fetchEpisodeSources(anime.episodes![0].id);\n //   console.log(sources);\n // })();\n //# sourceMappingURL=marin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/marin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/zoro.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/zoro.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nconst utils_2 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nclass Zoro extends models_1.AnimeParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"Zoro\";\n        this.baseUrl = \"https://aniwatch.to\";\n        this.logo = \"https://is3-ssl.mzstatic.com/image/thumb/Purple112/v4/7e/91/00/7e9100ee-2b62-0942-4cdc-e9b93252ce1c/source/512x512bb.jpg\";\n        this.classPath = \"ANIME.Zoro\";\n        /**\n         * @param query Search query\n         * @param page Page number (optional)\n         */ this.search = async (query, page = 1)=>{\n            var _a, _b, _c, _d, _e;\n            const res = {\n                currentPage: page,\n                hasNextPage: false,\n                totalPages: 0,\n                results: []\n            };\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/search?keyword=${decodeURIComponent(query)}&page=${page}`);\n                const $ = (0, cheerio_1.load)(data);\n                res.hasNextPage = $(\".pagination > li\").length > 0 ? $(\".pagination li.active\").length > 0 ? $(\".pagination > li\").last().hasClass(\"active\") ? false : true : false : false;\n                res.totalPages = parseInt((_c = (_b = (_a = $('.pagination > .page-item a[title=\"Last\"]')) === null || _a === void 0 ? void 0 : _a.attr(\"href\")) === null || _b === void 0 ? void 0 : _b.split(\"=\").pop()) !== null && _c !== void 0 ? _c : (_e = (_d = $(\".pagination > .page-item.active a\")) === null || _d === void 0 ? void 0 : _d.text()) === null || _e === void 0 ? void 0 : _e.trim()) || 0;\n                if (res.totalPages === 0 && !res.hasNextPage) res.totalPages = 1;\n                $(\".film_list-wrap > div.flw-item\").each((i, el)=>{\n                    var _a;\n                    const id = (_a = $(el).find(\"div:nth-child(1) > a.film-poster-ahref\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[1].split(\"?\")[0];\n                    const title = $(el).find(\"div.film-detail > h3.film-name > a.dynamic-name\").attr(\"title\");\n                    // Movie, TV, OVA, ONA, Special, Music\n                    const type = $(el).find(\"div:nth-child(2) > div:nth-child(2) > span:nth-child(1)\").text();\n                    const image = $(el).find(\"div:nth-child(1) > img.film-poster-img\").attr(\"data-src\");\n                    const url = this.baseUrl + $(el).find(\"div:nth-child(1) > a\").last().attr(\"href\");\n                    res.results.push({\n                        id: id,\n                        title: title,\n                        type: type.toUpperCase(),\n                        image: image,\n                        url: url\n                    });\n                });\n                if (res.results.length === 0) {\n                    res.totalPages = 0;\n                    res.hasNextPage = false;\n                }\n                return res;\n            } catch (err) {\n                throw new Error(err);\n            }\n        };\n        /**\n         * @param id Anime id\n         */ this.fetchAnimeInfo = async (id)=>{\n            const info = {\n                id: id,\n                title: \"\"\n            };\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/watch/${id}`);\n                const $ = (0, cheerio_1.load)(data);\n                const { mal_id, anilist_id } = JSON.parse($(\"#syncData\").text());\n                info.malID = Number(mal_id);\n                info.alID = Number(anilist_id);\n                info.title = $(\"h2.film-name > a.text-white\").text();\n                info.image = $(\"img.film-poster-img\").attr(\"src\");\n                info.description = $(\"div.film-description\").text().trim();\n                // Movie, TV, OVA, ONA, Special, Music\n                info.type = $(\"span.item\").last().prev().prev().text().toUpperCase();\n                info.url = `${this.baseUrl}/${id}`;\n                const hasSub = $(\"div.film-stats div.tick div.tick-item.tick-sub\").length > 0;\n                const hasDub = $(\"div.film-stats div.tick div.tick-item.tick-dub\").length > 0;\n                if (hasSub) {\n                    info.subOrDub = models_1.SubOrSub.SUB;\n                    info.hasSub = hasSub;\n                }\n                if (hasDub) {\n                    info.subOrDub = models_1.SubOrSub.DUB;\n                    info.hasDub = hasDub;\n                }\n                if (hasSub && hasDub) {\n                    info.subOrDub = models_1.SubOrSub.BOTH;\n                }\n                const episodesAjax = await this.client.get(`${this.baseUrl}/ajax/v2/episode/list/${id.split(\"-\").pop()}`, {\n                    headers: {\n                        \"X-Requested-With\": \"XMLHttpRequest\",\n                        Referer: `${this.baseUrl}/watch/${id}`\n                    }\n                });\n                const $$ = (0, cheerio_1.load)(episodesAjax.data.html);\n                info.totalEpisodes = $$(\"div.detail-infor-content > div > a\").length;\n                info.episodes = [];\n                $$(\"div.detail-infor-content > div > a\").each((i, el)=>{\n                    var _a, _b, _c, _d;\n                    const episodeId = (_c = (_b = (_a = $$(el).attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[2]) === null || _b === void 0 ? void 0 : _b.replace(\"?ep=\", \"$episode$\")) === null || _c === void 0 ? void 0 : _c.concat(`$${info.subOrDub}`);\n                    const number = parseInt($$(el).attr(\"data-number\"));\n                    const title = $$(el).attr(\"title\");\n                    const url = this.baseUrl + $$(el).attr(\"href\");\n                    const isFiller = $$(el).hasClass(\"ssl-item-filler\");\n                    (_d = info.episodes) === null || _d === void 0 ? void 0 : _d.push({\n                        id: episodeId,\n                        number: number,\n                        title: title,\n                        isFiller: isFiller,\n                        url: url\n                    });\n                });\n                return info;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param episodeId Episode id\n         */ this.fetchEpisodeSources = async (episodeId, server = models_1.StreamingServers.VidCloud)=>{\n            var _a;\n            if (episodeId.startsWith(\"http\")) {\n                const serverUrl = new URL(episodeId);\n                switch(server){\n                    case models_1.StreamingServers.VidStreaming:\n                    case models_1.StreamingServers.VidCloud:\n                        return Object.assign({}, await new utils_1.RapidCloud(this.proxyConfig, this.adapter).extract(serverUrl));\n                    case models_1.StreamingServers.StreamSB:\n                        return {\n                            headers: {\n                                Referer: serverUrl.href,\n                                watchsb: \"streamsb\",\n                                \"User-Agent\": utils_2.USER_AGENT\n                            },\n                            sources: await new utils_1.StreamSB(this.proxyConfig, this.adapter).extract(serverUrl, true)\n                        };\n                    case models_1.StreamingServers.StreamTape:\n                        return {\n                            headers: {\n                                Referer: serverUrl.href,\n                                \"User-Agent\": utils_2.USER_AGENT\n                            },\n                            sources: await new utils_1.StreamTape(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                    default:\n                    case models_1.StreamingServers.VidCloud:\n                        return Object.assign({\n                            headers: {\n                                Referer: serverUrl.href\n                            }\n                        }, await new utils_1.RapidCloud(this.proxyConfig, this.adapter).extract(serverUrl));\n                }\n            }\n            if (!episodeId.includes(\"$episode$\")) throw new Error(\"Invalid episode id\");\n            // Fallback to using sub if no info found in case of compatibility\n            // TODO: add both options later\n            const subOrDub = ((_a = episodeId.split(\"$\")) === null || _a === void 0 ? void 0 : _a.pop()) === \"dub\" ? \"dub\" : \"sub\";\n            episodeId = `${this.baseUrl}/watch/${episodeId.replace(\"$episode$\", \"?ep=\").replace(/\\$auto|\\$sub|\\$dub/gi, \"\")}`;\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/ajax/v2/episode/servers?episodeId=${episodeId.split(\"?ep=\")[1]}`);\n                const $ = (0, cheerio_1.load)(data.html);\n                /**\n                 * vidtreaming -> 4\n                 * rapidcloud  -> 1\n                 * streamsb -> 5\n                 * streamtape -> 3\n                 */ let serverId = \"\";\n                try {\n                    switch(server){\n                        case models_1.StreamingServers.VidCloud:\n                            serverId = this.retrieveServerId($, 1, subOrDub);\n                            // zoro's vidcloud server is rapidcloud\n                            if (!serverId) throw new Error(\"RapidCloud not found\");\n                            break;\n                        case models_1.StreamingServers.VidStreaming:\n                            serverId = this.retrieveServerId($, 4, subOrDub);\n                            // zoro's vidcloud server is rapidcloud\n                            if (!serverId) throw new Error(\"vidtreaming not found\");\n                            break;\n                        case models_1.StreamingServers.StreamSB:\n                            serverId = this.retrieveServerId($, 5, subOrDub);\n                            if (!serverId) throw new Error(\"StreamSB not found\");\n                            break;\n                        case models_1.StreamingServers.StreamTape:\n                            serverId = this.retrieveServerId($, 3, subOrDub);\n                            if (!serverId) throw new Error(\"StreamTape not found\");\n                            break;\n                    }\n                } catch (err) {\n                    throw new Error(\"Couldn't find server. Try another server\");\n                }\n                const { data: { link } } = await this.client.get(`${this.baseUrl}/ajax/v2/episode/sources?id=${serverId}`);\n                return await this.fetchEpisodeSources(link, server);\n            } catch (err) {\n                throw err;\n            }\n        };\n        this.retrieveServerId = ($, index, subOrDub)=>{\n            return $(`div.ps_-block.ps_-block-sub.servers-${subOrDub} > div.ps__-list > div`).map((i, el)=>$(el).attr(\"data-server-id\") == `${index}` ? $(el) : null).get()[0].attr(\"data-id\");\n        };\n        /**\n         * @param page Page number\n         */ this.fetchRecentEpisodes = async (page = 1)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/recently-updated?page=${page}`);\n                const $ = (0, cheerio_1.load)(data);\n                const hasNextPage = $(\".pagination > li\").length > 0 ? $(\".pagination > li\").last().hasClass(\"active\") ? false : true : false;\n                const recentEpisodes = [];\n                $(\"div.film_list-wrap > div\").each((i, el)=>{\n                    var _a;\n                    recentEpisodes.push({\n                        id: (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.replace(\"/\", \"\"),\n                        image: $(el).find(\"div.film-poster > img\").attr(\"data-src\"),\n                        title: $(el).find(\"div.film-poster > img\").attr(\"alt\"),\n                        url: `${this.baseUrl}${$(el).find(\"div.film-poster > a\").attr(\"href\")}`,\n                        episode: parseInt($(el).find(\"div.tick-eps\").text().replace(/\\s/g, \"\").replace(\"Ep\", \"\").split(\"/\")[0])\n                    });\n                });\n                return {\n                    currentPage: page,\n                    hasNextPage: hasNextPage,\n                    results: recentEpisodes\n                };\n            } catch (err) {\n                throw new Error(\"Something went wrong. Please try again later.\");\n            }\n        };\n        /**\n         * @deprecated\n         * @param episodeId Episode id\n         */ this.fetchEpisodeServers = (episodeId)=>{\n            throw new Error(\"Method not implemented.\");\n        };\n    }\n}\n// (async () => {\n//   const zoro = new Zoro();\n//   const anime = await zoro.search('classroom of the elite');\n//   const info = await zoro.fetchAnimeInfo(anime.results[0].id);\n//   const sources = await zoro.fetchEpisodeSources(info.episodes![0].id);\n//   console.log(sources);\n// })();\nexports[\"default\"] = Zoro; //# sourceMappingURL=zoro.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/zoro.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/books/index.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/books/index.js ***!
  \***********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst libgen_1 = __importDefault(__webpack_require__(/*! ./libgen */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/books/libgen.js\"));\nexports[\"default\"] = {\n    Libgen: libgen_1.default\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL2Jvb2tzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxXQUFXUCxnQkFBZ0JRLG1CQUFPQSxDQUFDLHdJQUFVO0FBQ25ESCxrQkFBZSxHQUFHO0lBQUVLLFFBQVFILFNBQVNFLE9BQU87QUFBQyxHQUM3QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29uc3VtZXQrZXh0ZW5zaW9uc0AxLjUuNC9ub2RlX21vZHVsZXMvQGNvbnN1bWV0L2V4dGVuc2lvbnMvZGlzdC9wcm92aWRlcnMvYm9va3MvaW5kZXguanM/NjNkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGxpYmdlbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xpYmdlblwiKSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7IExpYmdlbjogbGliZ2VuXzEuZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxpYmdlbl8xIiwicmVxdWlyZSIsImRlZmF1bHQiLCJMaWJnZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/books/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/books/libgen.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/books/libgen.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nconst ascii_url_encoder_1 = __webpack_require__(/*! ascii-url-encoder */ \"(rsc)/./node_modules/.pnpm/ascii-url-encoder@1.2.0/node_modules/ascii-url-encoder/dist/index.js\");\nclass Libgen extends models_1.BookParser {\n    constructor(){\n        super(...arguments);\n        this.extensions = [\n            \".rs\",\n            \".is\",\n            \".st\"\n        ];\n        this.baseUrl = \"http://libgen\";\n        /**\n         * @type {string}\n         */ this.name = \"Libgen\";\n        this.downloadIP = \"http://62.182.86.140\";\n        this.logo = \"https://f-droid.org/repo/com.manuelvargastapia.libgen/en-US/icon_TP2ezvMwW5ovE-wixagF1WCThMUohX3T_kzYhuZQ8aY=.png\";\n        this.classPath = \"BOOKS.Libgen\";\n        /**\n         * scrapes a ligen book page by book page url\n         *\n         * @param {string} bookUrl - ligen book page url\n         * @returns {Promise<LibgenBook>}\n         */ this.scrapeBook = async (bookUrl)=>{\n            bookUrl = encodeURIComponent(bookUrl);\n            const container = new models_1.LibgenBookObject();\n            const { data } = await this.client.get(bookUrl);\n            const $ = (0, cheerio_1.load)(data);\n            let rawAuthor = \"\";\n            $(\"tbody > tr:eq(10)\").children().each((i, el)=>{\n                switch(i){\n                    case 1:\n                        rawAuthor = $(el).text();\n                        break;\n                }\n            });\n            container.authors = (0, utils_1.splitAuthor)(rawAuthor);\n            let publisher = \"\";\n            $(\"tbody > tr:eq(12)\").children().each((i, el)=>{\n                switch(i){\n                    case 1:\n                        publisher = $(el).text();\n                        break;\n                }\n            });\n            container.publisher = publisher;\n            let ex = \"\";\n            let size = \"\";\n            $(\"tbody > tr:eq(18)\").children().each((i, el)=>{\n                switch(i){\n                    case 1:\n                        size = $(el).text();\n                        break;\n                    case 3:\n                        ex = $(el).text();\n                        break;\n                }\n            });\n            container.format = ex;\n            container.size = size;\n            let lang = \"\";\n            let page = \"\";\n            $(\"tbody > tr:eq(14)\").children().each((i, el)=>{\n                switch(i){\n                    case 1:\n                        lang = $(el).text();\n                        break;\n                    case 3:\n                        page = $(el).text().split(\"/\")[0];\n                        break;\n                }\n            });\n            container.pages = page;\n            container.language = lang;\n            let tempTitle = \"\";\n            let tempVolume = \"\";\n            $(\"tbody > tr:eq(1)\").children().each((i, el)=>{\n                switch(i){\n                    case 2:\n                        tempTitle = $(el).text();\n                        break;\n                    case 4:\n                        tempVolume = $(el).text();\n                }\n            });\n            container.title = tempTitle;\n            container.volume = tempVolume;\n            container.image = `${this.baseUrl}${this.extensions[0]}` + $(\"img\").attr(\"src\");\n            let tempIsbn = [];\n            let id = \"\";\n            $(\"tbody > tr:eq(15)\").children().each((i, el)=>{\n                switch(i){\n                    case 1:\n                        tempIsbn = $(el).text().split(\", \");\n                        break;\n                    case 3:\n                        id = $(el).text();\n                        break;\n                }\n            });\n            container.id = id;\n            container.isbn = tempIsbn;\n            container.description = $(\"tbody > tr:eq(31)\").text() || \"\";\n            container.tableOfContents = $(\"tbody > tr:eq(32)\").text() || \"\";\n            let tempSeries = \"\";\n            $(\"tbody > tr:eq(11)\").children().each((i, el)=>{\n                switch(i){\n                    case 1:\n                        tempSeries = $(el).text();\n                        break;\n                }\n            });\n            container.series = tempSeries;\n            let tempTopic = \"\";\n            $(\"tbody > tr:eq(22)\").children().each((i, el)=>{\n                switch(i){\n                    case 1:\n                        tempTopic = $(el).text();\n                        break;\n                }\n            });\n            container.topic = tempTopic;\n            let tempEdition = \"\";\n            let year = \"\";\n            $(\"tbody > tr:eq(13)\").children().each((i, el)=>{\n                switch(i){\n                    case 1:\n                        year = $(el).text();\n                        break;\n                    case 3:\n                        tempEdition = $(el).text();\n                        break;\n                }\n            });\n            container.year = year;\n            container.edition = tempEdition;\n            for(let p = 2; p <= 8; p++){\n                let temp = \"\";\n                $(`tbody tr:eq(${p})`).children().each((i, el)=>{\n                    switch(i){\n                        case 1:\n                            temp = $(el).text();\n                    }\n                });\n                switch(p){\n                    case 2:\n                        container.hashes.AICH = temp;\n                        break;\n                    case 3:\n                        container.hashes.CRC32 = temp;\n                        break;\n                    case 4:\n                        container.hashes.eDonkey = temp;\n                        break;\n                    case 5:\n                        container.hashes.MD5 = temp;\n                        break;\n                    case 6:\n                        container.hashes.SHA1 = temp;\n                        break;\n                    case 7:\n                        container.hashes.SHA256 = temp.split(\" \");\n                        break;\n                    case 8:\n                        container.hashes.TTH = temp;\n                        break;\n                }\n            }\n            let realLink = \"\";\n            const fakeLink = bookUrl;\n            for(let i = 0; i < fakeLink.length; i++){\n                if (fakeLink[i] === \"m\" && fakeLink[i + 1] === \"d\" && fakeLink[i + 2] === \"5\" && fakeLink[i + 3] === \"=\") {\n                    realLink = fakeLink.substring(i + 4, fakeLink.length);\n                    break;\n                }\n            }\n            container.link = `${this.downloadIP}/main/${(0, utils_1.floorID)(container.id)}/${realLink.toLowerCase()}/${(0, ascii_url_encoder_1.encode)(`${container.series == \"\" ? \"\" : `(${container.series})`} ${rawAuthor} - ${container.title}-${container.publisher} (${container.year}).${container.format}`)}`;\n            return container;\n        };\n        /**\n         * scrapes a libgen search page and returns an array of results\n         *\n         * @param {string} query - the name of the book\n         * @param {number} [maxResults=25] - maximum number of results\n         * @returns {Promise<LibgenBook[]>}\n         */ this.search = async (query, page = 1)=>{\n            query = encodeURIComponent(query);\n            const workingExtension = this.extensions[0];\n            const containers = [];\n            const { data } = await this.client.get(`${this.baseUrl}.rs/search.php?req=${query}&view=simple&res=25&sort=def&sortmode=ASC&page=${page}`);\n            const $ = (0, cheerio_1.load)(data);\n            let rawAuthor = \"\";\n            $(\"table tbody tr\").each((i, e)=>{\n                const container = new models_1.LibgenBookObject();\n                $(e.children).each((i, e)=>{\n                    if ($(e).text() === \"\\n\t\t\t\t\") return;\n                    switch(i){\n                        case 0:\n                            container.id = $(e).text();\n                            break;\n                        case 2:\n                            rawAuthor = $(e).text();\n                            container.authors = (0, utils_1.splitAuthor)(rawAuthor);\n                            break;\n                        case 4:\n                            let potLink = \"\";\n                            $(e).children().each((i, el)=>{\n                                var _a;\n                                if (potLink != \"\") {\n                                    return;\n                                }\n                                if (((_a = $(el).attr(\"href\")) === null || _a === void 0 ? void 0 : _a.at(0)) === \"b\") {\n                                    potLink = $(el).attr(\"href\") || \"\";\n                                }\n                            });\n                            container.link = `${this.baseUrl}${workingExtension}/${potLink}`;\n                        case 6:\n                            container.publisher = $(e).text();\n                            break;\n                        case 8:\n                            container.year = $(e).text();\n                            break;\n                        case 10:\n                            container.pages = $(e).text();\n                            break;\n                        case 12:\n                            container.language = $(e).text();\n                            break;\n                        case 14:\n                            container.size = $(e).text();\n                            break;\n                        case 16:\n                            container.format = $(e).text();\n                            break;\n                    }\n                });\n                containers[i] = container;\n            });\n            containers.shift();\n            containers.shift();\n            containers.shift();\n            containers.pop();\n            for(let i = 0; i < containers.length; i++){\n                if (containers[i].link == \"\") {\n                    continue;\n                }\n                const data = await this.client.get(containers[i].link);\n                const $ = (0, cheerio_1.load)(data.data);\n                let tempTitle = \"\";\n                let tempVolume = \"\";\n                $(\"tbody > tr:eq(1)\").children().each((i, el)=>{\n                    switch(i){\n                        case 2:\n                            tempTitle = $(el).text();\n                            break;\n                        case 4:\n                            tempVolume = $(el).text();\n                    }\n                });\n                containers[i].title = tempTitle;\n                containers[i].volume = tempVolume;\n                containers[i].image = `${this.baseUrl}${workingExtension}` + $(\"img\").attr(\"src\");\n                let tempIsbn = [];\n                $(\"tbody > tr:eq(15)\").children().each((i, el)=>{\n                    switch(i){\n                        case 1:\n                            tempIsbn = $(el).text().split(\", \");\n                            break;\n                    }\n                });\n                containers[i].isbn = tempIsbn;\n                containers[i].description = $(\"tbody > tr:eq(31)\").text() || \"\";\n                containers[i].tableOfContents = $(\"tbody > tr:eq(32)\").text() || \"\";\n                let tempSeries = \"\";\n                $(\"tbody > tr:eq(11)\").children().each((i, el)=>{\n                    switch(i){\n                        case 1:\n                            tempSeries = $(el).text();\n                            break;\n                    }\n                });\n                containers[i].series = tempSeries;\n                let tempTopic = \"\";\n                $(\"tbody > tr:eq(22)\").children().each((i, el)=>{\n                    switch(i){\n                        case 1:\n                            tempTopic = $(el).text();\n                            break;\n                    }\n                });\n                containers[i].topic = tempTopic;\n                let tempEdition = \"\";\n                $(\"tbody > tr:eq(13)\").children().each((i, el)=>{\n                    switch(i){\n                        case 3:\n                            tempEdition = $(el).text();\n                            break;\n                    }\n                });\n                containers[i].edition = tempEdition;\n                for(let p = 2; p <= 8; p++){\n                    let temp = \"\";\n                    $(`tbody tr:eq(${p})`).children().each((i, el)=>{\n                        switch(i){\n                            case 1:\n                                temp = $(el).text();\n                        }\n                    });\n                    switch(p){\n                        case 2:\n                            containers[i].hashes.AICH = temp;\n                            break;\n                        case 3:\n                            containers[i].hashes.CRC32 = temp;\n                            break;\n                        case 4:\n                            containers[i].hashes.eDonkey = temp;\n                            break;\n                        case 5:\n                            containers[i].hashes.MD5 = temp;\n                            break;\n                        case 6:\n                            containers[i].hashes.SHA1 = temp;\n                            break;\n                        case 7:\n                            containers[i].hashes.SHA256 = temp.split(\" \");\n                            break;\n                        case 8:\n                            containers[i].hashes.TTH = temp;\n                            break;\n                    }\n                }\n                let realLink = \"\";\n                const fakeLink = containers[i].link;\n                for(let i = 0; i < fakeLink.length; i++){\n                    if (fakeLink[i] === \"m\" && fakeLink[i + 1] === \"d\" && fakeLink[i + 2] === \"5\" && fakeLink[i + 3] === \"=\") {\n                        realLink = fakeLink.substring(i + 4, fakeLink.length);\n                        break;\n                    }\n                }\n                containers[i].link = `${this.downloadIP}/main/${(0, utils_1.floorID)(containers[i].id)}/${realLink.toLowerCase()}/${(0, ascii_url_encoder_1.encode)(`${containers[i].series == \"\" ? \"\" : `(${containers[i].series})`} ${rawAuthor} - ${containers[i].title}-${containers[i].publisher} (${containers[i].year}).${containers[i].format}`)}`;\n            }\n            return {\n                result: containers,\n                hasNextPage: $(\"table:eq(1) tbody tr td:eq(1) font a:eq(0)\").text().trim() == \"►\" || $(\"table:eq(1) tbody tr td:eq(1) font a:eq(1)\").text().trim() == \"►\" ? true : false\n            };\n        };\n    }\n}\nexports[\"default\"] = Libgen; //# sourceMappingURL=libgen.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL2Jvb2tzL2xpYmdlbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxZQUFZQyxtQkFBT0EsQ0FBQyxpR0FBUztBQUNuQyxNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyxrSUFBYztBQUN2QyxNQUFNRSxVQUFVRixtQkFBT0EsQ0FBQyxnSUFBYTtBQUNyQyxNQUFNRyxzQkFBc0JILG1CQUFPQSxDQUFDLDBIQUFtQjtBQUN2RCxNQUFNSSxlQUFlSCxTQUFTSSxVQUFVO0lBQ3BDQyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsVUFBVSxHQUFHO1lBQUM7WUFBTztZQUFPO1NBQU07UUFDdkMsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZjs7U0FFQyxHQUNELElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxVQUFVLEdBQUc7UUFDbEIsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLFNBQVMsR0FBRztRQUNqQjs7Ozs7U0FLQyxHQUNELElBQUksQ0FBQ0MsVUFBVSxHQUFHLE9BQU9DO1lBQ3JCQSxVQUFVQyxtQkFBbUJEO1lBQzdCLE1BQU1FLFlBQVksSUFBSWhCLFNBQVNpQixnQkFBZ0I7WUFDL0MsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUNOO1lBQ3ZDLE1BQU1PLElBQUksQ0FBQyxHQUFHdkIsVUFBVXdCLElBQUksRUFBRUo7WUFDOUIsSUFBSUssWUFBWTtZQUNoQkYsRUFBRSxxQkFDR0csUUFBUSxHQUNSQyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7Z0JBQ1YsT0FBUUQ7b0JBQ0osS0FBSzt3QkFDREgsWUFBWUYsRUFBRU0sSUFBSUMsSUFBSTt3QkFDdEI7Z0JBQ1I7WUFDSjtZQUNBWixVQUFVYSxPQUFPLEdBQUcsQ0FBQyxHQUFHNUIsUUFBUTZCLFdBQVcsRUFBRVA7WUFDN0MsSUFBSVEsWUFBWTtZQUNoQlYsRUFBRSxxQkFDR0csUUFBUSxHQUNSQyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7Z0JBQ1YsT0FBUUQ7b0JBQ0osS0FBSzt3QkFDREssWUFBWVYsRUFBRU0sSUFBSUMsSUFBSTt3QkFDdEI7Z0JBQ1I7WUFDSjtZQUNBWixVQUFVZSxTQUFTLEdBQUdBO1lBQ3RCLElBQUlDLEtBQUs7WUFDVCxJQUFJQyxPQUFPO1lBQ1haLEVBQUUscUJBQ0dHLFFBQVEsR0FDUkMsSUFBSSxDQUFDLENBQUNDLEdBQUdDO2dCQUNWLE9BQVFEO29CQUNKLEtBQUs7d0JBQ0RPLE9BQU9aLEVBQUVNLElBQUlDLElBQUk7d0JBQ2pCO29CQUNKLEtBQUs7d0JBQ0RJLEtBQUtYLEVBQUVNLElBQUlDLElBQUk7d0JBQ2Y7Z0JBQ1I7WUFDSjtZQUNBWixVQUFVa0IsTUFBTSxHQUFHRjtZQUNuQmhCLFVBQVVpQixJQUFJLEdBQUdBO1lBQ2pCLElBQUlFLE9BQU87WUFDWCxJQUFJQyxPQUFPO1lBQ1hmLEVBQUUscUJBQ0dHLFFBQVEsR0FDUkMsSUFBSSxDQUFDLENBQUNDLEdBQUdDO2dCQUNWLE9BQVFEO29CQUNKLEtBQUs7d0JBQ0RTLE9BQU9kLEVBQUVNLElBQUlDLElBQUk7d0JBQ2pCO29CQUNKLEtBQUs7d0JBQ0RRLE9BQU9mLEVBQUVNLElBQUlDLElBQUksR0FBR1MsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUNqQztnQkFDUjtZQUNKO1lBQ0FyQixVQUFVc0IsS0FBSyxHQUFHRjtZQUNsQnBCLFVBQVV1QixRQUFRLEdBQUdKO1lBQ3JCLElBQUlLLFlBQVk7WUFDaEIsSUFBSUMsYUFBYTtZQUNqQnBCLEVBQUUsb0JBQ0dHLFFBQVEsR0FDUkMsSUFBSSxDQUFDLENBQUNDLEdBQUdDO2dCQUNWLE9BQVFEO29CQUNKLEtBQUs7d0JBQ0RjLFlBQVluQixFQUFFTSxJQUFJQyxJQUFJO3dCQUN0QjtvQkFDSixLQUFLO3dCQUNEYSxhQUFhcEIsRUFBRU0sSUFBSUMsSUFBSTtnQkFDL0I7WUFDSjtZQUNBWixVQUFVMEIsS0FBSyxHQUFHRjtZQUNsQnhCLFVBQVUyQixNQUFNLEdBQUdGO1lBQ25CekIsVUFBVTRCLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDcEMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDRCxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBR2MsRUFBRSxPQUFPd0IsSUFBSSxDQUFDO1lBQ3pFLElBQUlDLFdBQVcsRUFBRTtZQUNqQixJQUFJQyxLQUFLO1lBQ1QxQixFQUFFLHFCQUNHRyxRQUFRLEdBQ1JDLElBQUksQ0FBQyxDQUFDQyxHQUFHQztnQkFDVixPQUFRRDtvQkFDSixLQUFLO3dCQUNEb0IsV0FBV3pCLEVBQUVNLElBQUlDLElBQUksR0FBR1MsS0FBSyxDQUFDO3dCQUM5QjtvQkFDSixLQUFLO3dCQUNEVSxLQUFLMUIsRUFBRU0sSUFBSUMsSUFBSTt3QkFDZjtnQkFDUjtZQUNKO1lBQ0FaLFVBQVUrQixFQUFFLEdBQUdBO1lBQ2YvQixVQUFVZ0MsSUFBSSxHQUFHRjtZQUNqQjlCLFVBQVVpQyxXQUFXLEdBQUc1QixFQUFFLHFCQUFxQk8sSUFBSSxNQUFNO1lBQ3pEWixVQUFVa0MsZUFBZSxHQUFHN0IsRUFBRSxxQkFBcUJPLElBQUksTUFBTTtZQUM3RCxJQUFJdUIsYUFBYTtZQUNqQjlCLEVBQUUscUJBQ0dHLFFBQVEsR0FDUkMsSUFBSSxDQUFDLENBQUNDLEdBQUdDO2dCQUNWLE9BQVFEO29CQUNKLEtBQUs7d0JBQ0R5QixhQUFhOUIsRUFBRU0sSUFBSUMsSUFBSTt3QkFDdkI7Z0JBQ1I7WUFDSjtZQUNBWixVQUFVb0MsTUFBTSxHQUFHRDtZQUNuQixJQUFJRSxZQUFZO1lBQ2hCaEMsRUFBRSxxQkFDR0csUUFBUSxHQUNSQyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7Z0JBQ1YsT0FBUUQ7b0JBQ0osS0FBSzt3QkFDRDJCLFlBQVloQyxFQUFFTSxJQUFJQyxJQUFJO3dCQUN0QjtnQkFDUjtZQUNKO1lBQ0FaLFVBQVVzQyxLQUFLLEdBQUdEO1lBQ2xCLElBQUlFLGNBQWM7WUFDbEIsSUFBSUMsT0FBTztZQUNYbkMsRUFBRSxxQkFDR0csUUFBUSxHQUNSQyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7Z0JBQ1YsT0FBUUQ7b0JBQ0osS0FBSzt3QkFDRDhCLE9BQU9uQyxFQUFFTSxJQUFJQyxJQUFJO3dCQUNqQjtvQkFDSixLQUFLO3dCQUNEMkIsY0FBY2xDLEVBQUVNLElBQUlDLElBQUk7d0JBQ3hCO2dCQUNSO1lBQ0o7WUFDQVosVUFBVXdDLElBQUksR0FBR0E7WUFDakJ4QyxVQUFVeUMsT0FBTyxHQUFHRjtZQUNwQixJQUFLLElBQUlHLElBQUksR0FBR0EsS0FBSyxHQUFHQSxJQUFLO2dCQUN6QixJQUFJQyxPQUFPO2dCQUNYdEMsRUFBRSxDQUFDLFlBQVksRUFBRXFDLEVBQUUsQ0FBQyxDQUFDLEVBQ2hCbEMsUUFBUSxHQUNSQyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7b0JBQ1YsT0FBUUQ7d0JBQ0osS0FBSzs0QkFDRGlDLE9BQU90QyxFQUFFTSxJQUFJQyxJQUFJO29CQUN6QjtnQkFDSjtnQkFDQSxPQUFROEI7b0JBQ0osS0FBSzt3QkFDRDFDLFVBQVU0QyxNQUFNLENBQUNDLElBQUksR0FBR0Y7d0JBQ3hCO29CQUNKLEtBQUs7d0JBQ0QzQyxVQUFVNEMsTUFBTSxDQUFDRSxLQUFLLEdBQUdIO3dCQUN6QjtvQkFDSixLQUFLO3dCQUNEM0MsVUFBVTRDLE1BQU0sQ0FBQ0csT0FBTyxHQUFHSjt3QkFDM0I7b0JBQ0osS0FBSzt3QkFDRDNDLFVBQVU0QyxNQUFNLENBQUNJLEdBQUcsR0FBR0w7d0JBQ3ZCO29CQUNKLEtBQUs7d0JBQ0QzQyxVQUFVNEMsTUFBTSxDQUFDSyxJQUFJLEdBQUdOO3dCQUN4QjtvQkFDSixLQUFLO3dCQUNEM0MsVUFBVTRDLE1BQU0sQ0FBQ00sTUFBTSxHQUFHUCxLQUFLdEIsS0FBSyxDQUFDO3dCQUNyQztvQkFDSixLQUFLO3dCQUNEckIsVUFBVTRDLE1BQU0sQ0FBQ08sR0FBRyxHQUFHUjt3QkFDdkI7Z0JBQ1I7WUFDSjtZQUNBLElBQUlTLFdBQVc7WUFDZixNQUFNQyxXQUFXdkQ7WUFDakIsSUFBSyxJQUFJWSxJQUFJLEdBQUdBLElBQUkyQyxTQUFTQyxNQUFNLEVBQUU1QyxJQUFLO2dCQUN0QyxJQUFJMkMsUUFBUSxDQUFDM0MsRUFBRSxLQUFLLE9BQ2hCMkMsUUFBUSxDQUFDM0MsSUFBSSxFQUFFLEtBQUssT0FDcEIyQyxRQUFRLENBQUMzQyxJQUFJLEVBQUUsS0FBSyxPQUNwQjJDLFFBQVEsQ0FBQzNDLElBQUksRUFBRSxLQUFLLEtBQUs7b0JBQ3pCMEMsV0FBV0MsU0FBU0UsU0FBUyxDQUFDN0MsSUFBSSxHQUFHMkMsU0FBU0MsTUFBTTtvQkFDcEQ7Z0JBQ0o7WUFDSjtZQUNBdEQsVUFBVXdELElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDOUQsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUdULFFBQVF3RSxPQUFPLEVBQUV6RCxVQUFVK0IsRUFBRSxFQUFFLENBQUMsRUFBRXFCLFNBQVNNLFdBQVcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHeEUsb0JBQW9CeUUsTUFBTSxFQUFFLENBQUMsRUFBRTNELFVBQVVvQyxNQUFNLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFcEMsVUFBVW9DLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU3QixVQUFVLEdBQUcsRUFBRVAsVUFBVTBCLEtBQUssQ0FBQyxDQUFDLEVBQUUxQixVQUFVZSxTQUFTLENBQUMsRUFBRSxFQUFFZixVQUFVd0MsSUFBSSxDQUFDLEVBQUUsRUFBRXhDLFVBQVVrQixNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDMVMsT0FBT2xCO1FBQ1g7UUFDQTs7Ozs7O1NBTUMsR0FDRCxJQUFJLENBQUM0RCxNQUFNLEdBQUcsT0FBT0MsT0FBT3pDLE9BQU8sQ0FBQztZQUNoQ3lDLFFBQVE5RCxtQkFBbUI4RDtZQUMzQixNQUFNQyxtQkFBbUIsSUFBSSxDQUFDdkUsVUFBVSxDQUFDLEVBQUU7WUFDM0MsTUFBTXdFLGFBQWEsRUFBRTtZQUNyQixNQUFNLEVBQUU3RCxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ1osT0FBTyxDQUFDLG1CQUFtQixFQUFFcUUsTUFBTSwrQ0FBK0MsRUFBRXpDLEtBQUssQ0FBQztZQUN6SSxNQUFNZixJQUFJLENBQUMsR0FBR3ZCLFVBQVV3QixJQUFJLEVBQUVKO1lBQzlCLElBQUlLLFlBQVk7WUFDaEJGLEVBQUUsa0JBQWtCSSxJQUFJLENBQUMsQ0FBQ0MsR0FBR3NEO2dCQUN6QixNQUFNaEUsWUFBWSxJQUFJaEIsU0FBU2lCLGdCQUFnQjtnQkFDL0NJLEVBQUUyRCxFQUFFeEQsUUFBUSxFQUFFQyxJQUFJLENBQUMsQ0FBQ0MsR0FBR3NEO29CQUNuQixJQUFJM0QsRUFBRTJELEdBQUdwRCxJQUFJLE9BQU8sVUFDaEI7b0JBQ0osT0FBUUY7d0JBQ0osS0FBSzs0QkFDRFYsVUFBVStCLEVBQUUsR0FBRzFCLEVBQUUyRCxHQUFHcEQsSUFBSTs0QkFDeEI7d0JBQ0osS0FBSzs0QkFDREwsWUFBWUYsRUFBRTJELEdBQUdwRCxJQUFJOzRCQUNyQlosVUFBVWEsT0FBTyxHQUFHLENBQUMsR0FBRzVCLFFBQVE2QixXQUFXLEVBQUVQOzRCQUM3Qzt3QkFDSixLQUFLOzRCQUNELElBQUkwRCxVQUFVOzRCQUNkNUQsRUFBRTJELEdBQ0d4RCxRQUFRLEdBQ1JDLElBQUksQ0FBQyxDQUFDQyxHQUFHQztnQ0FDVixJQUFJdUQ7Z0NBQ0osSUFBSUQsV0FBVyxJQUFJO29DQUNmO2dDQUNKO2dDQUNBLElBQUksQ0FBQyxDQUFDQyxLQUFLN0QsRUFBRU0sSUFBSWtCLElBQUksQ0FBQyxPQUFNLE1BQU8sUUFBUXFDLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0MsRUFBRSxDQUFDLEVBQUMsTUFBTyxLQUFLO29DQUNuRkYsVUFBVTVELEVBQUVNLElBQUlrQixJQUFJLENBQUMsV0FBVztnQ0FDcEM7NEJBQ0o7NEJBQ0E3QixVQUFVd0QsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUNoRSxPQUFPLENBQUMsRUFBRXNFLGlCQUFpQixDQUFDLEVBQUVHLFFBQVEsQ0FBQzt3QkFDcEUsS0FBSzs0QkFDRGpFLFVBQVVlLFNBQVMsR0FBR1YsRUFBRTJELEdBQUdwRCxJQUFJOzRCQUMvQjt3QkFDSixLQUFLOzRCQUNEWixVQUFVd0MsSUFBSSxHQUFHbkMsRUFBRTJELEdBQUdwRCxJQUFJOzRCQUMxQjt3QkFDSixLQUFLOzRCQUNEWixVQUFVc0IsS0FBSyxHQUFHakIsRUFBRTJELEdBQUdwRCxJQUFJOzRCQUMzQjt3QkFDSixLQUFLOzRCQUNEWixVQUFVdUIsUUFBUSxHQUFHbEIsRUFBRTJELEdBQUdwRCxJQUFJOzRCQUM5Qjt3QkFDSixLQUFLOzRCQUNEWixVQUFVaUIsSUFBSSxHQUFHWixFQUFFMkQsR0FBR3BELElBQUk7NEJBQzFCO3dCQUNKLEtBQUs7NEJBQ0RaLFVBQVVrQixNQUFNLEdBQUdiLEVBQUUyRCxHQUFHcEQsSUFBSTs0QkFDNUI7b0JBQ1I7Z0JBQ0o7Z0JBQ0FtRCxVQUFVLENBQUNyRCxFQUFFLEdBQUdWO1lBQ3BCO1lBQ0ErRCxXQUFXSyxLQUFLO1lBQ2hCTCxXQUFXSyxLQUFLO1lBQ2hCTCxXQUFXSyxLQUFLO1lBQ2hCTCxXQUFXTSxHQUFHO1lBQ2QsSUFBSyxJQUFJM0QsSUFBSSxHQUFHQSxJQUFJcUQsV0FBV1QsTUFBTSxFQUFFNUMsSUFBSztnQkFDeEMsSUFBSXFELFVBQVUsQ0FBQ3JELEVBQUUsQ0FBQzhDLElBQUksSUFBSSxJQUFJO29CQUMxQjtnQkFDSjtnQkFDQSxNQUFNdEQsT0FBTyxNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUMyRCxVQUFVLENBQUNyRCxFQUFFLENBQUM4QyxJQUFJO2dCQUNyRCxNQUFNbkQsSUFBSSxDQUFDLEdBQUd2QixVQUFVd0IsSUFBSSxFQUFFSixLQUFLQSxJQUFJO2dCQUN2QyxJQUFJc0IsWUFBWTtnQkFDaEIsSUFBSUMsYUFBYTtnQkFDakJwQixFQUFFLG9CQUNHRyxRQUFRLEdBQ1JDLElBQUksQ0FBQyxDQUFDQyxHQUFHQztvQkFDVixPQUFRRDt3QkFDSixLQUFLOzRCQUNEYyxZQUFZbkIsRUFBRU0sSUFBSUMsSUFBSTs0QkFDdEI7d0JBQ0osS0FBSzs0QkFDRGEsYUFBYXBCLEVBQUVNLElBQUlDLElBQUk7b0JBQy9CO2dCQUNKO2dCQUNBbUQsVUFBVSxDQUFDckQsRUFBRSxDQUFDZ0IsS0FBSyxHQUFHRjtnQkFDdEJ1QyxVQUFVLENBQUNyRCxFQUFFLENBQUNpQixNQUFNLEdBQUdGO2dCQUN2QnNDLFVBQVUsQ0FBQ3JELEVBQUUsQ0FBQ2tCLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDcEMsT0FBTyxDQUFDLEVBQUVzRSxpQkFBaUIsQ0FBQyxHQUFHekQsRUFBRSxPQUFPd0IsSUFBSSxDQUFDO2dCQUMzRSxJQUFJQyxXQUFXLEVBQUU7Z0JBQ2pCekIsRUFBRSxxQkFDR0csUUFBUSxHQUNSQyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7b0JBQ1YsT0FBUUQ7d0JBQ0osS0FBSzs0QkFDRG9CLFdBQVd6QixFQUFFTSxJQUFJQyxJQUFJLEdBQUdTLEtBQUssQ0FBQzs0QkFDOUI7b0JBQ1I7Z0JBQ0o7Z0JBQ0EwQyxVQUFVLENBQUNyRCxFQUFFLENBQUNzQixJQUFJLEdBQUdGO2dCQUNyQmlDLFVBQVUsQ0FBQ3JELEVBQUUsQ0FBQ3VCLFdBQVcsR0FBRzVCLEVBQUUscUJBQXFCTyxJQUFJLE1BQU07Z0JBQzdEbUQsVUFBVSxDQUFDckQsRUFBRSxDQUFDd0IsZUFBZSxHQUFHN0IsRUFBRSxxQkFBcUJPLElBQUksTUFBTTtnQkFDakUsSUFBSXVCLGFBQWE7Z0JBQ2pCOUIsRUFBRSxxQkFDR0csUUFBUSxHQUNSQyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7b0JBQ1YsT0FBUUQ7d0JBQ0osS0FBSzs0QkFDRHlCLGFBQWE5QixFQUFFTSxJQUFJQyxJQUFJOzRCQUN2QjtvQkFDUjtnQkFDSjtnQkFDQW1ELFVBQVUsQ0FBQ3JELEVBQUUsQ0FBQzBCLE1BQU0sR0FBR0Q7Z0JBQ3ZCLElBQUlFLFlBQVk7Z0JBQ2hCaEMsRUFBRSxxQkFDR0csUUFBUSxHQUNSQyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7b0JBQ1YsT0FBUUQ7d0JBQ0osS0FBSzs0QkFDRDJCLFlBQVloQyxFQUFFTSxJQUFJQyxJQUFJOzRCQUN0QjtvQkFDUjtnQkFDSjtnQkFDQW1ELFVBQVUsQ0FBQ3JELEVBQUUsQ0FBQzRCLEtBQUssR0FBR0Q7Z0JBQ3RCLElBQUlFLGNBQWM7Z0JBQ2xCbEMsRUFBRSxxQkFDR0csUUFBUSxHQUNSQyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7b0JBQ1YsT0FBUUQ7d0JBQ0osS0FBSzs0QkFDRDZCLGNBQWNsQyxFQUFFTSxJQUFJQyxJQUFJOzRCQUN4QjtvQkFDUjtnQkFDSjtnQkFDQW1ELFVBQVUsQ0FBQ3JELEVBQUUsQ0FBQytCLE9BQU8sR0FBR0Y7Z0JBQ3hCLElBQUssSUFBSUcsSUFBSSxHQUFHQSxLQUFLLEdBQUdBLElBQUs7b0JBQ3pCLElBQUlDLE9BQU87b0JBQ1h0QyxFQUFFLENBQUMsWUFBWSxFQUFFcUMsRUFBRSxDQUFDLENBQUMsRUFDaEJsQyxRQUFRLEdBQ1JDLElBQUksQ0FBQyxDQUFDQyxHQUFHQzt3QkFDVixPQUFRRDs0QkFDSixLQUFLO2dDQUNEaUMsT0FBT3RDLEVBQUVNLElBQUlDLElBQUk7d0JBQ3pCO29CQUNKO29CQUNBLE9BQVE4Qjt3QkFDSixLQUFLOzRCQUNEcUIsVUFBVSxDQUFDckQsRUFBRSxDQUFDa0MsTUFBTSxDQUFDQyxJQUFJLEdBQUdGOzRCQUM1Qjt3QkFDSixLQUFLOzRCQUNEb0IsVUFBVSxDQUFDckQsRUFBRSxDQUFDa0MsTUFBTSxDQUFDRSxLQUFLLEdBQUdIOzRCQUM3Qjt3QkFDSixLQUFLOzRCQUNEb0IsVUFBVSxDQUFDckQsRUFBRSxDQUFDa0MsTUFBTSxDQUFDRyxPQUFPLEdBQUdKOzRCQUMvQjt3QkFDSixLQUFLOzRCQUNEb0IsVUFBVSxDQUFDckQsRUFBRSxDQUFDa0MsTUFBTSxDQUFDSSxHQUFHLEdBQUdMOzRCQUMzQjt3QkFDSixLQUFLOzRCQUNEb0IsVUFBVSxDQUFDckQsRUFBRSxDQUFDa0MsTUFBTSxDQUFDSyxJQUFJLEdBQUdOOzRCQUM1Qjt3QkFDSixLQUFLOzRCQUNEb0IsVUFBVSxDQUFDckQsRUFBRSxDQUFDa0MsTUFBTSxDQUFDTSxNQUFNLEdBQUdQLEtBQUt0QixLQUFLLENBQUM7NEJBQ3pDO3dCQUNKLEtBQUs7NEJBQ0QwQyxVQUFVLENBQUNyRCxFQUFFLENBQUNrQyxNQUFNLENBQUNPLEdBQUcsR0FBR1I7NEJBQzNCO29CQUNSO2dCQUNKO2dCQUNBLElBQUlTLFdBQVc7Z0JBQ2YsTUFBTUMsV0FBV1UsVUFBVSxDQUFDckQsRUFBRSxDQUFDOEMsSUFBSTtnQkFDbkMsSUFBSyxJQUFJOUMsSUFBSSxHQUFHQSxJQUFJMkMsU0FBU0MsTUFBTSxFQUFFNUMsSUFBSztvQkFDdEMsSUFBSTJDLFFBQVEsQ0FBQzNDLEVBQUUsS0FBSyxPQUNoQjJDLFFBQVEsQ0FBQzNDLElBQUksRUFBRSxLQUFLLE9BQ3BCMkMsUUFBUSxDQUFDM0MsSUFBSSxFQUFFLEtBQUssT0FDcEIyQyxRQUFRLENBQUMzQyxJQUFJLEVBQUUsS0FBSyxLQUFLO3dCQUN6QjBDLFdBQVdDLFNBQVNFLFNBQVMsQ0FBQzdDLElBQUksR0FBRzJDLFNBQVNDLE1BQU07d0JBQ3BEO29CQUNKO2dCQUNKO2dCQUNBUyxVQUFVLENBQUNyRCxFQUFFLENBQUM4QyxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQzlELFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHVCxRQUFRd0UsT0FBTyxFQUFFTSxVQUFVLENBQUNyRCxFQUFFLENBQUNxQixFQUFFLEVBQUUsQ0FBQyxFQUFFcUIsU0FBU00sV0FBVyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUd4RSxvQkFBb0J5RSxNQUFNLEVBQUUsQ0FBQyxFQUFFSSxVQUFVLENBQUNyRCxFQUFFLENBQUMwQixNQUFNLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFMkIsVUFBVSxDQUFDckQsRUFBRSxDQUFDMEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTdCLFVBQVUsR0FBRyxFQUFFd0QsVUFBVSxDQUFDckQsRUFBRSxDQUFDZ0IsS0FBSyxDQUFDLENBQUMsRUFBRXFDLFVBQVUsQ0FBQ3JELEVBQUUsQ0FBQ0ssU0FBUyxDQUFDLEVBQUUsRUFBRWdELFVBQVUsQ0FBQ3JELEVBQUUsQ0FBQzhCLElBQUksQ0FBQyxFQUFFLEVBQUV1QixVQUFVLENBQUNyRCxFQUFFLENBQUNRLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUM5VTtZQUNBLE9BQU87Z0JBQ0hvRCxRQUFRUDtnQkFDUlEsYUFBYWxFLEVBQUUsOENBQThDTyxJQUFJLEdBQUc0RCxJQUFJLE1BQU0sT0FDMUVuRSxFQUFFLDhDQUE4Q08sSUFBSSxHQUFHNEQsSUFBSSxNQUFNLE1BQy9ELE9BQ0E7WUFDVjtRQUNKO0lBQ0o7QUFDSjtBQUNBNUYsa0JBQWUsR0FBR08sUUFDbEIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL2Jvb2tzL2xpYmdlbi5qcz9kMGU0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY2hlZXJpb18xID0gcmVxdWlyZShcImNoZWVyaW9cIik7XG5jb25zdCBtb2RlbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9tb2RlbHNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3QgYXNjaWlfdXJsX2VuY29kZXJfMSA9IHJlcXVpcmUoXCJhc2NpaS11cmwtZW5jb2RlclwiKTtcbmNsYXNzIExpYmdlbiBleHRlbmRzIG1vZGVsc18xLkJvb2tQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmV4dGVuc2lvbnMgPSBbJy5ycycsICcuaXMnLCAnLnN0J107XG4gICAgICAgIHRoaXMuYmFzZVVybCA9ICdodHRwOi8vbGliZ2VuJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5hbWUgPSAnTGliZ2VuJztcbiAgICAgICAgdGhpcy5kb3dubG9hZElQID0gJ2h0dHA6Ly82Mi4xODIuODYuMTQwJztcbiAgICAgICAgdGhpcy5sb2dvID0gJ2h0dHBzOi8vZi1kcm9pZC5vcmcvcmVwby9jb20ubWFudWVsdmFyZ2FzdGFwaWEubGliZ2VuL2VuLVVTL2ljb25fVFAyZXp2TXdXNW92RS13aXhhZ0YxV0NUaE1Vb2hYM1Rfa3pZaHVaUThhWT0ucG5nJztcbiAgICAgICAgdGhpcy5jbGFzc1BhdGggPSAnQk9PS1MuTGliZ2VuJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNjcmFwZXMgYSBsaWdlbiBib29rIHBhZ2UgYnkgYm9vayBwYWdlIHVybFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYm9va1VybCAtIGxpZ2VuIGJvb2sgcGFnZSB1cmxcbiAgICAgICAgICogQHJldHVybnMge1Byb21pc2U8TGliZ2VuQm9vaz59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNjcmFwZUJvb2sgPSBhc3luYyAoYm9va1VybCkgPT4ge1xuICAgICAgICAgICAgYm9va1VybCA9IGVuY29kZVVSSUNvbXBvbmVudChib29rVXJsKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IG5ldyBtb2RlbHNfMS5MaWJnZW5Cb29rT2JqZWN0KCk7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuY2xpZW50LmdldChib29rVXJsKTtcbiAgICAgICAgICAgIGNvbnN0ICQgPSAoMCwgY2hlZXJpb18xLmxvYWQpKGRhdGEpO1xuICAgICAgICAgICAgbGV0IHJhd0F1dGhvciA9ICcnO1xuICAgICAgICAgICAgJCgndGJvZHkgPiB0cjplcSgxMCknKVxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgLmVhY2goKGksIGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhd0F1dGhvciA9ICQoZWwpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGFpbmVyLmF1dGhvcnMgPSAoMCwgdXRpbHNfMS5zcGxpdEF1dGhvcikocmF3QXV0aG9yKTtcbiAgICAgICAgICAgIGxldCBwdWJsaXNoZXIgPSAnJztcbiAgICAgICAgICAgICQoJ3Rib2R5ID4gdHI6ZXEoMTIpJylcbiAgICAgICAgICAgICAgICAuY2hpbGRyZW4oKVxuICAgICAgICAgICAgICAgIC5lYWNoKChpLCBlbCkgPT4ge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBwdWJsaXNoZXIgPSAkKGVsKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5wdWJsaXNoZXIgPSBwdWJsaXNoZXI7XG4gICAgICAgICAgICBsZXQgZXggPSAnJztcbiAgICAgICAgICAgIGxldCBzaXplID0gJyc7XG4gICAgICAgICAgICAkKCd0Ym9keSA+IHRyOmVxKDE4KScpXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAuZWFjaCgoaSwgZWwpID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSA9ICQoZWwpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBleCA9ICQoZWwpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGFpbmVyLmZvcm1hdCA9IGV4O1xuICAgICAgICAgICAgY29udGFpbmVyLnNpemUgPSBzaXplO1xuICAgICAgICAgICAgbGV0IGxhbmcgPSAnJztcbiAgICAgICAgICAgIGxldCBwYWdlID0gJyc7XG4gICAgICAgICAgICAkKCd0Ym9keSA+IHRyOmVxKDE0KScpXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAuZWFjaCgoaSwgZWwpID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGFuZyA9ICQoZWwpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlID0gJChlbCkudGV4dCgpLnNwbGl0KCcvJylbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5wYWdlcyA9IHBhZ2U7XG4gICAgICAgICAgICBjb250YWluZXIubGFuZ3VhZ2UgPSBsYW5nO1xuICAgICAgICAgICAgbGV0IHRlbXBUaXRsZSA9ICcnO1xuICAgICAgICAgICAgbGV0IHRlbXBWb2x1bWUgPSAnJztcbiAgICAgICAgICAgICQoJ3Rib2R5ID4gdHI6ZXEoMSknKVxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgLmVhY2goKGksIGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBUaXRsZSA9ICQoZWwpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wVm9sdW1lID0gJChlbCkudGV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGFpbmVyLnRpdGxlID0gdGVtcFRpdGxlO1xuICAgICAgICAgICAgY29udGFpbmVyLnZvbHVtZSA9IHRlbXBWb2x1bWU7XG4gICAgICAgICAgICBjb250YWluZXIuaW1hZ2UgPSBgJHt0aGlzLmJhc2VVcmx9JHt0aGlzLmV4dGVuc2lvbnNbMF19YCArICQoJ2ltZycpLmF0dHIoJ3NyYycpO1xuICAgICAgICAgICAgbGV0IHRlbXBJc2JuID0gW107XG4gICAgICAgICAgICBsZXQgaWQgPSAnJztcbiAgICAgICAgICAgICQoJ3Rib2R5ID4gdHI6ZXEoMTUpJylcbiAgICAgICAgICAgICAgICAuY2hpbGRyZW4oKVxuICAgICAgICAgICAgICAgIC5lYWNoKChpLCBlbCkgPT4ge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wSXNibiA9ICQoZWwpLnRleHQoKS5zcGxpdCgnLCAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZCA9ICQoZWwpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGFpbmVyLmlkID0gaWQ7XG4gICAgICAgICAgICBjb250YWluZXIuaXNibiA9IHRlbXBJc2JuO1xuICAgICAgICAgICAgY29udGFpbmVyLmRlc2NyaXB0aW9uID0gJCgndGJvZHkgPiB0cjplcSgzMSknKS50ZXh0KCkgfHwgJyc7XG4gICAgICAgICAgICBjb250YWluZXIudGFibGVPZkNvbnRlbnRzID0gJCgndGJvZHkgPiB0cjplcSgzMiknKS50ZXh0KCkgfHwgJyc7XG4gICAgICAgICAgICBsZXQgdGVtcFNlcmllcyA9ICcnO1xuICAgICAgICAgICAgJCgndGJvZHkgPiB0cjplcSgxMSknKVxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgLmVhY2goKGksIGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBTZXJpZXMgPSAkKGVsKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5zZXJpZXMgPSB0ZW1wU2VyaWVzO1xuICAgICAgICAgICAgbGV0IHRlbXBUb3BpYyA9ICcnO1xuICAgICAgICAgICAgJCgndGJvZHkgPiB0cjplcSgyMiknKVxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgLmVhY2goKGksIGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBUb3BpYyA9ICQoZWwpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGFpbmVyLnRvcGljID0gdGVtcFRvcGljO1xuICAgICAgICAgICAgbGV0IHRlbXBFZGl0aW9uID0gJyc7XG4gICAgICAgICAgICBsZXQgeWVhciA9ICcnO1xuICAgICAgICAgICAgJCgndGJvZHkgPiB0cjplcSgxMyknKVxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgLmVhY2goKGksIGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHllYXIgPSAkKGVsKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVkaXRpb24gPSAkKGVsKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRhaW5lci55ZWFyID0geWVhcjtcbiAgICAgICAgICAgIGNvbnRhaW5lci5lZGl0aW9uID0gdGVtcEVkaXRpb247XG4gICAgICAgICAgICBmb3IgKGxldCBwID0gMjsgcCA8PSA4OyBwKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9ICcnO1xuICAgICAgICAgICAgICAgICQoYHRib2R5IHRyOmVxKCR7cH0pYClcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAgICAgLmVhY2goKGksIGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAgPSAkKGVsKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHApIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmhhc2hlcy5BSUNIID0gdGVtcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuaGFzaGVzLkNSQzMyID0gdGVtcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuaGFzaGVzLmVEb25rZXkgPSB0ZW1wO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5oYXNoZXMuTUQ1ID0gdGVtcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuaGFzaGVzLlNIQTEgPSB0ZW1wO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5oYXNoZXMuU0hBMjU2ID0gdGVtcC5zcGxpdCgnICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5oYXNoZXMuVFRIID0gdGVtcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCByZWFsTGluayA9ICcnO1xuICAgICAgICAgICAgY29uc3QgZmFrZUxpbmsgPSBib29rVXJsO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmYWtlTGluay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChmYWtlTGlua1tpXSA9PT0gJ20nICYmXG4gICAgICAgICAgICAgICAgICAgIGZha2VMaW5rW2kgKyAxXSA9PT0gJ2QnICYmXG4gICAgICAgICAgICAgICAgICAgIGZha2VMaW5rW2kgKyAyXSA9PT0gJzUnICYmXG4gICAgICAgICAgICAgICAgICAgIGZha2VMaW5rW2kgKyAzXSA9PT0gJz0nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlYWxMaW5rID0gZmFrZUxpbmsuc3Vic3RyaW5nKGkgKyA0LCBmYWtlTGluay5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250YWluZXIubGluayA9IGAke3RoaXMuZG93bmxvYWRJUH0vbWFpbi8keygwLCB1dGlsc18xLmZsb29ySUQpKGNvbnRhaW5lci5pZCl9LyR7cmVhbExpbmsudG9Mb3dlckNhc2UoKX0vJHsoMCwgYXNjaWlfdXJsX2VuY29kZXJfMS5lbmNvZGUpKGAke2NvbnRhaW5lci5zZXJpZXMgPT0gJycgPyAnJyA6IGAoJHtjb250YWluZXIuc2VyaWVzfSlgfSAke3Jhd0F1dGhvcn0gLSAke2NvbnRhaW5lci50aXRsZX0tJHtjb250YWluZXIucHVibGlzaGVyfSAoJHtjb250YWluZXIueWVhcn0pLiR7Y29udGFpbmVyLmZvcm1hdH1gKX1gO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNjcmFwZXMgYSBsaWJnZW4gc2VhcmNoIHBhZ2UgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgcmVzdWx0c1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkgLSB0aGUgbmFtZSBvZiB0aGUgYm9va1xuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW21heFJlc3VsdHM9MjVdIC0gbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0c1xuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxMaWJnZW5Cb29rW10+fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZWFyY2ggPSBhc3luYyAocXVlcnksIHBhZ2UgPSAxKSA9PiB7XG4gICAgICAgICAgICBxdWVyeSA9IGVuY29kZVVSSUNvbXBvbmVudChxdWVyeSk7XG4gICAgICAgICAgICBjb25zdCB3b3JraW5nRXh0ZW5zaW9uID0gdGhpcy5leHRlbnNpb25zWzBdO1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVycyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQoYCR7dGhpcy5iYXNlVXJsfS5ycy9zZWFyY2gucGhwP3JlcT0ke3F1ZXJ5fSZ2aWV3PXNpbXBsZSZyZXM9MjUmc29ydD1kZWYmc29ydG1vZGU9QVNDJnBhZ2U9JHtwYWdlfWApO1xuICAgICAgICAgICAgY29uc3QgJCA9ICgwLCBjaGVlcmlvXzEubG9hZCkoZGF0YSk7XG4gICAgICAgICAgICBsZXQgcmF3QXV0aG9yID0gJyc7XG4gICAgICAgICAgICAkKCd0YWJsZSB0Ym9keSB0cicpLmVhY2goKGksIGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBuZXcgbW9kZWxzXzEuTGliZ2VuQm9va09iamVjdCgpO1xuICAgICAgICAgICAgICAgICQoZS5jaGlsZHJlbikuZWFjaCgoaSwgZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJChlKS50ZXh0KCkgPT09ICdcXG5cXHRcXHRcXHRcXHQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuaWQgPSAkKGUpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdBdXRob3IgPSAkKGUpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXV0aG9ycyA9ICgwLCB1dGlsc18xLnNwbGl0QXV0aG9yKShyYXdBdXRob3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb3RMaW5rID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZWFjaCgoaSwgZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG90TGluayAhPSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoKF9hID0gJChlbCkuYXR0cignaHJlZicpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXQoMCkpID09PSAnYicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvdExpbmsgPSAkKGVsKS5hdHRyKCdocmVmJykgfHwgJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIubGluayA9IGAke3RoaXMuYmFzZVVybH0ke3dvcmtpbmdFeHRlbnNpb259LyR7cG90TGlua31gO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5wdWJsaXNoZXIgPSAkKGUpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIueWVhciA9ICQoZSkudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIucGFnZXMgPSAkKGUpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmxhbmd1YWdlID0gJChlKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zaXplID0gJChlKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mb3JtYXQgPSAkKGUpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lcnNbaV0gPSBjb250YWluZXI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRhaW5lcnMuc2hpZnQoKTtcbiAgICAgICAgICAgIGNvbnRhaW5lcnMuc2hpZnQoKTtcbiAgICAgICAgICAgIGNvbnRhaW5lcnMuc2hpZnQoKTtcbiAgICAgICAgICAgIGNvbnRhaW5lcnMucG9wKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRhaW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyc1tpXS5saW5rID09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5jbGllbnQuZ2V0KGNvbnRhaW5lcnNbaV0ubGluayk7XG4gICAgICAgICAgICAgICAgY29uc3QgJCA9ICgwLCBjaGVlcmlvXzEubG9hZCkoZGF0YS5kYXRhKTtcbiAgICAgICAgICAgICAgICBsZXQgdGVtcFRpdGxlID0gJyc7XG4gICAgICAgICAgICAgICAgbGV0IHRlbXBWb2x1bWUgPSAnJztcbiAgICAgICAgICAgICAgICAkKCd0Ym9keSA+IHRyOmVxKDEpJylcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAgICAgLmVhY2goKGksIGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBUaXRsZSA9ICQoZWwpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wVm9sdW1lID0gJChlbCkudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyc1tpXS50aXRsZSA9IHRlbXBUaXRsZTtcbiAgICAgICAgICAgICAgICBjb250YWluZXJzW2ldLnZvbHVtZSA9IHRlbXBWb2x1bWU7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyc1tpXS5pbWFnZSA9IGAke3RoaXMuYmFzZVVybH0ke3dvcmtpbmdFeHRlbnNpb259YCArICQoJ2ltZycpLmF0dHIoJ3NyYycpO1xuICAgICAgICAgICAgICAgIGxldCB0ZW1wSXNibiA9IFtdO1xuICAgICAgICAgICAgICAgICQoJ3Rib2R5ID4gdHI6ZXEoMTUpJylcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAgICAgLmVhY2goKGksIGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBJc2JuID0gJChlbCkudGV4dCgpLnNwbGl0KCcsICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyc1tpXS5pc2JuID0gdGVtcElzYm47XG4gICAgICAgICAgICAgICAgY29udGFpbmVyc1tpXS5kZXNjcmlwdGlvbiA9ICQoJ3Rib2R5ID4gdHI6ZXEoMzEpJykudGV4dCgpIHx8ICcnO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lcnNbaV0udGFibGVPZkNvbnRlbnRzID0gJCgndGJvZHkgPiB0cjplcSgzMiknKS50ZXh0KCkgfHwgJyc7XG4gICAgICAgICAgICAgICAgbGV0IHRlbXBTZXJpZXMgPSAnJztcbiAgICAgICAgICAgICAgICAkKCd0Ym9keSA+IHRyOmVxKDExKScpXG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgICAgIC5lYWNoKChpLCBlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wU2VyaWVzID0gJChlbCkudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyc1tpXS5zZXJpZXMgPSB0ZW1wU2VyaWVzO1xuICAgICAgICAgICAgICAgIGxldCB0ZW1wVG9waWMgPSAnJztcbiAgICAgICAgICAgICAgICAkKCd0Ym9keSA+IHRyOmVxKDIyKScpXG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgICAgIC5lYWNoKChpLCBlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wVG9waWMgPSAkKGVsKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb250YWluZXJzW2ldLnRvcGljID0gdGVtcFRvcGljO1xuICAgICAgICAgICAgICAgIGxldCB0ZW1wRWRpdGlvbiA9ICcnO1xuICAgICAgICAgICAgICAgICQoJ3Rib2R5ID4gdHI6ZXEoMTMpJylcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAgICAgLmVhY2goKGksIGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFZGl0aW9uID0gJChlbCkudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyc1tpXS5lZGl0aW9uID0gdGVtcEVkaXRpb247XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcCA9IDI7IHAgPD0gODsgcCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICQoYHRib2R5IHRyOmVxKCR7cH0pYClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZWFjaCgoaSwgZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcCA9ICQoZWwpLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcnNbaV0uaGFzaGVzLkFJQ0ggPSB0ZW1wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcnNbaV0uaGFzaGVzLkNSQzMyID0gdGVtcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJzW2ldLmhhc2hlcy5lRG9ua2V5ID0gdGVtcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJzW2ldLmhhc2hlcy5NRDUgPSB0ZW1wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcnNbaV0uaGFzaGVzLlNIQTEgPSB0ZW1wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcnNbaV0uaGFzaGVzLlNIQTI1NiA9IHRlbXAuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJzW2ldLmhhc2hlcy5UVEggPSB0ZW1wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCByZWFsTGluayA9ICcnO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZha2VMaW5rID0gY29udGFpbmVyc1tpXS5saW5rO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmFrZUxpbmsubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZha2VMaW5rW2ldID09PSAnbScgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGZha2VMaW5rW2kgKyAxXSA9PT0gJ2QnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWtlTGlua1tpICsgMl0gPT09ICc1JyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZmFrZUxpbmtbaSArIDNdID09PSAnPScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWxMaW5rID0gZmFrZUxpbmsuc3Vic3RyaW5nKGkgKyA0LCBmYWtlTGluay5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGFpbmVyc1tpXS5saW5rID0gYCR7dGhpcy5kb3dubG9hZElQfS9tYWluLyR7KDAsIHV0aWxzXzEuZmxvb3JJRCkoY29udGFpbmVyc1tpXS5pZCl9LyR7cmVhbExpbmsudG9Mb3dlckNhc2UoKX0vJHsoMCwgYXNjaWlfdXJsX2VuY29kZXJfMS5lbmNvZGUpKGAke2NvbnRhaW5lcnNbaV0uc2VyaWVzID09ICcnID8gJycgOiBgKCR7Y29udGFpbmVyc1tpXS5zZXJpZXN9KWB9ICR7cmF3QXV0aG9yfSAtICR7Y29udGFpbmVyc1tpXS50aXRsZX0tJHtjb250YWluZXJzW2ldLnB1Ymxpc2hlcn0gKCR7Y29udGFpbmVyc1tpXS55ZWFyfSkuJHtjb250YWluZXJzW2ldLmZvcm1hdH1gKX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXN1bHQ6IGNvbnRhaW5lcnMsXG4gICAgICAgICAgICAgICAgaGFzTmV4dFBhZ2U6ICQoJ3RhYmxlOmVxKDEpIHRib2R5IHRyIHRkOmVxKDEpIGZvbnQgYTplcSgwKScpLnRleHQoKS50cmltKCkgPT0gJ+KWuicgfHxcbiAgICAgICAgICAgICAgICAgICAgJCgndGFibGU6ZXEoMSkgdGJvZHkgdHIgdGQ6ZXEoMSkgZm9udCBhOmVxKDEpJykudGV4dCgpLnRyaW0oKSA9PSAn4pa6J1xuICAgICAgICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTGliZ2VuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGliZ2VuLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNoZWVyaW9fMSIsInJlcXVpcmUiLCJtb2RlbHNfMSIsInV0aWxzXzEiLCJhc2NpaV91cmxfZW5jb2Rlcl8xIiwiTGliZ2VuIiwiQm9va1BhcnNlciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiZXh0ZW5zaW9ucyIsImJhc2VVcmwiLCJuYW1lIiwiZG93bmxvYWRJUCIsImxvZ28iLCJjbGFzc1BhdGgiLCJzY3JhcGVCb29rIiwiYm9va1VybCIsImVuY29kZVVSSUNvbXBvbmVudCIsImNvbnRhaW5lciIsIkxpYmdlbkJvb2tPYmplY3QiLCJkYXRhIiwiY2xpZW50IiwiZ2V0IiwiJCIsImxvYWQiLCJyYXdBdXRob3IiLCJjaGlsZHJlbiIsImVhY2giLCJpIiwiZWwiLCJ0ZXh0IiwiYXV0aG9ycyIsInNwbGl0QXV0aG9yIiwicHVibGlzaGVyIiwiZXgiLCJzaXplIiwiZm9ybWF0IiwibGFuZyIsInBhZ2UiLCJzcGxpdCIsInBhZ2VzIiwibGFuZ3VhZ2UiLCJ0ZW1wVGl0bGUiLCJ0ZW1wVm9sdW1lIiwidGl0bGUiLCJ2b2x1bWUiLCJpbWFnZSIsImF0dHIiLCJ0ZW1wSXNibiIsImlkIiwiaXNibiIsImRlc2NyaXB0aW9uIiwidGFibGVPZkNvbnRlbnRzIiwidGVtcFNlcmllcyIsInNlcmllcyIsInRlbXBUb3BpYyIsInRvcGljIiwidGVtcEVkaXRpb24iLCJ5ZWFyIiwiZWRpdGlvbiIsInAiLCJ0ZW1wIiwiaGFzaGVzIiwiQUlDSCIsIkNSQzMyIiwiZURvbmtleSIsIk1ENSIsIlNIQTEiLCJTSEEyNTYiLCJUVEgiLCJyZWFsTGluayIsImZha2VMaW5rIiwibGVuZ3RoIiwic3Vic3RyaW5nIiwibGluayIsImZsb29ySUQiLCJ0b0xvd2VyQ2FzZSIsImVuY29kZSIsInNlYXJjaCIsInF1ZXJ5Iiwid29ya2luZ0V4dGVuc2lvbiIsImNvbnRhaW5lcnMiLCJlIiwicG90TGluayIsIl9hIiwiYXQiLCJzaGlmdCIsInBvcCIsInJlc3VsdCIsImhhc05leHRQYWdlIiwidHJpbSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/books/libgen.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/comics/getComics.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/comics/getComics.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nconst s = async ()=>{};\nclass getComics extends models_1.ComicParser {\n    constructor(){\n        super(...arguments);\n        this.baseUrl = \"https://getcomics.info/\";\n        this.name = \"GetComics\";\n        this.logo = \"https://i0.wp.com/getcomics.info/share/uploads/2020/04/cropped-GetComics-Favicon.png?fit=192%2C192&ssl=1\";\n        this.classPath = \"COMICS.GetComics\";\n        this.search = async (query, page = 1)=>{\n            query = encodeURIComponent(query);\n            const { data } = await this.client.get(`${this.baseUrl}/page/${page ? page : 1}/?s=${query}`);\n            const $ = (0, cheerio_1.load)(data);\n            const lastPage = $(\"section section nav:eq(1) ul li:last\").text();\n            const res = {\n                containers: [],\n                hasNextPage: $(\"a.pagination-older\").text() != \"\"\n            };\n            $(\"article\").each((i, el)=>{\n                const container = new models_1.GetComicsComicsObject();\n                const vals = (0, utils_1.parsePostInfo)($(el).children(\"div.post-info\").text());\n                container.image = $(el).children(\"div.post-header-image\").children(\"a\").children(\"img\").attr(\"src\") || \"\";\n                container.title = $(el).children(\"div.post-info\").children(\"h1\").text();\n                container.excerpt = $(el).children(\"div.post-info\").children(\"p.post-excerpt\").text();\n                container.year = vals.year;\n                container.size = vals.size;\n                container.description = vals.description;\n                const link = $(el).children(\"div.post-header-image\").children(\"a\").attr(\"href\");\n                container.ufile = link || \"\";\n                res.containers.push(container);\n            });\n            for (const container of res.containers){\n                if (container.ufile != \"\") {\n                    const { data } = await this.client.get(container.ufile);\n                    const $ = (0, cheerio_1.load)(data);\n                    container.download = $('.aio-red[title=\"Download Now\"]').attr(\"href\") || \"\";\n                    container.readOnline = $('.aio-red[title=\"Read Online\"]').attr(\"href\") || \"\";\n                    container.ufile = $(\".aio-blue\").attr(\"href\") || \"\";\n                    container.mega = $(\".aio-purple\").attr(\"href\") || \"\";\n                    container.mediafire = $(\".aio-orange\").attr(\"href\") || \"\";\n                    container.zippyshare = $(\".aio-gray\").attr(\"href\") || \"\";\n                }\n            }\n            return res;\n        };\n    }\n}\nexports[\"default\"] = getComics; //# sourceMappingURL=getComics.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL2NvbWljcy9nZXRDb21pY3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsWUFBWUMsbUJBQU9BLENBQUMsaUdBQVM7QUFDbkMsTUFBTUMsV0FBV0QsbUJBQU9BLENBQUMsa0lBQWM7QUFDdkMsTUFBTUUsVUFBVUYsbUJBQU9BLENBQUMsZ0lBQWE7QUFDckMsTUFBTUcsSUFBSSxXQUFjO0FBQ3hCLE1BQU1DLGtCQUFrQkgsU0FBU0ksV0FBVztJQUN4Q0MsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLE9BQU8sR0FBRztRQUNmLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLFNBQVMsR0FBRztRQUNqQixJQUFJLENBQUNDLE1BQU0sR0FBRyxPQUFPQyxPQUFPQyxPQUFPLENBQUM7WUFDaENELFFBQVFFLG1CQUFtQkY7WUFDM0IsTUFBTSxFQUFFRyxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ1YsT0FBTyxDQUFDLE1BQU0sRUFBRU0sT0FBT0EsT0FBTyxFQUFFLElBQUksRUFBRUQsTUFBTSxDQUFDO1lBQzVGLE1BQU1NLElBQUksQ0FBQyxHQUFHcEIsVUFBVXFCLElBQUksRUFBRUo7WUFDOUIsTUFBTUssV0FBV0YsRUFBRSx3Q0FBd0NHLElBQUk7WUFDL0QsTUFBTUMsTUFBTTtnQkFDUkMsWUFBWSxFQUFFO2dCQUNkQyxhQUFhTixFQUFFLHNCQUFzQkcsSUFBSSxNQUFNO1lBQ25EO1lBQ0FILEVBQUUsV0FBV08sSUFBSSxDQUFDLENBQUNDLEdBQUdDO2dCQUNsQixNQUFNQyxZQUFZLElBQUk1QixTQUFTNkIscUJBQXFCO2dCQUNwRCxNQUFNQyxPQUFPLENBQUMsR0FBRzdCLFFBQVE4QixhQUFhLEVBQUViLEVBQUVTLElBQUlLLFFBQVEsQ0FBQyxpQkFBaUJYLElBQUk7Z0JBQzVFTyxVQUFVSyxLQUFLLEdBQ1hmLEVBQUVTLElBQUlLLFFBQVEsQ0FBQyx5QkFBeUJBLFFBQVEsQ0FBQyxLQUFLQSxRQUFRLENBQUMsT0FBT0UsSUFBSSxDQUFDLFVBQVU7Z0JBQ3pGTixVQUFVTyxLQUFLLEdBQUdqQixFQUFFUyxJQUFJSyxRQUFRLENBQUMsaUJBQWlCQSxRQUFRLENBQUMsTUFBTVgsSUFBSTtnQkFDckVPLFVBQVVRLE9BQU8sR0FBR2xCLEVBQUVTLElBQUlLLFFBQVEsQ0FBQyxpQkFBaUJBLFFBQVEsQ0FBQyxrQkFBa0JYLElBQUk7Z0JBQ25GTyxVQUFVUyxJQUFJLEdBQUdQLEtBQUtPLElBQUk7Z0JBQzFCVCxVQUFVVSxJQUFJLEdBQUdSLEtBQUtRLElBQUk7Z0JBQzFCVixVQUFVVyxXQUFXLEdBQUdULEtBQUtTLFdBQVc7Z0JBQ3hDLE1BQU1DLE9BQU90QixFQUFFUyxJQUFJSyxRQUFRLENBQUMseUJBQXlCQSxRQUFRLENBQUMsS0FBS0UsSUFBSSxDQUFDO2dCQUN4RU4sVUFBVWEsS0FBSyxHQUFHRCxRQUFRO2dCQUMxQmxCLElBQUlDLFVBQVUsQ0FBQ21CLElBQUksQ0FBQ2Q7WUFDeEI7WUFDQSxLQUFLLE1BQU1BLGFBQWFOLElBQUlDLFVBQVUsQ0FBRTtnQkFDcEMsSUFBSUssVUFBVWEsS0FBSyxJQUFJLElBQUk7b0JBQ3ZCLE1BQU0sRUFBRTFCLElBQUksRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQ1csVUFBVWEsS0FBSztvQkFDdEQsTUFBTXZCLElBQUksQ0FBQyxHQUFHcEIsVUFBVXFCLElBQUksRUFBRUo7b0JBQzlCYSxVQUFVZSxRQUFRLEdBQUd6QixFQUFFLGtDQUFrQ2dCLElBQUksQ0FBQyxXQUFXO29CQUN6RU4sVUFBVWdCLFVBQVUsR0FBRzFCLEVBQUUsaUNBQWlDZ0IsSUFBSSxDQUFDLFdBQVc7b0JBQzFFTixVQUFVYSxLQUFLLEdBQUd2QixFQUFFLGFBQWFnQixJQUFJLENBQUMsV0FBVztvQkFDakROLFVBQVVpQixJQUFJLEdBQUczQixFQUFFLGVBQWVnQixJQUFJLENBQUMsV0FBVztvQkFDbEROLFVBQVVrQixTQUFTLEdBQUc1QixFQUFFLGVBQWVnQixJQUFJLENBQUMsV0FBVztvQkFDdkROLFVBQVVtQixVQUFVLEdBQUc3QixFQUFFLGFBQWFnQixJQUFJLENBQUMsV0FBVztnQkFDMUQ7WUFDSjtZQUNBLE9BQU9aO1FBQ1g7SUFDSjtBQUNKO0FBQ0ExQixrQkFBZSxHQUFHTyxXQUNsQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29uc3VtZXQrZXh0ZW5zaW9uc0AxLjUuNC9ub2RlX21vZHVsZXMvQGNvbnN1bWV0L2V4dGVuc2lvbnMvZGlzdC9wcm92aWRlcnMvY29taWNzL2dldENvbWljcy5qcz9jZjgyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY2hlZXJpb18xID0gcmVxdWlyZShcImNoZWVyaW9cIik7XG5jb25zdCBtb2RlbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9tb2RlbHNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3QgcyA9IGFzeW5jICgpID0+IHsgfTtcbmNsYXNzIGdldENvbWljcyBleHRlbmRzIG1vZGVsc18xLkNvbWljUGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5iYXNlVXJsID0gJ2h0dHBzOi8vZ2V0Y29taWNzLmluZm8vJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ0dldENvbWljcyc7XG4gICAgICAgIHRoaXMubG9nbyA9ICdodHRwczovL2kwLndwLmNvbS9nZXRjb21pY3MuaW5mby9zaGFyZS91cGxvYWRzLzIwMjAvMDQvY3JvcHBlZC1HZXRDb21pY3MtRmF2aWNvbi5wbmc/Zml0PTE5MiUyQzE5MiZzc2w9MSc7XG4gICAgICAgIHRoaXMuY2xhc3NQYXRoID0gJ0NPTUlDUy5HZXRDb21pY3MnO1xuICAgICAgICB0aGlzLnNlYXJjaCA9IGFzeW5jIChxdWVyeSwgcGFnZSA9IDEpID0+IHtcbiAgICAgICAgICAgIHF1ZXJ5ID0gZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5KTtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5jbGllbnQuZ2V0KGAke3RoaXMuYmFzZVVybH0vcGFnZS8ke3BhZ2UgPyBwYWdlIDogMX0vP3M9JHtxdWVyeX1gKTtcbiAgICAgICAgICAgIGNvbnN0ICQgPSAoMCwgY2hlZXJpb18xLmxvYWQpKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgbGFzdFBhZ2UgPSAkKCdzZWN0aW9uIHNlY3Rpb24gbmF2OmVxKDEpIHVsIGxpOmxhc3QnKS50ZXh0KCk7XG4gICAgICAgICAgICBjb25zdCByZXMgPSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyczogW10sXG4gICAgICAgICAgICAgICAgaGFzTmV4dFBhZ2U6ICQoJ2EucGFnaW5hdGlvbi1vbGRlcicpLnRleHQoKSAhPSAnJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAkKCdhcnRpY2xlJykuZWFjaCgoaSwgZWwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBuZXcgbW9kZWxzXzEuR2V0Q29taWNzQ29taWNzT2JqZWN0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFscyA9ICgwLCB1dGlsc18xLnBhcnNlUG9zdEluZm8pKCQoZWwpLmNoaWxkcmVuKCdkaXYucG9zdC1pbmZvJykudGV4dCgpKTtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuaW1hZ2UgPVxuICAgICAgICAgICAgICAgICAgICAkKGVsKS5jaGlsZHJlbignZGl2LnBvc3QtaGVhZGVyLWltYWdlJykuY2hpbGRyZW4oJ2EnKS5jaGlsZHJlbignaW1nJykuYXR0cignc3JjJykgfHwgJyc7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnRpdGxlID0gJChlbCkuY2hpbGRyZW4oJ2Rpdi5wb3N0LWluZm8nKS5jaGlsZHJlbignaDEnKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmV4Y2VycHQgPSAkKGVsKS5jaGlsZHJlbignZGl2LnBvc3QtaW5mbycpLmNoaWxkcmVuKCdwLnBvc3QtZXhjZXJwdCcpLnRleHQoKTtcbiAgICAgICAgICAgICAgICBjb250YWluZXIueWVhciA9IHZhbHMueWVhcjtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuc2l6ZSA9IHZhbHMuc2l6ZTtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZGVzY3JpcHRpb24gPSB2YWxzLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmsgPSAkKGVsKS5jaGlsZHJlbignZGl2LnBvc3QtaGVhZGVyLWltYWdlJykuY2hpbGRyZW4oJ2EnKS5hdHRyKCdocmVmJyk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnVmaWxlID0gbGluayB8fCAnJztcbiAgICAgICAgICAgICAgICByZXMuY29udGFpbmVycy5wdXNoKGNvbnRhaW5lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY29udGFpbmVyIG9mIHJlcy5jb250YWluZXJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lci51ZmlsZSAhPSAnJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuY2xpZW50LmdldChjb250YWluZXIudWZpbGUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCAkID0gKDAsIGNoZWVyaW9fMS5sb2FkKShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmRvd25sb2FkID0gJCgnLmFpby1yZWRbdGl0bGU9XCJEb3dubG9hZCBOb3dcIl0nKS5hdHRyKCdocmVmJykgfHwgJyc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5yZWFkT25saW5lID0gJCgnLmFpby1yZWRbdGl0bGU9XCJSZWFkIE9ubGluZVwiXScpLmF0dHIoJ2hyZWYnKSB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnVmaWxlID0gJCgnLmFpby1ibHVlJykuYXR0cignaHJlZicpIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIubWVnYSA9ICQoJy5haW8tcHVycGxlJykuYXR0cignaHJlZicpIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIubWVkaWFmaXJlID0gJCgnLmFpby1vcmFuZ2UnKS5hdHRyKCdocmVmJykgfHwgJyc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci56aXBweXNoYXJlID0gJCgnLmFpby1ncmF5JykuYXR0cignaHJlZicpIHx8ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0Q29taWNzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0Q29taWNzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNoZWVyaW9fMSIsInJlcXVpcmUiLCJtb2RlbHNfMSIsInV0aWxzXzEiLCJzIiwiZ2V0Q29taWNzIiwiQ29taWNQYXJzZXIiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImJhc2VVcmwiLCJuYW1lIiwibG9nbyIsImNsYXNzUGF0aCIsInNlYXJjaCIsInF1ZXJ5IiwicGFnZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImRhdGEiLCJjbGllbnQiLCJnZXQiLCIkIiwibG9hZCIsImxhc3RQYWdlIiwidGV4dCIsInJlcyIsImNvbnRhaW5lcnMiLCJoYXNOZXh0UGFnZSIsImVhY2giLCJpIiwiZWwiLCJjb250YWluZXIiLCJHZXRDb21pY3NDb21pY3NPYmplY3QiLCJ2YWxzIiwicGFyc2VQb3N0SW5mbyIsImNoaWxkcmVuIiwiaW1hZ2UiLCJhdHRyIiwidGl0bGUiLCJleGNlcnB0IiwieWVhciIsInNpemUiLCJkZXNjcmlwdGlvbiIsImxpbmsiLCJ1ZmlsZSIsInB1c2giLCJkb3dubG9hZCIsInJlYWRPbmxpbmUiLCJtZWdhIiwibWVkaWFmaXJlIiwiemlwcHlzaGFyZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/comics/getComics.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/comics/index.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/comics/index.js ***!
  \************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst getComics_1 = __importDefault(__webpack_require__(/*! ./getComics */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/comics/getComics.js\"));\nexports[\"default\"] = {\n    GetComics: getComics_1.default\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL2NvbWljcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsY0FBY1AsZ0JBQWdCUSxtQkFBT0EsQ0FBQywrSUFBYTtBQUN6REgsa0JBQWUsR0FBRztJQUFFSyxXQUFXSCxZQUFZRSxPQUFPO0FBQUMsR0FDbkQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL2NvbWljcy9pbmRleC5qcz85MzljIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZ2V0Q29taWNzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZ2V0Q29taWNzXCIpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHsgR2V0Q29taWNzOiBnZXRDb21pY3NfMS5kZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0Q29taWNzXzEiLCJyZXF1aXJlIiwiZGVmYXVsdCIsIkdldENvbWljcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/comics/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/index.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/index.js ***!
  \*****************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NEWS = exports.META = exports.MOVIES = exports.LIGHT_NOVELS = exports.COMICS = exports.BOOKS = exports.MANGA = exports.ANIME = void 0;\nconst anime_1 = __importDefault(__webpack_require__(/*! ./anime */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/index.js\"));\nexports.ANIME = anime_1.default;\nconst manga_1 = __importDefault(__webpack_require__(/*! ./manga */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/index.js\"));\nexports.MANGA = manga_1.default;\nconst light_novels_1 = __importDefault(__webpack_require__(/*! ./light-novels */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/light-novels/index.js\"));\nexports.LIGHT_NOVELS = light_novels_1.default;\nconst books_1 = __importDefault(__webpack_require__(/*! ./books */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/books/index.js\"));\nexports.BOOKS = books_1.default;\nconst comics_1 = __importDefault(__webpack_require__(/*! ./comics */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/comics/index.js\"));\nexports.COMICS = comics_1.default;\nconst movies_1 = __importDefault(__webpack_require__(/*! ./movies */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/index.js\"));\nexports.MOVIES = movies_1.default;\nconst meta_1 = __importDefault(__webpack_require__(/*! ./meta */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/index.js\"));\nexports.META = meta_1.default;\nconst news_1 = __importDefault(__webpack_require__(/*! ./news */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/news/index.js\"));\nexports.NEWS = news_1.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsWUFBWSxHQUFHQSxZQUFZLEdBQUdBLGNBQWMsR0FBR0Esb0JBQW9CLEdBQUdBLGNBQWMsR0FBR0EsYUFBYSxHQUFHQSxhQUFhLEdBQUdBLGFBQWEsR0FBRyxLQUFLO0FBQzVJLE1BQU1VLFVBQVVmLGdCQUFnQmdCLG1CQUFPQSxDQUFDLHNJQUFTO0FBQ2pEWCxhQUFhLEdBQUdVLFFBQVFFLE9BQU87QUFDL0IsTUFBTUMsVUFBVWxCLGdCQUFnQmdCLG1CQUFPQSxDQUFDLHNJQUFTO0FBQ2pEWCxhQUFhLEdBQUdhLFFBQVFELE9BQU87QUFDL0IsTUFBTUUsaUJBQWlCbkIsZ0JBQWdCZ0IsbUJBQU9BLENBQUMsb0pBQWdCO0FBQy9EWCxvQkFBb0IsR0FBR2MsZUFBZUYsT0FBTztBQUM3QyxNQUFNRyxVQUFVcEIsZ0JBQWdCZ0IsbUJBQU9BLENBQUMsc0lBQVM7QUFDakRYLGFBQWEsR0FBR2UsUUFBUUgsT0FBTztBQUMvQixNQUFNSSxXQUFXckIsZ0JBQWdCZ0IsbUJBQU9BLENBQUMsd0lBQVU7QUFDbkRYLGNBQWMsR0FBR2dCLFNBQVNKLE9BQU87QUFDakMsTUFBTUssV0FBV3RCLGdCQUFnQmdCLG1CQUFPQSxDQUFDLHdJQUFVO0FBQ25EWCxjQUFjLEdBQUdpQixTQUFTTCxPQUFPO0FBQ2pDLE1BQU1NLFNBQVN2QixnQkFBZ0JnQixtQkFBT0EsQ0FBQyxvSUFBUTtBQUMvQ1gsWUFBWSxHQUFHa0IsT0FBT04sT0FBTztBQUM3QixNQUFNTyxTQUFTeEIsZ0JBQWdCZ0IsbUJBQU9BLENBQUMsb0lBQVE7QUFDL0NYLFlBQVksR0FBR21CLE9BQU9QLE9BQU8sRUFDN0IsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL2luZGV4LmpzP2Q2N2EiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5FV1MgPSBleHBvcnRzLk1FVEEgPSBleHBvcnRzLk1PVklFUyA9IGV4cG9ydHMuTElHSFRfTk9WRUxTID0gZXhwb3J0cy5DT01JQ1MgPSBleHBvcnRzLkJPT0tTID0gZXhwb3J0cy5NQU5HQSA9IGV4cG9ydHMuQU5JTUUgPSB2b2lkIDA7XG5jb25zdCBhbmltZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2FuaW1lXCIpKTtcbmV4cG9ydHMuQU5JTUUgPSBhbmltZV8xLmRlZmF1bHQ7XG5jb25zdCBtYW5nYV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hbmdhXCIpKTtcbmV4cG9ydHMuTUFOR0EgPSBtYW5nYV8xLmRlZmF1bHQ7XG5jb25zdCBsaWdodF9ub3ZlbHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9saWdodC1ub3ZlbHNcIikpO1xuZXhwb3J0cy5MSUdIVF9OT1ZFTFMgPSBsaWdodF9ub3ZlbHNfMS5kZWZhdWx0O1xuY29uc3QgYm9va3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9ib29rc1wiKSk7XG5leHBvcnRzLkJPT0tTID0gYm9va3NfMS5kZWZhdWx0O1xuY29uc3QgY29taWNzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29taWNzXCIpKTtcbmV4cG9ydHMuQ09NSUNTID0gY29taWNzXzEuZGVmYXVsdDtcbmNvbnN0IG1vdmllc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21vdmllc1wiKSk7XG5leHBvcnRzLk1PVklFUyA9IG1vdmllc18xLmRlZmF1bHQ7XG5jb25zdCBtZXRhXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWV0YVwiKSk7XG5leHBvcnRzLk1FVEEgPSBtZXRhXzEuZGVmYXVsdDtcbmNvbnN0IG5ld3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9uZXdzXCIpKTtcbmV4cG9ydHMuTkVXUyA9IG5ld3NfMS5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk5FV1MiLCJNRVRBIiwiTU9WSUVTIiwiTElHSFRfTk9WRUxTIiwiQ09NSUNTIiwiQk9PS1MiLCJNQU5HQSIsIkFOSU1FIiwiYW5pbWVfMSIsInJlcXVpcmUiLCJkZWZhdWx0IiwibWFuZ2FfMSIsImxpZ2h0X25vdmVsc18xIiwiYm9va3NfMSIsImNvbWljc18xIiwibW92aWVzXzEiLCJtZXRhXzEiLCJuZXdzXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/light-novels/index.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/light-novels/index.js ***!
  \******************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst readlightnovels_1 = __importDefault(__webpack_require__(/*! ./readlightnovels */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/light-novels/readlightnovels.js\"));\nconst novelupdates_1 = __importDefault(__webpack_require__(/*! ./novelupdates */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/light-novels/novelupdates.js\"));\nexports[\"default\"] = {\n    ReadLightNovels: readlightnovels_1.default,\n    NovelUpdates: novelupdates_1.default\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL2xpZ2h0LW5vdmVscy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsb0JBQW9CUCxnQkFBZ0JRLG1CQUFPQSxDQUFDLGlLQUFtQjtBQUNyRSxNQUFNQyxpQkFBaUJULGdCQUFnQlEsbUJBQU9BLENBQUMsMkpBQWdCO0FBQy9ESCxrQkFBZSxHQUFHO0lBQUVNLGlCQUFpQkosa0JBQWtCRyxPQUFPO0lBQUVFLGNBQWNILGVBQWVDLE9BQU87QUFBQyxHQUNyRyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29uc3VtZXQrZXh0ZW5zaW9uc0AxLjUuNC9ub2RlX21vZHVsZXMvQGNvbnN1bWV0L2V4dGVuc2lvbnMvZGlzdC9wcm92aWRlcnMvbGlnaHQtbm92ZWxzL2luZGV4LmpzP2E4MTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCByZWFkbGlnaHRub3ZlbHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9yZWFkbGlnaHRub3ZlbHNcIikpO1xuY29uc3Qgbm92ZWx1cGRhdGVzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbm92ZWx1cGRhdGVzXCIpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHsgUmVhZExpZ2h0Tm92ZWxzOiByZWFkbGlnaHRub3ZlbHNfMS5kZWZhdWx0LCBOb3ZlbFVwZGF0ZXM6IG5vdmVsdXBkYXRlc18xLmRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZWFkbGlnaHRub3ZlbHNfMSIsInJlcXVpcmUiLCJub3ZlbHVwZGF0ZXNfMSIsImRlZmF1bHQiLCJSZWFkTGlnaHROb3ZlbHMiLCJOb3ZlbFVwZGF0ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/light-novels/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/light-novels/novelupdates.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/light-novels/novelupdates.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass NovelUpdates extends models_1.LightNovelParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"NovelUpdates\";\n        this.baseUrl = \"https://www.novelupdates.com\";\n        this.proxyURL = \"http://translate.google.com/translate?sl=ja&tl=en&u=\";\n        this.logo = \"https://www.novelupdates.com/appicon.png\";\n        this.classPath = \"LIGHT_NOVELS.NovelUpdates\";\n        /**\n         *\n         * @param lightNovelUrl light novel link or id\n         * @param chapterPage chapter page number (optional) if not provided, will fetch all chapter pages.\n         */ this.fetchLightNovelInfo = async (lightNovelUrl, chapterPage = -1)=>{\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (!lightNovelUrl.startsWith(this.baseUrl)) {\n                lightNovelUrl = `${this.baseUrl}/series/${lightNovelUrl}`;\n            }\n            const lightNovelInfo = {\n                id: (_a = lightNovelUrl.split(\"/\")) === null || _a === void 0 ? void 0 : _a.pop(),\n                title: \"\",\n                url: lightNovelUrl\n            };\n            try {\n                const page = await fetch(`${this.proxyURL}${encodeURIComponent(lightNovelUrl)}`, {\n                    headers: {\n                        Referer: lightNovelUrl\n                    }\n                });\n                const $ = (0, cheerio_1.load)(await page.text());\n                if ($(\"title\").html() === \"Just a moment...\" || $(\"title\").html() === \"Attention Required! | Cloudflare\") {\n                    throw new Error(\"Client is blocked from accessing the site.\");\n                }\n                lightNovelInfo.title = (_b = $(\"div.seriestitlenu\").text()) === null || _b === void 0 ? void 0 : _b.trim();\n                lightNovelInfo.image = $(\"div.seriesimg img\").attr(\"src\");\n                lightNovelInfo.author = $(\"div#showauthors a\").text();\n                lightNovelInfo.genres = $(\"div#seriesgenre a\").map((i, el)=>$(el).text()).get();\n                lightNovelInfo.rating = parseFloat($(\"div.col-xs-12.col-sm-8.col-md-8.desc > div.rate > div.small > em > strong:nth-child(1) > span\").text());\n                lightNovelInfo.views = parseInt($(\"div.col-xs-12.col-sm-4.col-md-4.info-holder > div.info > div:nth-child(4) > span\").text());\n                lightNovelInfo.description = (_c = $(\"div#editdescription\").text()) === null || _c === void 0 ? void 0 : _c.trim();\n                const status = (_d = $(\"div#editstatus\").text()) === null || _d === void 0 ? void 0 : _d.trim();\n                if (status.includes(\"Complete\")) {\n                    lightNovelInfo.status = models_1.MediaStatus.COMPLETED;\n                } else if (status.includes(\"Ongoing\")) {\n                    lightNovelInfo.status = models_1.MediaStatus.ONGOING;\n                } else {\n                    lightNovelInfo.status = models_1.MediaStatus.UNKNOWN;\n                }\n                const postId = $(\"input#mypostid\").attr(\"value\");\n                lightNovelInfo.chapters = await this.fetchChapters(postId);\n                lightNovelInfo.rating = Number((_g = (_f = (_e = $(\"h5.seriesother span.uvotes\").text()) === null || _e === void 0 ? void 0 : _e.split(\" /\")[0]) === null || _f === void 0 ? void 0 : _f.substring(1)) !== null && _g !== void 0 ? _g : 0) * 2;\n                return lightNovelInfo;\n            } catch (err) {\n                console.error(err);\n                throw new Error(err.message);\n            }\n        };\n        this.fetchChapters = async (postId)=>{\n            const chapters = [];\n            const chapterData = (await (await fetch(`${this.baseUrl}/wp-admin/admin-ajax.php`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n                    Cookie: \"_ga=;\"\n                },\n                body: `action=nd_getchapters&mypostid=${postId}&mypostid2=0`\n            })).text()).substring(1);\n            const $ = (0, cheerio_1.load)(chapterData);\n            $(\"li.sp_li_chp a[data-id]\").each((index, el)=>{\n                const id = $(el).attr(\"data-id\");\n                const title = $(el).find(\"span\").text();\n                chapters.push({\n                    id: id,\n                    title: title,\n                    url: `${this.baseUrl}/extnu/${id}`\n                });\n            });\n            return chapters;\n        };\n        /**\n         *\n         * @param chapterId chapter id or url\n         */ this.fetchChapterContent = async (chapterId)=>{\n            if (!chapterId.startsWith(this.baseUrl)) {\n                chapterId = `${this.baseUrl}/extnu/${chapterId}`;\n            }\n            const contents = {\n                novelTitle: \"\",\n                chapterTitle: \"\",\n                text: \"\"\n            };\n            try {\n                const page = await fetch(`${this.proxyURL}${encodeURIComponent(chapterId)}`);\n                const data = await page.text();\n                const $ = (0, cheerio_1.load)(data);\n                contents.novelTitle = $(\"title\").text();\n                contents.chapterTitle = $(\"title\").text();\n                contents.text = data;\n                return contents;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param query search query string\n         */ this.search = async (query)=>{\n            const result = {\n                results: []\n            };\n            try {\n                const res = await fetch(`${this.proxyURL}${encodeURIComponent(`${this.baseUrl}/series-finder/?sf=1&sh=${encodeURIComponent(query)}`)}`, {\n                    headers: {\n                        Referer: this.baseUrl\n                    }\n                });\n                const $ = (0, cheerio_1.load)(await res.text());\n                $(\"div.search_main_box_nu\").each((i, el)=>{\n                    var _a;\n                    result.results.push({\n                        id: (_a = $(el).find(\"div.search_body_nu div.search_title a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/series/\")[1].split(\"/\")[0],\n                        title: $(el).find(\"div.search_body_nu div.search_title a\").text(),\n                        url: $(el).find(\"div.search_body_nu div.search_title a\").attr(\"href\"),\n                        image: $(el).find(\"div.search_img_nu img\").attr(\"src\")\n                    });\n                });\n                return result;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = NovelUpdates; // (async () => {\n //   const ln = new ReadLightNovels();\n //   const chap = await ln.fetchChapterContent('youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e/volume-1-prologue-the-structure-of-japanese-society');\n //   console.log(chap);\n // })();\n //# sourceMappingURL=novelupdates.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/light-novels/novelupdates.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/light-novels/readlightnovels.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/light-novels/readlightnovels.js ***!
  \****************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst form_data_1 = __importDefault(__webpack_require__(/*! form-data */ \"(rsc)/./node_modules/.pnpm/form-data@4.0.0/node_modules/form-data/lib/form_data.js\"));\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nclass ReadLightNovels extends models_1.LightNovelParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"Read Light Novels\";\n        this.baseUrl = \"https://readlightnovels.net\";\n        this.logo = \"https://i.imgur.com/RDPjbc6.png\";\n        this.classPath = \"LIGHT_NOVELS.ReadLightNovels\";\n        /**\n         *\n         * @param lightNovelUrl light novel link or id\n         * @param chapterPage chapter page number (optional) if not provided, will fetch all chapter pages.\n         */ this.fetchLightNovelInfo = async (lightNovelUrl, chapterPage = -1)=>{\n            var _a, _b;\n            if (!lightNovelUrl.startsWith(this.baseUrl)) {\n                lightNovelUrl = `${this.baseUrl}/${lightNovelUrl}.html`;\n            }\n            const lightNovelInfo = {\n                id: (_b = (_a = lightNovelUrl.split(\"/\")) === null || _a === void 0 ? void 0 : _a.pop()) === null || _b === void 0 ? void 0 : _b.replace(\".html\", \"\"),\n                title: \"\",\n                url: lightNovelUrl\n            };\n            try {\n                const page = await this.client.get(lightNovelUrl, {\n                    headers: {\n                        Referer: lightNovelUrl\n                    }\n                });\n                const $ = (0, cheerio_1.load)(page.data);\n                const novelId = parseInt($(\"#id_post\").val());\n                lightNovelInfo.title = $(\"div.col-xs-12.col-sm-8.col-md-8.desc > h3\").text();\n                lightNovelInfo.image = $(\"div.col-xs-12.col-sm-4.col-md-4.info-holder > div.books > div > img\").attr(\"src\");\n                lightNovelInfo.author = $(\"div.col-xs-12.col-sm-4.col-md-4.info-holder > div.info > div:nth-child(1) > a\").text();\n                lightNovelInfo.genres = $(\" div.col-xs-12.col-sm-4.col-md-4.info-holder > div.info > div:nth-child(2) > a\").map((i, el)=>$(el).text()).get();\n                lightNovelInfo.rating = parseFloat($(\"div.col-xs-12.col-sm-8.col-md-8.desc > div.rate > div.small > em > strong:nth-child(1) > span\").text());\n                lightNovelInfo.views = parseInt($(\"div.col-xs-12.col-sm-4.col-md-4.info-holder > div.info > div:nth-child(4) > span\").text());\n                lightNovelInfo.description = $(\"div.col-xs-12.col-sm-8.col-md-8.desc > div.desc-text > hr\").eq(0).nextUntil(\"hr\").text();\n                const pages = Math.max(...$(\"#pagination > ul > li\").map((i, el)=>parseInt($(el).find(\"a\").attr(\"data-page\"))).get().filter((x)=>!isNaN(x)));\n                switch($(\"div.col-xs-12.col-sm-4.col-md-4.info-holder > div.info > div:nth-child(3) > span\").text()){\n                    case \"Completed\":\n                        lightNovelInfo.status = models_1.MediaStatus.COMPLETED;\n                        break;\n                    case \"On Going\":\n                        lightNovelInfo.status = models_1.MediaStatus.ONGOING;\n                        break;\n                    default:\n                        lightNovelInfo.status = models_1.MediaStatus.UNKNOWN;\n                        break;\n                }\n                lightNovelInfo.pages = pages;\n                lightNovelInfo.chapters = [];\n                if (chapterPage === -1) {\n                    lightNovelInfo.chapters = await this.fetchAllChapters(novelId, pages, lightNovelUrl);\n                } else {\n                    lightNovelInfo.chapters = await this.fetchChapters(novelId, chapterPage, lightNovelUrl);\n                }\n                return lightNovelInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchChapters = async (novelId, chapterPage, referer)=>{\n            var _a;\n            const chapters = [];\n            const bodyFormData = new form_data_1.default();\n            bodyFormData.append(\"action\", \"tw_ajax\");\n            bodyFormData.append(\"type\", \"pagination\");\n            bodyFormData.append(\"page\", chapterPage);\n            bodyFormData.append(\"id\", novelId);\n            const page = await this.client({\n                method: \"post\",\n                url: `${this.baseUrl}/wp-admin/admin-ajax.php`,\n                data: bodyFormData,\n                headers: {\n                    referer: referer,\n                    \"content-type\": \"multipart/form-data\",\n                    origin: this.baseUrl,\n                    \"user-agent\": utils_1.USER_AGENT\n                }\n            });\n            const $ = (0, cheerio_1.load)(page.data.list_chap);\n            for (const chapter of $(\"ul.list-chapter > li\")){\n                const subId = (_a = $(chapter).find(\"a\").attr(\"href\").split(\"/\")) === null || _a === void 0 ? void 0 : _a.pop().replace(\".html\", \"\");\n                const id = $(chapter).find(\"a\").attr(\"href\").split(\"/\")[3];\n                chapters.push({\n                    id: `${id}/${subId}`,\n                    title: $(chapter).find(\"a > span\").text().trim(),\n                    url: $(chapter).find(\"a\").attr(\"href\")\n                });\n            }\n            return chapters;\n        };\n        this.fetchAllChapters = async (novelId, pages, referer)=>{\n            const chapters = [];\n            for (const pageNumber of Array.from({\n                length: pages\n            }, (_, i)=>i + 1)){\n                const chaptersPage = await this.fetchChapters(novelId, pageNumber, referer);\n                chapters.push(...chaptersPage);\n            }\n            return chapters;\n        };\n        /**\n         *\n         * @param chapterId chapter id or url\n         */ this.fetchChapterContent = async (chapterId)=>{\n            if (!chapterId.startsWith(this.baseUrl)) {\n                chapterId = `${this.baseUrl}/${chapterId}.html`;\n            }\n            const contents = {\n                novelTitle: \"\",\n                chapterTitle: \"\",\n                text: \"\"\n            };\n            try {\n                const page = await this.client.get(chapterId);\n                const $ = (0, cheerio_1.load)(page.data);\n                contents.novelTitle = $(\".truyen-title\").text();\n                contents.chapterTitle = $(\".chapter-title\").text();\n                for (const line of $(\"div.chapter-content > p\")){\n                    if ($(line).text() != \"\\uFEFF\") {\n                        contents.text += `${$(line).text()}\\n`;\n                    }\n                }\n                return contents;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param query search query string\n         */ this.search = async (query)=>{\n            const result = {\n                results: []\n            };\n            try {\n                const res = await this.client.post(`${this.baseUrl}/?s=${query}`);\n                const $ = (0, cheerio_1.load)(res.data);\n                $(\"div.col-xs-12.col-sm-12.col-md-9.col-truyen-main > div:nth-child(1) > div > div:nth-child(2) > div.col-md-3.col-sm-6.col-xs-6.home-truyendecu\").each((i, el)=>{\n                    var _a;\n                    result.results.push({\n                        id: (_a = $(el).find(\"a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[3].replace(\".html\", \"\"),\n                        title: $(el).find(\"a > div > h3\").text(),\n                        url: $(el).find(\"a\").attr(\"href\"),\n                        image: $(el).find(\"a > img\").attr(\"src\")\n                    });\n                });\n                return result;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = ReadLightNovels; // (async () => {\n //   const ln = new ReadLightNovels();\n //   const chap = await ln.fetchChapterContent('youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e/volume-1-prologue-the-structure-of-japanese-society');\n //   console.log(chap);\n // })();\n //# sourceMappingURL=readlightnovels.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/light-novels/readlightnovels.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/asurascans.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/asurascans.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nlet cloudscraper;\nclass AsuraScans extends models_1.MangaParser {\n    constructor(){\n        try {\n            cloudscraper = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'cloudscraper'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n        } catch (err) {\n            if (err.message.includes(\"Cannot find module 'request'\")) {\n                throw new Error('Request is not installed. Please install it by running \"npm i request\" or \"yarn add request\"');\n            } else if (err.message.includes(\"Cannot find module 'cloudscraper'\")) {\n                throw new Error('Cloudscraper is not installed. Please install it by running \"npm i cloudscraper\" or \"yarn add cloudscraper\"');\n            } else {\n                throw new Error(err.message);\n            }\n        }\n        super();\n        this.name = \"AsuraScans\";\n        this.baseUrl = \"https://www.asurascans.com/\";\n        this.logo = \"https://www.asurascans.com/wp-content/uploads/2021/03/Group_1.png\";\n        this.classPath = \"MANGA.AsuraScans\";\n        this.fetchMangaInfo = async (mangaId)=>{\n            const options = {\n                method: \"GET\",\n                url: `${this.baseUrl}/manga/${mangaId.trim()}`,\n                headers: {\n                    \"User-Agent\": \"Ubuntu Chromium/34.0.1847.116 Chrome/34.0.1847.116 Safari/537.36\",\n                    \"Cache-Control\": \"private\",\n                    Accept: \"application/xml,application/xhtml+xml,text/html;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5\"\n                },\n                cloudflareTimeout: 5000,\n                cloudflareMaxTimeout: 30000,\n                followAllRedirects: true,\n                challengesToSolve: 3,\n                decodeEmails: false,\n                gzip: true\n            };\n            const mangaInfo = {\n                id: mangaId,\n                title: \"\"\n            };\n            try {\n                const data = await cloudscraper(options).then((response)=>response);\n                const $ = (0, cheerio_1.load)(data);\n                const seriesTitleSelector = \"h1.entry-title\";\n                const seriesArtistSelector = \".infotable tr:icontains('artist') td:last-child, .tsinfo .imptdt:icontains('artist') i, .fmed b:icontains('artist')+span, span:icontains('artist')\";\n                const seriesAuthorSelector = \".infotable tr:icontains('author') td:last-child, .tsinfo .imptdt:icontains('author') i, .fmed b:icontains('author')+span, span:icontains('author')\";\n                const seriesDescriptionSelector = \".desc, .entry-content[itemprop=description]\";\n                const seriesAltNameSelector = \".alternative, .wd-full:icontains('alt') span, .alter, .seriestualt\";\n                const seriesGenreSelector = \"div.gnr a, .mgen a, .seriestugenre a\";\n                const seriesStatusSelector = \".infotable tr:icontains('status') td:last-child, .tsinfo .imptdt:icontains('status') i, .fmed b:icontains('status')+span span:icontains('status')\";\n                const seriesThumbnailSelector = \".infomanga > div[itemprop=image] img, .thumb img\";\n                const seriesChaptersSelector = \"div.bxcl li, div.cl li, #chapterlist li, ul li:has(div.chbox):has(div.eph-num)\";\n                mangaInfo.title = $(seriesTitleSelector).text().trim();\n                mangaInfo.altTitles = $(seriesAltNameSelector).text() ? $(seriesAltNameSelector).text().split(\",\").map((item)=>item.trim()) : [];\n                mangaInfo.description = $(seriesDescriptionSelector).text().trim();\n                mangaInfo.headerForImage = {\n                    Referer: this.baseUrl\n                };\n                mangaInfo.image = $(seriesThumbnailSelector).attr(\"src\");\n                mangaInfo.genres = $(seriesGenreSelector).map((i, el)=>$(el).text()).get();\n                switch($(seriesStatusSelector).text().trim()){\n                    case \"Completed\":\n                        mangaInfo.status = models_1.MediaStatus.COMPLETED;\n                        break;\n                    case \"Ongoing\":\n                        mangaInfo.status = models_1.MediaStatus.ONGOING;\n                        break;\n                    case \"Dropped\":\n                        mangaInfo.status = models_1.MediaStatus.CANCELLED;\n                        break;\n                    default:\n                        mangaInfo.status = models_1.MediaStatus.UNKNOWN;\n                        break;\n                }\n                mangaInfo.authors = $(seriesAuthorSelector).text().replace(\"-\", \"\").trim() ? $(seriesAuthorSelector).text().split(\",\").map((item)=>item.trim()) : [];\n                mangaInfo.artist = $(seriesArtistSelector).text().trim() ? $(seriesArtistSelector).text().trim() : \"N/A\";\n                mangaInfo.chapters = $(seriesChaptersSelector).map((i, el)=>{\n                    var _a, _b;\n                    return {\n                        id: (_b = (_a = $(el).find(\"a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[3]) !== null && _b !== void 0 ? _b : \"\",\n                        title: $(el).find(\".lch a, .chapternum\").text(),\n                        releasedDate: $(el).find(\".chapterdate\").text()\n                    };\n                }).get();\n                return mangaInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchChapterPages = async (chapterId)=>{\n            const options = {\n                method: \"GET\",\n                url: `${this.baseUrl}/${chapterId.trim()}`,\n                headers: {\n                    \"User-Agent\": \"Ubuntu Chromium/34.0.1847.116 Chrome/34.0.1847.116 Safari/537.36\",\n                    \"Cache-Control\": \"private\",\n                    Accept: \"application/xml,application/xhtml+xml,text/html;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5\"\n                },\n                cloudflareTimeout: 5000,\n                cloudflareMaxTimeout: 30000,\n                followAllRedirects: true,\n                challengesToSolve: 3,\n                decodeEmails: false,\n                gzip: true\n            };\n            try {\n                const data = await cloudscraper(options).then((response)=>response);\n                const $ = (0, cheerio_1.load)(data);\n                const pageSelector = \"div#readerarea img\";\n                const pages = $(pageSelector).map((i, el)=>({\n                        img: $(el).attr(\"src\"),\n                        page: i,\n                        headerForImage: {\n                            Referer: this.baseUrl\n                        }\n                    })).get();\n                return pages;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param query Search query\n         */ this.search = async (query)=>{\n            try {\n                const options = {\n                    method: \"GET\",\n                    url: `${this.baseUrl}/?s=${query.replace(/ /g, \"%20\")}`,\n                    headers: {\n                        \"User-Agent\": \"Ubuntu Chromium/34.0.1847.116 Chrome/34.0.1847.116 Safari/537.36\",\n                        \"Cache-Control\": \"private\",\n                        Accept: \"application/xml,application/xhtml+xml,text/html;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5\"\n                    },\n                    cloudflareTimeout: 5000,\n                    cloudflareMaxTimeout: 30000,\n                    followAllRedirects: true,\n                    challengesToSolve: 3,\n                    decodeEmails: false,\n                    gzip: true\n                };\n                const data = await cloudscraper(options).then((response)=>response);\n                const $ = (0, cheerio_1.load)(data);\n                const searchMangaSelector = \".utao .uta .imgu, .listupd .bs .bsx, .listo .bs .bsx\";\n                const results = $(searchMangaSelector).map((i, el)=>{\n                    var _a, _b;\n                    return {\n                        id: (_b = (_a = $(el).find(\"a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[4]) !== null && _b !== void 0 ? _b : \"\",\n                        title: $(el).find(\"a\").attr(\"title\"),\n                        image: $(el).find(\"img\").attr(\"src\"),\n                        headerForImage: {\n                            Referer: this.baseUrl\n                        }\n                    };\n                }).get();\n                return {\n                    results: results\n                };\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = AsuraScans; //# sourceMappingURL=asurascans.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/asurascans.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/brmangas.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/brmangas.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass BRMangas extends models_1.MangaParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"BRMangas\";\n        this.baseUrl = \"https://www.brmangas.net\";\n        this.logo = \"https://www.brmangas.net/wp-content/themes/brmangasnew/images/svg/logo.svg\";\n        this.classPath = \"MANGA.BRMangas\";\n        this.fetchMangaInfo = async (mangaId)=>{\n            const mangaInfo = {\n                id: mangaId,\n                title: \"\"\n            };\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/manga/${mangaId}`);\n                const $ = (0, cheerio_1.load)(data);\n                const title = $(\"body > div.scroller-inner > div.wrapper > main > section > div > h1.titulo\").text();\n                const descriptionAndAltTitles = $(\"body > div.scroller-inner > div.wrapper > main > div > div > div.col > div.serie-texto > div > p:nth-child(3)\").text().split(\"\\n\");\n                mangaInfo.title = title.slice(3, title.length - 7).trim();\n                mangaInfo.altTitles = descriptionAndAltTitles.filter((_, i)=>i > 0);\n                mangaInfo.description = descriptionAndAltTitles[0];\n                mangaInfo.headerForImage = {\n                    Referer: this.baseUrl\n                };\n                mangaInfo.image = $(\"body > div.scroller-inner > div.wrapper > main > div > div > div.serie-geral > div.infoall > div.serie-capa > img\").attr(\"src\");\n                mangaInfo.genres = $(\"body > div.scroller-inner > div.wrapper > main > div > div > div.serie-geral > div.infoall > div.serie-infos > ul > li:nth-child(3)\").text().slice(11).split(\",\").map((genre)=>genre.trim());\n                mangaInfo.status = models_1.MediaStatus.UNKNOWN;\n                mangaInfo.views = null;\n                mangaInfo.authors = [\n                    $(\"body > div.scroller-inner > div.wrapper > main > div > div > div.serie-geral > div.infoall > div.serie-infos > ul > li:nth-child(2)\").text().replace(\"Autor: \", \"\").trim()\n                ];\n                mangaInfo.chapters = $(\"body > div.scroller-inner > div.wrapper > main > div > div > div:nth-child(2) > div.manga > div.container_t > div.lista_manga > ul > li\").map((i, el)=>{\n                    var _a;\n                    return {\n                        id: `${(_a = $(el).find(\"a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[4]}`,\n                        title: $(el).find(\"a\").text(),\n                        views: null,\n                        releasedDate: null\n                    };\n                }).get();\n                return mangaInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchChapterPages = async (chapterId)=>{\n            try {\n                const url = `${this.baseUrl}/ler/${chapterId}`;\n                const { data } = await this.client.get(url);\n                const $ = (0, cheerio_1.load)(data);\n                const script = $(\"script\");\n                const pageURLs = JSON.parse(script.filter((i, el)=>$(el).text().includes(\"imageArray\")).text().trim().slice(13, -2).replace(/\\\\/g, \"\"));\n                console.log(pageURLs.images);\n                const pages = pageURLs.images.map((img, i)=>({\n                        img: img,\n                        page: i,\n                        title: `Page ${i + 1}`,\n                        headerForImage: {\n                            Referer: this.baseUrl\n                        }\n                    }));\n                return pages;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param query Search query\n         */ this.search = async (query)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/?s=${query.replace(/ /g, \"+\")}`);\n                const $ = (0, cheerio_1.load)(data);\n                const results = $(\"body > div.scroller-inner > div.wrapper > main > div.container > div.listagem > div.col\").map((i, row)=>{\n                    var _a;\n                    return {\n                        id: (_a = $(row).find(\"div.item > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[4],\n                        title: $(row).find(\"div.item > a > h2\").text(),\n                        image: $(row).find(\"div.item > a > div > img\").attr(\"src\"),\n                        headerForImage: {\n                            Referer: this.baseUrl\n                        }\n                    };\n                }).get();\n                return {\n                    results: results\n                };\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = BRMangas; //# sourceMappingURL=brmangas.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/brmangas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/comick.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/comick.js ***!
  \************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/.pnpm/axios@0.27.2/node_modules/axios/index.js\"));\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass ComicK extends models_1.MangaParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"ComicK\";\n        this.baseUrl = \"https://comick.app\";\n        this.logo = \"https://th.bing.com/th/id/OIP.fw4WrmAoA2PmKitiyMzUIgAAAA?pid=ImgDet&rs=1\";\n        this.classPath = \"MANGA.ComicK\";\n        this.apiUrl = \"https://api.comick.app\";\n        /**\n         * @description Fetches info about the manga\n         * @param mangaId Comic slug\n         * @returns Promise<IMangaInfo>\n         */ this.fetchMangaInfo = async (mangaId)=>{\n            var _a, _b, _c, _d, _e, _f;\n            try {\n                const req = await this._axios().get(`/comic/${mangaId}`);\n                const data = req.data.comic;\n                const links = Object.values((_a = data.links) !== null && _a !== void 0 ? _a : []).filter((link)=>link !== null);\n                const mangaInfo = {\n                    id: data.hid,\n                    title: data.title,\n                    altTitles: data.md_titles ? data.md_titles.map((title)=>title.title) : [],\n                    description: data.desc,\n                    genres: (_b = data.md_comic_md_genres) === null || _b === void 0 ? void 0 : _b.map((genre)=>genre.md_genres.name),\n                    status: ((_c = data.status) !== null && _c !== void 0 ? _c : 0 === 0) ? models_1.MediaStatus.ONGOING : models_1.MediaStatus.COMPLETED,\n                    image: `https://meo.comick.pictures${data.md_covers ? data.md_covers[0].b2key : \"\"}`,\n                    malId: (_d = data.links) === null || _d === void 0 ? void 0 : _d.mal,\n                    links: links,\n                    chapters: []\n                };\n                const allChapters = await this.fetchAllChapters(mangaId, 1);\n                for (const chapter of allChapters){\n                    (_e = mangaInfo.chapters) === null || _e === void 0 ? void 0 : _e.push({\n                        id: chapter.hid,\n                        title: (_f = chapter.title) !== null && _f !== void 0 ? _f : chapter.chap,\n                        chapterNumber: chapter.chap,\n                        volumeNumber: chapter.vol,\n                        releaseDate: chapter.created_at\n                    });\n                }\n                return mangaInfo;\n            } catch (err) {\n                if (err.code == \"ERR_BAD_REQUEST\") throw new Error(`[${this.name}] Bad request. Make sure you have entered a valid query.`);\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param chapterId Chapter ID (HID)\n         * @returns Promise<IMangaChapterPage[]>\n         */ this.fetchChapterPages = async (chapterId)=>{\n            try {\n                const { data } = await this._axios().get(`/chapter/${chapterId}`);\n                const pages = [];\n                data.chapter.md_images.map((image, index)=>{\n                    pages.push({\n                        img: `https://meo.comick.pictures/${image.b2key}?width=${image.w}`,\n                        page: index\n                    });\n                });\n                return pages;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         * @param query search query\n         * @param page page number (default: 1)\n         * @param limit limit of results to return (default: 20) (max: 100) (min: 1)\n         */ this.search = async (query, page = 1, limit = 20)=>{\n            var _a;\n            if (page < 1) throw new Error(\"Page number must be greater than 1\");\n            if (limit > 300) throw new Error(\"Limit must be less than or equal to 300\");\n            if (limit * (page - 1) >= 10000) throw new Error(\"not enough results\");\n            try {\n                const req = await this._axios().get(`/v1.0/search?q=${encodeURIComponent(query)}&limit=${limit}&page=${page}`);\n                const results = {\n                    currentPage: page,\n                    results: []\n                };\n                const data = await req.data;\n                for (const manga of data){\n                    let cover = manga.md_covers ? manga.md_covers[0] : null;\n                    if (cover && cover.b2key != undefined) {\n                        cover = `https://meo.comick.pictures${cover.b2key}`;\n                    }\n                    results.results.push({\n                        id: manga.slug,\n                        title: (_a = manga.title) !== null && _a !== void 0 ? _a : manga.slug,\n                        altTitles: manga.md_titles ? manga.md_titles.map((title)=>title.title) : [],\n                        image: cover\n                    });\n                }\n                return results;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchAllChapters = async (mangaId, page)=>{\n            if (page <= 0) {\n                page = 1;\n            }\n            const comicId = await this.getComicId(mangaId);\n            const req = await this._axios().get(`/comic/${comicId}/chapters?page=${page}`);\n            return req.data.chapters;\n        };\n    }\n    _axios() {\n        return axios_1.default.create({\n            baseURL: this.apiUrl,\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0\"\n            }\n        });\n    }\n    /**\n     * @description Fetches the comic HID from the slug\n     * @param id Comic slug\n     * @returns Promise<string> empty if not found\n     */ async getComicId(id) {\n        const req = await this._axios().get(`/comic/${id}`);\n        const data = req.data[\"comic\"];\n        return data ? data.hid : \"\";\n    }\n}\n// (async () => {\n//   const md = new MangaDex();\n//   const search = await md.search('solo leveling');\n//   const manga = await md.fetchMangaInfo(search.results[0].id);\n//   const chapterPages = await md.fetchChapterPages(manga.chapters![0].id);\n//   console.log(chapterPages);\n// })();\nexports[\"default\"] = ComicK; //# sourceMappingURL=comick.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/comick.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/flamescans.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/flamescans.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass FlameScans extends models_1.MangaParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"FlameScans\";\n        this.baseUrl = \"https://flamescans.org/\";\n        this.logo = \"https://i.imgur.com/Nt1MW3H.png\";\n        this.classPath = \"MANGA.FlameScans\";\n        /**\n         *\n         * @param query Search query\n         *\n         */ this.search = async (query)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/series/?title=${query.replace(/ /g, \"%20\")}`);\n                const $ = (0, cheerio_1.load)(data);\n                const searchMangaSelector = \".utao .uta .imgu, .listupd .bs .bsx, .listo .bs .bsx\";\n                const results = $(searchMangaSelector).map((i, el)=>{\n                    var _a, _b, _c;\n                    return {\n                        id: (_b = (_a = $(el).find(\"a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/series/\")[1].replace(\"/\", \"\")) !== null && _b !== void 0 ? _b : \"\",\n                        title: (_c = $(el).find(\"a\").attr(\"title\")) !== null && _c !== void 0 ? _c : \"\",\n                        image: $(el).find(\"img\").attr(\"src\")\n                    };\n                }).get();\n                return {\n                    results: results\n                };\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchMangaInfo = async (mangaId)=>{\n            const mangaInfo = {\n                id: mangaId,\n                title: \"\"\n            };\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/manga/${mangaId}`);\n                const $ = (0, cheerio_1.load)(data);\n                // base from https://github.com/tachiyomiorg/tachiyomi-extensions/blob/661311c13b3b550e3fa906c1130b77a037ef7a11/multisrc/src/main/java/eu/kanade/tachiyomi/multisrc/mangathemesia/MangaThemesia.kt#L233\n                const seriesTitleSelector = \"h1.entry-title\";\n                const seriesArtistSelector = \".infotable tr:icontains('artist') td:last-child, .tsinfo .imptdt:icontains('artist') i, .fmed b:icontains('artist')+span, span:icontains('artist')\";\n                const seriesAuthorSelector = \".infotable tr:icontains('author') td:last-child, .tsinfo .imptdt:icontains('author') i, .fmed b:icontains('author')+span, span:icontains('author')\";\n                const seriesDescriptionSelector = \".desc, .entry-content[itemprop=description]\";\n                const seriesAltNameSelector = \".alternative > div, .wd-full:icontains('alt') span, .alter, .seriestualt\";\n                const seriesGenreSelector = \"div.gnr a, .mgen a, .seriestugenre a\";\n                const seriesStatusSelector = \".infotable tr:icontains('status') td:last-child, .tsinfo .imptdt:icontains('status') i, .fmed b:icontains('status')+span span:icontains('status')\";\n                const seriesThumbnailSelector = \".infomanga > div[itemprop=image] img, .thumb img\";\n                const seriesChaptersSelector = \"div.bxcl li, div.cl li, #chapterlist li, ul li:has(div.chbox):has(div.eph-num)\";\n                mangaInfo.title = $(seriesTitleSelector).text().trim();\n                mangaInfo.altTitles = $(seriesAltNameSelector).text() ? $(seriesAltNameSelector).first().text().split(\"|\").map((item)=>item.replace(/\\n/g, \" \").trim()) : [];\n                mangaInfo.description = $(seriesDescriptionSelector).text().trim();\n                mangaInfo.headerForImage = {\n                    Referer: this.baseUrl\n                };\n                mangaInfo.image = $(seriesThumbnailSelector).attr(\"src\");\n                mangaInfo.genres = $(seriesGenreSelector).map((i, el)=>$(el).text()).get();\n                switch($(seriesStatusSelector).text().trim()){\n                    case \"Completed\":\n                        mangaInfo.status = models_1.MediaStatus.COMPLETED;\n                        break;\n                    case \"Ongoing\":\n                        mangaInfo.status = models_1.MediaStatus.ONGOING;\n                        break;\n                    case \"Dropped\":\n                        mangaInfo.status = models_1.MediaStatus.CANCELLED;\n                        break;\n                    default:\n                        mangaInfo.status = models_1.MediaStatus.UNKNOWN;\n                        break;\n                }\n                mangaInfo.authors = $(seriesAuthorSelector).text().replace(\"-\", \"\").trim() ? $(seriesAuthorSelector).text().split(\",\").map((item)=>item.trim()) : [];\n                mangaInfo.artist = $(seriesArtistSelector).text().trim() ? $(seriesArtistSelector).text().trim() : \"N/A\";\n                mangaInfo.chapters = $(seriesChaptersSelector).map((i, el)=>{\n                    var _a, _b;\n                    return {\n                        id: (_b = (_a = $(el).find(\"a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[3]) !== null && _b !== void 0 ? _b : \"\",\n                        title: $(el).find(\".lch a, .chapternum\").text().trim().replace(/\\n/g, \" \"),\n                        releasedDate: $(el).find(\".chapterdate\").text()\n                    };\n                }).get();\n                return mangaInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchChapterPages = async (chapterId)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/${chapterId}`);\n                const $ = (0, cheerio_1.load)(data);\n                const pageSelector = \"div#readerarea img, #readerarea div.figure_container div.composed_figure\";\n                const pages = $(pageSelector).map((i, el)=>({\n                        img: $(el).attr(\"src\"),\n                        page: i,\n                        headerForImage: {\n                            Referer: this.baseUrl\n                        }\n                    })).get();\n                return pages;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = FlameScans; //# sourceMappingURL=flamescans.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/flamescans.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/index.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/index.js ***!
  \***********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst mangadex_1 = __importDefault(__webpack_require__(/*! ./mangadex */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangadex.js\"));\nconst comick_1 = __importDefault(__webpack_require__(/*! ./comick */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/comick.js\"));\nconst mangahere_1 = __importDefault(__webpack_require__(/*! ./mangahere */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangahere.js\"));\nconst mangakakalot_1 = __importDefault(__webpack_require__(/*! ./mangakakalot */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangakakalot.js\"));\nconst mangasee123_1 = __importDefault(__webpack_require__(/*! ./mangasee123 */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangasee123.js\"));\nconst mangapark_1 = __importDefault(__webpack_require__(/*! ./mangapark */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangapark.js\"));\nconst mangapill_1 = __importDefault(__webpack_require__(/*! ./mangapill */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangapill.js\"));\nconst mangareader_1 = __importDefault(__webpack_require__(/*! ./mangareader */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangareader.js\"));\nconst asurascans_1 = __importDefault(__webpack_require__(/*! ./asurascans */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/asurascans.js\"));\nconst flamescans_1 = __importDefault(__webpack_require__(/*! ./flamescans */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/flamescans.js\"));\nconst mangahost_1 = __importDefault(__webpack_require__(/*! ./mangahost */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangahost.js\"));\nconst brmangas_1 = __importDefault(__webpack_require__(/*! ./brmangas */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/brmangas.js\"));\nexports[\"default\"] = {\n    MangaDex: mangadex_1.default,\n    ComicK: comick_1.default,\n    MangaHere: mangahere_1.default,\n    MangaKakalot: mangakakalot_1.default,\n    Mangasee123: mangasee123_1.default,\n    Mangapark: mangapark_1.default,\n    MangaPill: mangapill_1.default,\n    MangaReader: mangareader_1.default,\n    AsuraScans: asurascans_1.default,\n    FlameScans: flamescans_1.default,\n    MangaHost: mangahost_1.default,\n    BRMangas: brmangas_1.default\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL21hbmdhL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxhQUFhUCxnQkFBZ0JRLG1CQUFPQSxDQUFDLDRJQUFZO0FBQ3ZELE1BQU1DLFdBQVdULGdCQUFnQlEsbUJBQU9BLENBQUMsd0lBQVU7QUFDbkQsTUFBTUUsY0FBY1YsZ0JBQWdCUSxtQkFBT0EsQ0FBQyw4SUFBYTtBQUN6RCxNQUFNRyxpQkFBaUJYLGdCQUFnQlEsbUJBQU9BLENBQUMsb0pBQWdCO0FBQy9ELE1BQU1JLGdCQUFnQlosZ0JBQWdCUSxtQkFBT0EsQ0FBQyxrSkFBZTtBQUM3RCxNQUFNSyxjQUFjYixnQkFBZ0JRLG1CQUFPQSxDQUFDLDhJQUFhO0FBQ3pELE1BQU1NLGNBQWNkLGdCQUFnQlEsbUJBQU9BLENBQUMsOElBQWE7QUFDekQsTUFBTU8sZ0JBQWdCZixnQkFBZ0JRLG1CQUFPQSxDQUFDLGtKQUFlO0FBQzdELE1BQU1RLGVBQWVoQixnQkFBZ0JRLG1CQUFPQSxDQUFDLGdKQUFjO0FBQzNELE1BQU1TLGVBQWVqQixnQkFBZ0JRLG1CQUFPQSxDQUFDLGdKQUFjO0FBQzNELE1BQU1VLGNBQWNsQixnQkFBZ0JRLG1CQUFPQSxDQUFDLDhJQUFhO0FBQ3pELE1BQU1XLGFBQWFuQixnQkFBZ0JRLG1CQUFPQSxDQUFDLDRJQUFZO0FBQ3ZESCxrQkFBZSxHQUFHO0lBQ2RnQixVQUFVZCxXQUFXYSxPQUFPO0lBQzVCRSxRQUFRYixTQUFTVyxPQUFPO0lBQ3hCRyxXQUFXYixZQUFZVSxPQUFPO0lBQzlCSSxjQUFjYixlQUFlUyxPQUFPO0lBQ3BDSyxhQUFhYixjQUFjUSxPQUFPO0lBQ2xDTSxXQUFXYixZQUFZTyxPQUFPO0lBQzlCTyxXQUFXYixZQUFZTSxPQUFPO0lBQzlCUSxhQUFhYixjQUFjSyxPQUFPO0lBQ2xDUyxZQUFZYixhQUFhSSxPQUFPO0lBQ2hDVSxZQUFZYixhQUFhRyxPQUFPO0lBQ2hDVyxXQUFXYixZQUFZRSxPQUFPO0lBQzlCWSxVQUFVYixXQUFXQyxPQUFPO0FBQ2hDLEdBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL21hbmdhL2luZGV4LmpzPzRiODMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBtYW5nYWRleF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hbmdhZGV4XCIpKTtcbmNvbnN0IGNvbWlja18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbWlja1wiKSk7XG5jb25zdCBtYW5nYWhlcmVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tYW5nYWhlcmVcIikpO1xuY29uc3QgbWFuZ2FrYWthbG90XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFuZ2FrYWthbG90XCIpKTtcbmNvbnN0IG1hbmdhc2VlMTIzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFuZ2FzZWUxMjNcIikpO1xuY29uc3QgbWFuZ2FwYXJrXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFuZ2FwYXJrXCIpKTtcbmNvbnN0IG1hbmdhcGlsbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hbmdhcGlsbFwiKSk7XG5jb25zdCBtYW5nYXJlYWRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hbmdhcmVhZGVyXCIpKTtcbmNvbnN0IGFzdXJhc2NhbnNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9hc3VyYXNjYW5zXCIpKTtcbmNvbnN0IGZsYW1lc2NhbnNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9mbGFtZXNjYW5zXCIpKTtcbmNvbnN0IG1hbmdhaG9zdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hbmdhaG9zdFwiKSk7XG5jb25zdCBicm1hbmdhc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2JybWFuZ2FzXCIpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgICBNYW5nYURleDogbWFuZ2FkZXhfMS5kZWZhdWx0LFxuICAgIENvbWljSzogY29taWNrXzEuZGVmYXVsdCxcbiAgICBNYW5nYUhlcmU6IG1hbmdhaGVyZV8xLmRlZmF1bHQsXG4gICAgTWFuZ2FLYWthbG90OiBtYW5nYWtha2Fsb3RfMS5kZWZhdWx0LFxuICAgIE1hbmdhc2VlMTIzOiBtYW5nYXNlZTEyM18xLmRlZmF1bHQsXG4gICAgTWFuZ2FwYXJrOiBtYW5nYXBhcmtfMS5kZWZhdWx0LFxuICAgIE1hbmdhUGlsbDogbWFuZ2FwaWxsXzEuZGVmYXVsdCxcbiAgICBNYW5nYVJlYWRlcjogbWFuZ2FyZWFkZXJfMS5kZWZhdWx0LFxuICAgIEFzdXJhU2NhbnM6IGFzdXJhc2NhbnNfMS5kZWZhdWx0LFxuICAgIEZsYW1lU2NhbnM6IGZsYW1lc2NhbnNfMS5kZWZhdWx0LFxuICAgIE1hbmdhSG9zdDogbWFuZ2Fob3N0XzEuZGVmYXVsdCxcbiAgICBCUk1hbmdhczogYnJtYW5nYXNfMS5kZWZhdWx0LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtYW5nYWRleF8xIiwicmVxdWlyZSIsImNvbWlja18xIiwibWFuZ2FoZXJlXzEiLCJtYW5nYWtha2Fsb3RfMSIsIm1hbmdhc2VlMTIzXzEiLCJtYW5nYXBhcmtfMSIsIm1hbmdhcGlsbF8xIiwibWFuZ2FyZWFkZXJfMSIsImFzdXJhc2NhbnNfMSIsImZsYW1lc2NhbnNfMSIsIm1hbmdhaG9zdF8xIiwiYnJtYW5nYXNfMSIsImRlZmF1bHQiLCJNYW5nYURleCIsIkNvbWljSyIsIk1hbmdhSGVyZSIsIk1hbmdhS2FrYWxvdCIsIk1hbmdhc2VlMTIzIiwiTWFuZ2FwYXJrIiwiTWFuZ2FQaWxsIiwiTWFuZ2FSZWFkZXIiLCJBc3VyYVNjYW5zIiwiRmxhbWVTY2FucyIsIk1hbmdhSG9zdCIsIkJSTWFuZ2FzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangadex.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangadex.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst ascii_url_encoder_1 = __webpack_require__(/*! ascii-url-encoder */ \"(rsc)/./node_modules/.pnpm/ascii-url-encoder@1.2.0/node_modules/ascii-url-encoder/dist/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nclass MangaDex extends models_1.MangaParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"MangaDex\";\n        this.baseUrl = \"https://mangadex.org\";\n        this.logo = \"https://pbs.twimg.com/profile_images/1391016345714757632/xbt_jW78_400x400.jpg\";\n        this.classPath = \"MANGA.MangaDex\";\n        this.apiUrl = \"https://api.mangadex.org\";\n        this.fetchMangaInfo = async (mangaId)=>{\n            var _a;\n            try {\n                const { data } = await this.client.get(`${this.apiUrl}/manga/${mangaId}`);\n                const mangaInfo = {\n                    id: data.data.id,\n                    title: data.data.attributes.title.en,\n                    altTitles: data.data.attributes.altTitles,\n                    description: data.data.attributes.description,\n                    genres: data.data.attributes.tags.filter((tag)=>tag.attributes.group === \"genre\").map((tag)=>tag.attributes.name.en),\n                    themes: data.data.attributes.tags.filter((tag)=>tag.attributes.group === \"theme\").map((tag)=>tag.attributes.name.en),\n                    status: (0, utils_1.capitalizeFirstLetter)(data.data.attributes.status),\n                    releaseDate: data.data.attributes.year,\n                    chapters: []\n                };\n                const allChapters = await this.fetchAllChapters(mangaId, 0);\n                for (const chapter of allChapters){\n                    (_a = mangaInfo.chapters) === null || _a === void 0 ? void 0 : _a.push({\n                        id: chapter.id,\n                        title: chapter.attributes.title ? chapter.attributes.title : chapter.attributes.chapter,\n                        chapterNumber: chapter.attributes.chapter,\n                        volumeNumber: chapter.attributes.volume,\n                        pages: chapter.attributes.pages\n                    });\n                }\n                const findCoverArt = data.data.relationships.find((rel)=>rel.type === \"cover_art\");\n                const coverArt = await this.fetchCoverImage(findCoverArt === null || findCoverArt === void 0 ? void 0 : findCoverArt.id);\n                mangaInfo.image = `${this.baseUrl}/covers/${mangaInfo.id}/${coverArt}`;\n                return mangaInfo;\n            } catch (err) {\n                if (err.code == \"ERR_BAD_REQUEST\") throw new Error(`[${this.name}] Bad request. Make sure you have entered a valid query.`);\n                throw new Error(err.message);\n            }\n        };\n        /**\n         * @currently only supports english\n         */ this.fetchChapterPages = async (chapterId)=>{\n            try {\n                const res = await this.client.get(`${this.apiUrl}/at-home/server/${chapterId}`);\n                const pages = [];\n                for (const id of res.data.chapter.data){\n                    pages.push({\n                        img: `${res.data.baseUrl}/data/${res.data.chapter.hash}/${id}`,\n                        page: parseInt((0, utils_1.substringBefore)(id, \"-\").replace(/[^0-9.]/g, \"\"))\n                    });\n                }\n                return pages;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         * @param query search query\n         * @param page page number (default: 1)\n         * @param limit limit of results to return (default: 20) (max: 100) (min: 1)\n         */ this.search = async (query, page = 1, limit = 20)=>{\n            if (page <= 0) throw new Error(\"Page number must be greater than 0\");\n            if (limit > 100) throw new Error(\"Limit must be less than or equal to 100\");\n            if (limit * (page - 1) >= 10000) throw new Error(\"not enough results\");\n            try {\n                const res = await this.client.get(`${this.apiUrl}/manga?limit=${limit}&title=${(0, ascii_url_encoder_1.encode)(query)}&limit=${limit}&offset=${limit * (page - 1)}&order[relevance]=desc`);\n                if (res.data.result == \"ok\") {\n                    const results = {\n                        currentPage: page,\n                        results: []\n                    };\n                    for (const manga of res.data.data){\n                        results.results.push({\n                            id: manga.id,\n                            title: Object.values(manga.attributes.title)[0],\n                            altTitles: manga.attributes.altTitles,\n                            description: Object.values(manga.attributes.description)[0],\n                            status: manga.attributes.status,\n                            releaseDate: manga.attributes.year,\n                            contentRating: manga.attributes.contentRating,\n                            lastVolume: manga.attributes.lastVolume,\n                            lastChapter: manga.attributes.lastChapter\n                        });\n                    }\n                    return results;\n                } else {\n                    throw new Error(res.data.message);\n                }\n            } catch (err) {\n                if (err.code == \"ERR_BAD_REQUEST\") {\n                    throw new Error(\"Bad request. Make sure you have entered a valid query.\");\n                }\n                throw new Error(err.message);\n            }\n        };\n        this.fetchAllChapters = async (mangaId, offset, res)=>{\n            var _a, _b;\n            if (((_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a.offset) + 96 >= ((_b = res === null || res === void 0 ? void 0 : res.data) === null || _b === void 0 ? void 0 : _b.total)) {\n                return [];\n            }\n            const response = await this.client.get(`${this.apiUrl}/manga/${mangaId}/feed?offset=${offset}&limit=96&order[volume]=desc&order[chapter]=desc&translatedLanguage[]=en`);\n            return [\n                ...response.data.data,\n                ...await this.fetchAllChapters(mangaId, offset + 96, response)\n            ];\n        };\n        this.fetchCoverImage = async (coverId)=>{\n            const { data } = await this.client.get(`${this.apiUrl}/cover/${coverId}`);\n            const fileName = data.data.attributes.fileName;\n            return fileName;\n        };\n    }\n}\n// (async () => {\n//   const md = new MangaDex();\n//   const search = await md.search('solo leveling');\n//   const manga = await md.fetchMangaInfo(search.results[0].id);\n//   const chapterPages = await md.fetchChapterPages(manga.chapters![0].id);\n//   console.log(chapterPages);\n// })();\nexports[\"default\"] = MangaDex; //# sourceMappingURL=mangadex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangadex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangahere.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangahere.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass MangaHere extends models_1.MangaParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"MangaHere\";\n        this.baseUrl = \"http://www.mangahere.cc\";\n        this.logo = \"https://i.pinimg.com/564x/51/08/62/51086247ed16ff8abae2df0bb06448e4.jpg\";\n        this.classPath = \"MANGA.MangaHere\";\n        this.fetchMangaInfo = async (mangaId1)=>{\n            const mangaInfo1 = {\n                id: mangaId1,\n                title: \"\"\n            };\n            try {\n                const { data: data1 } = await this.client.get(`${this.baseUrl}/manga/${mangaId1}`, {\n                    headers: {\n                        cookie: \"isAdult=1\"\n                    }\n                });\n                const $1 = (0, cheerio_1.load)(data1);\n                mangaInfo1.title = $1(\"span.detail-info-right-title-font\").text();\n                mangaInfo1.description = $1(\"div.detail-info-right > p.fullcontent\").text();\n                mangaInfo1.headers = {\n                    Referer: this.baseUrl\n                };\n                mangaInfo1.image = $1(\"div.detail-info-cover > img\").attr(\"src\");\n                mangaInfo1.genres = $1(\"p.detail-info-right-tag-list > a\").map((i1, el1)=>{\n                    var _a1;\n                    return (_a1 = $1(el1).attr(\"title\")) === null || _a1 === void 0 ? void 0 : _a1.trim();\n                }).get();\n                switch($1(\"span.detail-info-right-title-tip\").text()){\n                    case \"Ongoing\":\n                        mangaInfo1.status = models_1.MediaStatus.ONGOING;\n                        break;\n                    case \"Completed\":\n                        mangaInfo1.status = models_1.MediaStatus.COMPLETED;\n                        break;\n                    default:\n                        mangaInfo1.status = models_1.MediaStatus.UNKNOWN;\n                        break;\n                }\n                mangaInfo1.rating = parseFloat($1(\"span.detail-info-right-title-star > span\").last().text());\n                mangaInfo1.authors = $1(\"p.detail-info-right-say > a\").map((i1, el1)=>$1(el1).attr(\"title\")).get();\n                mangaInfo1.chapters = $1(\"ul.detail-main-list > li\").map((i1, el1)=>{\n                    var _a1;\n                    return {\n                        id: (_a1 = $1(el1).find(\"a\").attr(\"href\")) === null || _a1 === void 0 ? void 0 : _a1.split(\"/manga/\")[1].slice(0, -7),\n                        title: $1(el1).find(\"a > div > p.title3\").text(),\n                        releasedDate: $1(el1).find(\"a > div > p.title2\").text().trim()\n                    };\n                }).get();\n                return mangaInfo1;\n            } catch (err1) {\n                throw new Error(err1.message);\n            }\n        };\n        this.fetchChapterPages = async (chapterId)=>{\n            var _a, _b;\n            const chapterPages = [];\n            const url = `${this.baseUrl}/manga/${chapterId}/1.html`;\n            try {\n                const { data } = await this.client.get(url, {\n                    headers: {\n                        cookie: \"isAdult=1\"\n                    }\n                });\n                const $ = (0, cheerio_1.load)(data);\n                const copyrightHandle = $(\"p.detail-block-content\").text().match(\"Dear user\") || $(\"p.detail-block-content\").text().match(\"blocked\");\n                if (copyrightHandle) {\n                    throw Error((_a = copyrightHandle.input) === null || _a === void 0 ? void 0 : _a.trim());\n                }\n                const bar = $(\"script[src*=chapter_bar]\").data();\n                const html = $.html();\n                if (typeof bar !== \"undefined\") {\n                    const ss = html.indexOf(\"eval(function(p,a,c,k,e,d)\");\n                    const se = html.indexOf(\"</script>\", ss);\n                    const s = html.substring(ss, se).replace(\"eval\", \"\");\n                    const ds = eval(s);\n                    const urls = ds.split(\"['\")[1].split(\"']\")[0].split(\"','\");\n                    urls.map((url1, i1)=>chapterPages.push({\n                            page: i1,\n                            img: `https:${url1}`,\n                            headerForImage: {\n                                Referer: url1\n                            }\n                        }));\n                } else {\n                    let sKey = this.extractKey(html);\n                    const chapterIdsl = html.indexOf(\"chapterid\");\n                    const chapterId = html.substring(chapterIdsl + 11, html.indexOf(\";\", chapterIdsl)).trim();\n                    const chapterPagesElmnt = $(\"body > div:nth-child(6) > div > span\").children(\"a\");\n                    const pages = parseInt((_b = chapterPagesElmnt.last().prev().attr(\"data-page\")) !== null && _b !== void 0 ? _b : \"0\");\n                    const pageBase = url.substring(0, url.lastIndexOf(\"/\"));\n                    let resText = \"\";\n                    for(let i = 1; i <= pages; i++){\n                        const pageLink = `${pageBase}/chapterfun.ashx?cid=${chapterId}&page=${i}&key=${sKey}`;\n                        for(let j = 1; j <= 3; j++){\n                            const { data } = await this.client.get(pageLink, {\n                                headers: {\n                                    Referer: url,\n                                    \"X-Requested-With\": \"XMLHttpRequest\",\n                                    cookie: \"isAdult=1\"\n                                }\n                            });\n                            resText = data;\n                            if (resText) break;\n                            else sKey = \"\";\n                        }\n                        const ds = eval(resText.replace(\"eval\", \"\"));\n                        const baseLinksp = ds.indexOf(\"pix=\") + 5;\n                        const baseLinkes = ds.indexOf(\";\", baseLinksp) - 1;\n                        const baseLink = ds.substring(baseLinksp, baseLinkes);\n                        const imageLinksp = ds.indexOf(\"pvalue=\") + 9;\n                        const imageLinkes = ds.indexOf('\"', imageLinksp);\n                        const imageLink = ds.substring(imageLinksp, imageLinkes);\n                        chapterPages.push({\n                            page: i - 1,\n                            img: `https:${baseLink}${imageLink}`,\n                            headerForImage: {\n                                Referer: url\n                            }\n                        });\n                    }\n                }\n                return chapterPages;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.search = async (query1, page1 = 1)=>{\n            const searchRes1 = {\n                currentPage: page1,\n                results: []\n            };\n            try {\n                const { data: data1 } = await this.client.get(`${this.baseUrl}/search?title=${query1}&page=${page1}`);\n                const $1 = (0, cheerio_1.load)(data1);\n                searchRes1.hasNextPage = $1(\"div.pager-list-left > a.active\").next().text() !== \">\";\n                searchRes1.results = $1(\"div.container > div > div > ul > li\").map((i1, el1)=>{\n                    var _a1;\n                    return {\n                        id: (_a1 = $1(el1).find(\"a\").attr(\"href\")) === null || _a1 === void 0 ? void 0 : _a1.split(\"/\")[2],\n                        title: $1(el1).find(\"p.manga-list-4-item-title > a\").text(),\n                        headerForImage: {\n                            Referer: this.baseUrl\n                        },\n                        image: $1(el1).find(\"a > img\").attr(\"src\"),\n                        description: $1(el1).find(\"p\").last().text(),\n                        status: $1(el1).find(\"p.manga-list-4-show-tag-list-2 > a\").text() === \"Ongoing\" ? models_1.MediaStatus.ONGOING : $1(el1).find(\"p.manga-list-4-show-tag-list-2 > a\").text() === \"Completed\" ? models_1.MediaStatus.COMPLETED : models_1.MediaStatus.UNKNOWN\n                    };\n                }).get();\n                return searchRes1;\n            } catch (err1) {\n                throw new Error(err1.message);\n            }\n        };\n        /**\n         *  credit: [tachiyomi-extensions](https://github.com/tachiyomiorg/tachiyomi-extensions/blob/master/src/en/mangahere/src/eu/kanade/tachiyomi/extension/en/mangahere/Mangahere.kt)\n         */ this.extractKey = (html)=>{\n            const skss = html.indexOf(\"eval(function(p,a,c,k,e,d)\");\n            const skse = html.indexOf(\"</script>\", skss);\n            const sks = html.substring(skss, skse).replace(\"eval\", \"\");\n            const skds = eval(sks);\n            const sksl = skds.indexOf(\"'\");\n            const skel = skds.indexOf(\";\");\n            const skrs = skds.substring(sksl, skel);\n            return eval(skrs);\n        };\n    }\n}\nexports[\"default\"] = MangaHere; //# sourceMappingURL=mangahere.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangahere.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangahost.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangahost.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass MangaHost extends models_1.MangaParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"MangaHost\";\n        this.baseUrl = \"https://mangahosted.com\";\n        this.logo = \"https://i.imgur.com/OVlhhsR.png\";\n        this.classPath = \"MANGA.MangaHost\";\n        this.fetchMangaInfo = async (mangaId)=>{\n            const mangaInfo = {\n                id: mangaId,\n                title: \"\"\n            };\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/manga/${mangaId}`);\n                const $ = (0, cheerio_1.load)(data);\n                mangaInfo.title = $(\"article.ejeCg > h1.title\").text();\n                mangaInfo.altTitles = $(\"article.ejeCg > h3.subtitle\").text();\n                mangaInfo.description = $(\"div.text > div.paragraph > p\").text().replace(/\\n/g, \"\").trim();\n                mangaInfo.headerForImage = {\n                    Referer: this.baseUrl\n                };\n                mangaInfo.image = $(\"div.widget:nth-child(1) > picture > img\").attr(\"src\");\n                mangaInfo.genres = $(\"article.ejeCg:nth-child(1) > div.tags > a.tag \").map((i, el)=>$(el).text()).get();\n                switch($(\"h3.subtitle > strong\").text()){\n                    case \"Completo\":\n                        mangaInfo.status = models_1.MediaStatus.COMPLETED;\n                        break;\n                    case \"Ativo\":\n                        mangaInfo.status = models_1.MediaStatus.ONGOING;\n                        break;\n                    default:\n                        mangaInfo.status = models_1.MediaStatus.UNKNOWN;\n                }\n                mangaInfo.views = parseInt($(\"div.classificacao-box-1 > div.text-block-3\").text().replace(\" views\", \"\").replace(/,/g, \"\").trim());\n                mangaInfo.authors = $(\"div.w-col.w-col-6:nth-child(1) > ul.w-list-unstyled:nth-child(1) > li:nth-child(3) > div:nth-child(1)\").map((i, el)=>$(el).text().replace(\"Autor: \", \"\").trim()).get();\n                mangaInfo.chapters = $(\"div.chapters > div.cap\").map((i, el)=>{\n                    const releasedDate = $(el).find(\"div.card > div.pop-content > small\").text().match(/Adicionado em (.+?)\"/);\n                    return {\n                        id: `${$(el).find(\"a.btn-caps\").text()}`,\n                        title: $(el).find(\"a.btn-caps\").attr(\"title\"),\n                        views: null,\n                        releasedDate: releasedDate ? releasedDate[1] : \"\"\n                    };\n                }).get();\n                return mangaInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchChapterPages = async (mangaId, chapterId)=>{\n            try {\n                const url = `${this.baseUrl}/manga/${mangaId}/${chapterId}`;\n                const { data } = await this.client.get(url);\n                const $ = (0, cheerio_1.load)(data);\n                const pages = $(\"section#imageWrapper > div > div.read-slideshow > a > img\").map((i, el)=>({\n                        img: $(el).attr(\"src\"),\n                        page: i,\n                        title: `Page ${i + 1}`,\n                        headerForImage: {\n                            Referer: this.baseUrl\n                        }\n                    })).get();\n                return pages;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param query Search query\n         */ this.search = async (query)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/find/${query.replace(/ /g, \"+\")}`);\n                const $ = (0, cheerio_1.load)(data);\n                const results = $(\"body > div.w-container > main > table > tbody > tr\").map((i, row)=>{\n                    var _a;\n                    return {\n                        id: (_a = $(row).find(\"td > a.pull-left\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[4],\n                        title: $(row).find(\"td > h4.entry-title > a\").text(),\n                        image: $(row).find(\"td > a.pull-left > picture > img.manga\").attr(\"src\"),\n                        headerForImage: {\n                            Referer: this.baseUrl\n                        }\n                    };\n                }).get();\n                return {\n                    results: results\n                };\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = MangaHost; //# sourceMappingURL=mangahost.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangahost.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangakakalot.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangakakalot.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass MangaKakalot extends models_1.MangaParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"MangaKakalot\";\n        this.baseUrl = \"https://mangakakalot.com\";\n        this.logo = \"https://techbigs.com/uploads/2022/1/mangakakalot-apkoptimized.jpg\";\n        this.classPath = \"MANGA.MangaKakalot\";\n        this.fetchMangaInfo = async (mangaId)=>{\n            const mangaInfo = {\n                id: mangaId,\n                title: \"\"\n            };\n            const url = mangaId.includes(\"read\") ? this.baseUrl : \"https://readmanganato.com\";\n            try {\n                const { data } = await this.client.get(`${url}/${mangaId}`);\n                const $ = (0, cheerio_1.load)(data);\n                if (url.includes(\"mangakakalot\")) {\n                    mangaInfo.title = $(\"div.manga-info-top > ul > li:nth-child(1) > h1\").text();\n                    mangaInfo.altTitles = $(\"div.manga-info-top > ul > li:nth-child(1) > h2\").text().replace(\"Alternative :\", \"\").split(\";\");\n                    mangaInfo.description = $(\"#noidungm\").text().replace(`${mangaInfo.title} summary:`, \"\").replace(/\\n/g, \"\").trim();\n                    mangaInfo.headerForImage = {\n                        Referer: this.baseUrl\n                    };\n                    mangaInfo.image = $(\"div.manga-info-top > div > img\").attr(\"src\");\n                    mangaInfo.genres = $(\"div.manga-info-top > ul > li:nth-child(7) > a\").map((i, el)=>$(el).text()).get();\n                    switch($(\"div.manga-info-top > ul > li:nth-child(3)\").text().replace(\"Status :\", \"\").trim()){\n                        case \"Completed\":\n                            mangaInfo.status = models_1.MediaStatus.COMPLETED;\n                            break;\n                        case \"Ongoing\":\n                            mangaInfo.status = models_1.MediaStatus.ONGOING;\n                            break;\n                        default:\n                            mangaInfo.status = models_1.MediaStatus.UNKNOWN;\n                    }\n                    mangaInfo.views = parseInt($(\"div.manga-info-top > ul > li:nth-child(6)\").text().replace(\"View : \", \"\").replace(/,/g, \"\").trim());\n                    mangaInfo.authors = $(\"div.manga-info-top > ul > li:nth-child(2) > a\").map((i, el)=>$(el).text()).get();\n                    mangaInfo.chapters = $(\"div.chapter-list > div.row\").map((i, el)=>{\n                        var _a;\n                        return {\n                            id: (_a = $(el).find(\"span > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"chapter/\")[1],\n                            title: $(el).find(\"span > a\").text(),\n                            views: parseInt($(el).find(\"span:nth-child(2)\").text().replace(/,/g, \"\").trim()),\n                            releasedDate: $(el).find(\"span:nth-child(3)\").attr(\"title\")\n                        };\n                    }).get();\n                } else {\n                    mangaInfo.title = $(\" div.panel-story-info > div.story-info-right > h1\").text();\n                    mangaInfo.altTitles = $(\"div.story-info-right > table > tbody > tr:nth-child(1) > td.table-value > h2\").text().split(\";\");\n                    mangaInfo.description = $(\"#panel-story-info-description\").text().replace(`Description :`, \"\").replace(/\\n/g, \"\").trim();\n                    mangaInfo.headerForImage = {\n                        Referer: \"https://readmanganato.com\"\n                    };\n                    mangaInfo.image = $(\"div.story-info-left > span.info-image > img\").attr(\"src\");\n                    mangaInfo.genres = $(\"div.story-info-right > table > tbody > tr:nth-child(4) > td.table-value > a\").map((i, el)=>$(el).text()).get();\n                    switch($(\"div.story-info-right > table > tbody > tr:nth-child(3) > td.table-value\").text().trim()){\n                        case \"Completed\":\n                            mangaInfo.status = models_1.MediaStatus.COMPLETED;\n                            break;\n                        case \"Ongoing\":\n                            mangaInfo.status = models_1.MediaStatus.ONGOING;\n                            break;\n                        default:\n                            mangaInfo.status = models_1.MediaStatus.UNKNOWN;\n                    }\n                    mangaInfo.views = parseInt($(\"div.story-info-right > div > p:nth-child(2) > span.stre-value\").text().replace(/,/g, \"\").trim());\n                    mangaInfo.authors = $(\"div.story-info-right > table > tbody > tr:nth-child(2) > td.table-value > a\").map((i, el)=>$(el).text()).get();\n                    mangaInfo.chapters = $(\"div.container-main-left > div.panel-story-chapter-list > ul > li\").map((i, el)=>{\n                        var _a;\n                        return {\n                            id: ((_a = $(el).find(\"a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\".com/\")[1]) + \"$$READMANGANATO\",\n                            title: $(el).find(\"a\").text(),\n                            views: parseInt($(el).find(\"span.chapter-view.text-nowrap\").text().replace(/,/g, \"\").trim()),\n                            releasedDate: $(el).find(\"span.chapter-time.text-nowrap\").attr(\"title\")\n                        };\n                    }).get();\n                }\n                return mangaInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchChapterPages = async (chapterId)=>{\n            try {\n                const url = !chapterId.includes(\"$$READMANGANATO\") ? `${this.baseUrl}/chapter/${chapterId}` : `https://readmanganato.com/${chapterId.replace(\"$$READMANGANATO\", \"\")}`;\n                const { data } = await this.client.get(url);\n                const $ = (0, cheerio_1.load)(data);\n                const pages = $(\"div.container-chapter-reader > img\").map((i, el)=>{\n                    var _a;\n                    return {\n                        img: $(el).attr(\"src\"),\n                        page: i,\n                        title: (_a = $(el).attr(\"alt\")) === null || _a === void 0 ? void 0 : _a.replace(/(- Mangakakalot.com)|(- MangaNato.com)/g, \" \").trim(),\n                        headerForImage: {\n                            Referer: this.baseUrl\n                        }\n                    };\n                }).get();\n                return pages;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param query Search query\n         */ this.search = async (query)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/search/story/${query.replace(/ /g, \"_\")}`);\n                const $ = (0, cheerio_1.load)(data);\n                const results = $(\"div.daily-update > div > div\").map((i, el)=>{\n                    var _a;\n                    return {\n                        id: (_a = $(el).find(\"div > h3 > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[3],\n                        title: $(el).find(\"div > h3 > a\").text(),\n                        image: $(el).find(\"a > img\").attr(\"src\"),\n                        headerForImage: {\n                            Referer: this.baseUrl\n                        }\n                    };\n                }).get();\n                return {\n                    results: results\n                };\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = MangaKakalot; //# sourceMappingURL=mangakakalot.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangakakalot.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangapark.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangapark.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass Mangapark extends models_1.MangaParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"Mangapark\";\n        this.baseUrl = \"https://v2.mangapark.net\";\n        this.logo = \"https://raw.githubusercontent.com/tachiyomiorg/tachiyomi-extensions/repo/icon/tachiyomi-en.mangapark-v1.3.23.png\";\n        this.classPath = \"MANGA.Mangapark\";\n        this.fetchMangaInfo = async (mangaId, ...args)=>{\n            const mangaInfo = {\n                id: mangaId,\n                title: \"\"\n            };\n            const url = `${this.baseUrl}/manga/${mangaId}`;\n            try {\n                const { data } = await this.client.get(url);\n                const $ = (0, cheerio_1.load)(data);\n                mangaInfo.title = $(\"div.pb-1.mb-2.line-b-f.hd h2 a\").text();\n                mangaInfo.image = $(\"img.w-100\").attr(\"src\");\n                mangaInfo.description = $(\".limit-html.summary\").text();\n                mangaInfo.chapters = $(\".py-1.item\").get().map((chapter)=>({\n                        /*\n                    See below: if inside of [], removed; if inside of {}, chapterId.\n                    [https://v2.mangapark.net/manga/] {bungou-stray-dogs/i2573185} [/c87/1]\n                    */ id: `${mangaId}/` + $(chapter).find(\"a.ml-1.visited.ch\").attr(\"href\").split(`/manga/${mangaId}/`).toString().replace(\",\", \"\").split(\"/\")[0],\n                        // Get ch.xyz + chapter title, trim l/t whitespace on latter, concatenate.\n                        title: $(chapter).find(\".ml-1.visited.ch\").text() + $(chapter).find(\"div.d-none.d-md-flex.align-items-center.ml-0.ml-md-1.txt\").text().trim(),\n                        // Get 'x time ago' and remove l/t whitespace.\n                        releaseDate: $(chapter).find(\"span.time\").text().trim()\n                    }));\n                return mangaInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchChapterPages = async (chapterId, ...args)=>{\n            const regex = /var _load_pages = \\[(.*)\\]/gm;\n            // Fetches manga with all pages; no /cx/y after.\n            const url = `${this.baseUrl}/manga/${chapterId}`;\n            try {\n                const { data } = await this.client.get(url);\n                const varLoadPages = data.match(regex)[0];\n                const loadPagesJson = JSON.parse(varLoadPages.replace(\"var _load_pages = \", \"\"));\n                const pages = loadPagesJson.map((page)=>{\n                    return {\n                        page: page.n,\n                        img: page.u\n                    };\n                });\n                return pages;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.search = async (query, page = 1, ...args)=>{\n            const url = `${this.baseUrl}/search?q=${query}&page=${page}`;\n            try {\n                const { data } = await this.client.get(url);\n                const $ = (0, cheerio_1.load)(data);\n                const results = $(\".item\").get().map((item)=>{\n                    var _a;\n                    const cover = $(item).find(\".cover\");\n                    return {\n                        id: `${(_a = cover.attr(\"href\")) === null || _a === void 0 ? void 0 : _a.replace(\"/manga/\", \"\")}`,\n                        title: `${cover.attr(\"title\")}`,\n                        image: `${$(cover).find(\"img\").attr(\"src\")}}`\n                    };\n                });\n                return {\n                    results: results\n                };\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = Mangapark; //# sourceMappingURL=mangapark.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangapark.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangapill.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangapill.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass MangaPill extends models_1.MangaParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"MangaPill\";\n        this.baseUrl = \"https://mangapill.com\";\n        this.logo = \"https://scontent-man2-1.xx.fbcdn.net/v/t39.30808-6/300819578_399903675586699_2357525969702348451_n.png?_nc_cat=100&ccb=1-7&_nc_sid=09cbfe&_nc_ohc=Md2cQ4wRNWwAX-_U0fz&_nc_ht=scontent-man2-1.xx&oh=00_AfCJjAYDk9bsndz8uyNG-GdFIYcPvdIzbHnetHGzf1pVSw&oe=63BDD131\";\n        this.classPath = \"MANGA.MangaPill\";\n        /**\n         *\n         * @param query Search query\n         */ this.search = async (query)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/search?q=${encodeURIComponent(query)}`);\n                const $ = (0, cheerio_1.load)(data);\n                const results = $(\"div.container div.my-3.justify-end > div\").map((i, el)=>{\n                    var _a;\n                    return {\n                        id: (_a = $(el).find(\"a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/manga/\")[1],\n                        title: $(el).find(\"div > a > div\").text().trim(),\n                        image: $(el).find(\"a img\").attr(\"data-src\")\n                    };\n                }).get();\n                return {\n                    results: results\n                };\n            } catch (err) {\n                //   console.log(err);\n                throw new Error(err.message);\n            }\n        };\n        this.fetchMangaInfo = async (mangaId)=>{\n            const mangaInfo = {\n                id: mangaId,\n                title: \"\"\n            };\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/manga/${mangaId}`);\n                const $ = (0, cheerio_1.load)(data);\n                mangaInfo.title = $(\"div.container div.my-3 div.flex-col div.mb-3 h1\").text().trim();\n                mangaInfo.description = $(\"div.container div.my-3  div.flex-col p.text--secondary\").text().split(\"\\n\").join(\" \");\n                mangaInfo.releaseDate = $('div.container div.my-3 div.flex-col div.gap-3.mb-3 div:contains(\"Year\")').text().split(\"Year\\n\")[1].trim();\n                mangaInfo.genres = $('div.container div.my-3 div.flex-col div.mb-3:contains(\"Genres\")').text().split(\"\\n\").filter((genre)=>genre !== \"Genres\" && genre !== \"\").map((genre)=>genre.trim());\n                mangaInfo.chapters = $(\"div.container div.border-border div#chapters div.grid-cols-1 a\").map((i, el)=>{\n                    var _a;\n                    return {\n                        id: (_a = $(el).attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/chapters/\")[1],\n                        title: $(el).text().trim(),\n                        chapter: $(el).text().split(\"Chapter \")[1]\n                    };\n                }).get();\n                return mangaInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchChapterPages = async (chapterId)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/chapters/${chapterId}`);\n                const $ = (0, cheerio_1.load)(data);\n                const chapterSelector = $(\"chapter-page\");\n                const pages = chapterSelector.map((i, el)=>({\n                        img: $(el).find(\"div picture img\").attr(\"data-src\"),\n                        page: parseFloat($(el).find(`div[data-summary] > div`).text().split(\"page \")[1])\n                    })).get();\n                return pages;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\n// (async () => {\n//   const manga = new MangaPill();\n//   const search = await manga.search('one piece');\n//   const info = await manga.fetchMangaInfo(search.results[1].id);\n//   const pages = await manga.fetchChapterPages(info.chapters![0].id);\n//   console.log(pages);\n// })();\nexports[\"default\"] = MangaPill; //# sourceMappingURL=mangapill.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangapill.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangareader.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangareader.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass MangaReader extends models_1.MangaParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"MangaReader\";\n        this.baseUrl = \"https://mangareader.to\";\n        this.logo = \"https://pbs.twimg.com/profile_images/1437311892905545728/TO0hFfUr_400x400.jpg\";\n        this.classPath = \"MANGA.MangaReader\";\n        /**\n         *\n         * @param query Search query\n         */ this.search = async (query)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/search?keyword=${query}`);\n                const $ = (0, cheerio_1.load)(data);\n                const results = $(\"div.manga_list-sbs div.mls-wrap div.item\").map((i, el)=>{\n                    var _a;\n                    return {\n                        id: (_a = $(el).find(\"a.manga-poster\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/\")[1],\n                        title: $(el).find(\"div.manga-detail h3.manga-name a\").text().trim(),\n                        image: $(el).find(\"a.manga-poster img\").attr(\"src\"),\n                        genres: $(el).find(`div.manga-detail div.fd-infor span > a`).map((i, genre)=>$(genre).text()).get()\n                    };\n                }).get();\n                return {\n                    results: results\n                };\n            } catch (err) {\n                //   console.log(err);\n                throw new Error(err.message);\n            }\n        };\n        this.fetchMangaInfo = async (mangaId)=>{\n            const mangaInfo = {\n                id: mangaId,\n                title: \"\"\n            };\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/${mangaId}`);\n                const $ = (0, cheerio_1.load)(data);\n                const container = $(\"div.container\");\n                mangaInfo.title = container.find(\"div.anisc-detail h2.manga-name\").text().trim();\n                mangaInfo.image = container.find(\"img.manga-poster-img\").attr(\"src\");\n                mangaInfo.description = $(\"div.modal-body div.description-modal\").text().split(\"\\n\").join(\" \").trim();\n                mangaInfo.genres = container.find(\"div.sort-desc div.genres a\").map((i, genre)=>$(genre).text().trim()).get();\n                mangaInfo.chapters = container.find(`div.chapters-list-ul ul li`).map((i, el)=>{\n                    var _a;\n                    return {\n                        id: (_a = $(el).find(\"a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"/read/\")[1],\n                        title: $(el).find(\"a\").attr(\"title\").trim(),\n                        chapter: $(el).find(\"a span.name\").text().split(\"Chapter \")[1].split(\":\")[0]\n                    };\n                }).get();\n                return mangaInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchChapterPages = async (chapterId)=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/read/${chapterId}`);\n                const $ = (0, cheerio_1.load)(data);\n                const readingId = $(\"div#wrapper\").attr(\"data-reading-id\");\n                if (!readingId) {\n                    throw new Error(\"Unable to find pages\");\n                }\n                const ajaxURL = `https://mangareader.to/ajax/image/list/chap/${readingId}?mode=vertical&quality=high`;\n                const { data: pagesData } = await this.client.get(ajaxURL);\n                const $PagesHTML = (0, cheerio_1.load)(pagesData.html);\n                const pagesSelector = $PagesHTML(\"div#main-wrapper div.container-reader-chapter div.iv-card\");\n                const pages = pagesSelector.map((i, el)=>({\n                        img: $(el).attr(\"data-url\").replace(\"&amp;\", \"&\"),\n                        page: i + 1\n                    })).get();\n                return pages;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\n// (async () => {\n//   const manga = new MangaReader();\n//   const search = await manga.search('one piece');\n//   const info = await manga.fetchMangaInfo(search.results[0].id);\n//   const pages = await manga.fetchChapterPages(info.chapters![0].id);\n//   console.log(pages);\n// })();\nexports[\"default\"] = MangaReader; //# sourceMappingURL=mangareader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangareader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangasee123.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangasee123.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst domhandler_1 = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/.pnpm/domhandler@5.0.3/node_modules/domhandler/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass Mangasee123 extends models_1.MangaParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"MangaSee\";\n        this.baseUrl = \"https://mangasee123.com\";\n        this.logo = \"https://scontent.fman4-1.fna.fbcdn.net/v/t1.6435-1/80033336_1830005343810810_419412485691408384_n.png?stp=dst-png_p148x148&_nc_cat=104&ccb=1-7&_nc_sid=1eb0c7&_nc_ohc=XpeoABDI-sEAX-5hLFV&_nc_ht=scontent.fman4-1.fna&oh=00_AT9nIRz5vPiNqqzNpSg2bJymX22rZ1JumYTKBqg_cD0Alg&oe=6317290E\";\n        this.classPath = \"MANGA.Mangasee123\";\n        // private readonly sgProxy = 'https://cors.consumet.stream';\n        this.fetchMangaInfo = async (mangaId, ...args)=>{\n            const mangaInfo = {\n                id: mangaId,\n                title: \"\"\n            };\n            const url = `${this.baseUrl}/manga`;\n            try {\n                const { data } = await this.client.get(`${url}/${mangaId}`);\n                const $ = (0, cheerio_1.load)(data);\n                const schemaScript = $(\"body > script:nth-child(15)\").get()[0].children[0];\n                if ((0, domhandler_1.isText)(schemaScript)) {\n                    const mainEntity = JSON.parse(schemaScript.data)[\"mainEntity\"];\n                    mangaInfo.title = mainEntity[\"name\"];\n                    mangaInfo.altTitles = mainEntity[\"alternateName\"];\n                    mangaInfo.genres = mainEntity[\"genre\"];\n                }\n                mangaInfo.image = $(\"img.bottom-5\").attr(\"src\");\n                mangaInfo.headerForImage = {\n                    Referer: this.baseUrl\n                };\n                mangaInfo.description = $(\".top-5 .Content\").text();\n                const contentScript = $(\"body > script:nth-child(16)\").get()[0].children[0];\n                if ((0, domhandler_1.isText)(contentScript)) {\n                    const chaptersData = this.processScriptTagVariable(contentScript.data, \"vm.Chapters = \");\n                    mangaInfo.chapters = chaptersData.map((i)=>{\n                        var _a;\n                        return {\n                            id: `${mangaId}-chapter-${this.processChapterNumber(i[\"Chapter\"])}`,\n                            title: `${(_a = i[\"ChapterName\"]) !== null && _a !== void 0 ? _a : `Chapter ${this.processChapterNumber(i[\"Chapter\"])}`}`,\n                            releaseDate: i[\"Date\"]\n                        };\n                    });\n                }\n                return mangaInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchChapterPages = async (chapterId, ...args)=>{\n            const images = [];\n            const url = `${this.baseUrl}/read-online/${chapterId}-page-1.html`;\n            try {\n                const { data } = await this.client.get(`${url}`);\n                const $ = (0, cheerio_1.load)(data);\n                const chapterScript = $(\"body > script:nth-child(19)\").get()[0].children[0];\n                if ((0, domhandler_1.isText)(chapterScript)) {\n                    const curChapter = this.processScriptTagVariable(chapterScript.data, \"vm.CurChapter = \");\n                    const imageHost = this.processScriptTagVariable(chapterScript.data, \"vm.CurPathName = \");\n                    const curChapterLength = Number(curChapter[\"Page\"]);\n                    for(let i = 0; i < curChapterLength; i++){\n                        const chapter = this.processChapterForImageUrl(chapterId.replace(/[^0-9.]/g, \"\"));\n                        const page = `${i + 1}`.padStart(3, \"0\");\n                        const mangaId = chapterId.split(\"-chapter-\", 1)[0];\n                        const imagePath = `https://${imageHost}/manga/${mangaId}/${chapter}-${page}.png`;\n                        images.push(imagePath);\n                    }\n                }\n                const pages = images.map((image, i)=>({\n                        page: i + 1,\n                        img: image,\n                        headerForImage: {\n                            Referer: this.baseUrl\n                        }\n                    }));\n                return pages;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.search = async (query, ...args)=>{\n            const matches = [];\n            const sanitizedQuery = query.replace(/\\s/g, \"\").toLowerCase();\n            try {\n                const { data } = await this.client.get(`https://mangasee123.com/_search.php`);\n                for(const i in data){\n                    const sanitizedAlts = [];\n                    const item = data[i];\n                    const altTitles = data[i][\"a\"];\n                    for (const alt of altTitles){\n                        sanitizedAlts.push(alt.replace(/\\s/g, \"\").toLowerCase());\n                    }\n                    if (item[\"s\"].replace(/\\s/g, \"\").toLowerCase().includes(sanitizedQuery) || sanitizedAlts.includes(sanitizedQuery)) {\n                        matches.push(item);\n                    }\n                }\n                const results = matches.map((val)=>({\n                        id: val[\"i\"],\n                        title: val[\"s\"],\n                        altTitles: val[\"a\"],\n                        image: `https://temp.compsci88.com/cover/${val[\"i\"]}.jpg`,\n                        headerForImage: {\n                            Referer: this.baseUrl\n                        }\n                    }));\n                return {\n                    results: results\n                };\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.processScriptTagVariable = (script, variable)=>{\n            const chopFront = script.substring(script.search(variable) + variable.length, script.length);\n            const chapters = JSON.parse(chopFront.substring(0, chopFront.search(\";\")));\n            return chapters;\n        };\n        // e.g. 102055 => [1]--[0205]--[5]\n        //                 ?    chap   dec\n        this.processChapterNumber = (chapter)=>{\n            const decimal = chapter.substring(chapter.length - 1, chapter.length);\n            chapter = chapter.replace(chapter[0], \"\").slice(0, -1);\n            if (decimal == \"0\") return `${+chapter}`;\n            if (chapter.startsWith(\"0\")) chapter = chapter.replace(chapter[0], \"\");\n            return `${+chapter}.${decimal}`;\n        };\n        this.processChapterForImageUrl = (chapter)=>{\n            if (!chapter.includes(\".\")) return chapter.padStart(4, \"0\");\n            const values = chapter.split(\".\");\n            const pad = values[0].padStart(4, \"0\");\n            return `${pad}.${values[1]}`;\n        };\n    }\n}\n// (async () => {\n//   const manga = new Mangasee123();\n//   const mediaInfo = await manga.search('oyasumi');\n//   const mangaInfo = await manga.fetchMangaInfo(mediaInfo.results[0].id);\n//   const chapterPages = await manga.fetchChapterPages(mangaInfo.chapters![0].id);\n//   console.log(chapterPages);\n//   console.log(mediaInfo, mangaInfo);\n// })();\nexports[\"default\"] = Mangasee123; //# sourceMappingURL=mangasee123.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangasee123.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/anilist.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/anilist.js ***!
  \************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/.pnpm/axios@0.27.2/node_modules/axios/index.js\"));\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nconst gogoanime_1 = __importDefault(__webpack_require__(/*! ../../providers/anime/gogoanime */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/gogoanime.js\"));\nconst anify_1 = __importDefault(__webpack_require__(/*! ../anime/anify */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/anify.js\"));\nconst zoro_1 = __importDefault(__webpack_require__(/*! ../anime/zoro */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/zoro.js\"));\nconst mangasee123_1 = __importDefault(__webpack_require__(/*! ../manga/mangasee123 */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/manga/mangasee123.js\"));\nconst crunchyroll_1 = __importDefault(__webpack_require__(/*! ../anime/crunchyroll */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/crunchyroll.js\"));\nconst bilibili_1 = __importDefault(__webpack_require__(/*! ../anime/bilibili */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/bilibili.js\"));\nconst _9anime_1 = __importDefault(__webpack_require__(/*! ../anime/9anime */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/9anime.js\"));\nconst utils_2 = __webpack_require__(/*! ../../utils/utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/utils.js\");\nclass Anilist extends models_1.AnimeParser {\n    /**\n     * This class maps anilist to kitsu with any other anime provider.\n     * kitsu is used for episode images, titles and description.\n     * @param provider anime provider (optional) default: Gogoanime\n     * @param proxyConfig proxy config (optional)\n     * @param adapter axios adapter (optional)\n     */ constructor(provider, proxyConfig, adapter){\n        super(proxyConfig, adapter);\n        this.proxyConfig = proxyConfig;\n        this.name = \"Anilist\";\n        this.baseUrl = \"https://anilist.co\";\n        this.logo = \"https://upload.wikimedia.org/wikipedia/commons/6/61/AniList_logo.svg\";\n        this.classPath = \"META.Anilist\";\n        this.anilistGraphqlUrl = \"https://graphql.anilist.co\";\n        this.kitsuGraphqlUrl = \"https://kitsu.io/api/graphql\";\n        this.malSyncUrl = \"https://api.malsync.moe\";\n        this.anifyUrl = \"https://api.anify.tv\";\n        /**\n         * @param query Search query\n         * @param page Page number (optional)\n         * @param perPage Number of results per page (optional) (default: 15) (max: 50)\n         */ this.search = async (query, page = 1, perPage = 15)=>{\n            var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                query: (0, utils_1.anilistSearchQuery)(query, page, perPage)\n            };\n            try {\n                let { data, status } = await this.client.post(this.anilistGraphqlUrl, options, {\n                    validateStatus: ()=>true\n                });\n                if (status >= 500 || status == 429) data = await new anify_1.default().rawSearch(query, page);\n                const res = {\n                    currentPage: (_d = (_c = (_b = data.data.Page) === null || _b === void 0 ? void 0 : _b.pageInfo) === null || _c === void 0 ? void 0 : _c.currentPage) !== null && _d !== void 0 ? _d : (_e = data.meta) === null || _e === void 0 ? void 0 : _e.currentPage,\n                    hasNextPage: (_h = (_g = (_f = data.data.Page) === null || _f === void 0 ? void 0 : _f.pageInfo) === null || _g === void 0 ? void 0 : _g.hasNextPage) !== null && _h !== void 0 ? _h : ((_j = data.meta) === null || _j === void 0 ? void 0 : _j.currentPage) != ((_k = data.meta) === null || _k === void 0 ? void 0 : _k.lastPage),\n                    results: (_p = (_o = (_m = (_l = data.data) === null || _l === void 0 ? void 0 : _l.Page) === null || _m === void 0 ? void 0 : _m.media) === null || _o === void 0 ? void 0 : _o.map((item)=>{\n                        var _b, _c, _d, _e, _f, _g, _h, _j, _k;\n                        return {\n                            id: item.id.toString(),\n                            malId: item.idMal,\n                            title: {\n                                romaji: item.title.romaji,\n                                english: item.title.english,\n                                native: item.title.native,\n                                userPreferred: item.title.userPreferred\n                            } || item.title.romaji,\n                            status: item.status == \"RELEASING\" ? models_1.MediaStatus.ONGOING : item.status == \"FINISHED\" ? models_1.MediaStatus.COMPLETED : item.status == \"NOT_YET_RELEASED\" ? models_1.MediaStatus.NOT_YET_AIRED : item.status == \"CANCELLED\" ? models_1.MediaStatus.CANCELLED : item.status == \"HIATUS\" ? models_1.MediaStatus.HIATUS : models_1.MediaStatus.UNKNOWN,\n                            image: (_e = (_c = (_b = item.coverImage) === null || _b === void 0 ? void 0 : _b.extraLarge) !== null && _c !== void 0 ? _c : (_d = item.coverImage) === null || _d === void 0 ? void 0 : _d.large) !== null && _e !== void 0 ? _e : (_f = item.coverImage) === null || _f === void 0 ? void 0 : _f.medium,\n                            cover: item.bannerImage,\n                            popularity: item.popularity,\n                            description: item.description,\n                            rating: item.averageScore,\n                            genres: item.genres,\n                            color: (_g = item.coverImage) === null || _g === void 0 ? void 0 : _g.color,\n                            totalEpisodes: (_h = item.episodes) !== null && _h !== void 0 ? _h : ((_j = item.nextAiringEpisode) === null || _j === void 0 ? void 0 : _j.episode) - 1,\n                            currentEpisodeCount: (item === null || item === void 0 ? void 0 : item.nextAiringEpisode) ? ((_k = item === null || item === void 0 ? void 0 : item.nextAiringEpisode) === null || _k === void 0 ? void 0 : _k.episode) - 1 : item.episodes,\n                            type: item.format,\n                            releaseDate: item.seasonYear\n                        };\n                    })) !== null && _p !== void 0 ? _p : data.data.map((item)=>{\n                        var _b, _c;\n                        return {\n                            id: item.anilistId.toString(),\n                            malId: item.mappings[\"mal\"],\n                            title: item.title,\n                            status: item.status == \"RELEASING\" ? models_1.MediaStatus.ONGOING : item.status == \"FINISHED\" ? models_1.MediaStatus.COMPLETED : item.status == \"NOT_YET_RELEASED\" ? models_1.MediaStatus.NOT_YET_AIRED : item.status == \"CANCELLED\" ? models_1.MediaStatus.CANCELLED : item.status == \"HIATUS\" ? models_1.MediaStatus.HIATUS : models_1.MediaStatus.UNKNOWN,\n                            image: (_b = item.coverImage) !== null && _b !== void 0 ? _b : item.bannerImage,\n                            cover: item.bannerImage,\n                            popularity: item.popularity,\n                            description: item.description,\n                            rating: item.averageScore,\n                            genres: item.genre,\n                            color: item.color,\n                            totalEpisodes: item.currentEpisode,\n                            currentEpisodeCount: (item === null || item === void 0 ? void 0 : item.nextAiringEpisode) ? ((_c = item === null || item === void 0 ? void 0 : item.nextAiringEpisode) === null || _c === void 0 ? void 0 : _c.episode) - 1 : item.currentEpisode,\n                            type: item.format,\n                            releaseDate: item.year\n                        };\n                    })\n                };\n                return res;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param query Search query (optional)\n         * @param type Media type (optional) (default: `ANIME`) (options: `ANIME`, `MANGA`)\n         * @param page Page number (optional)\n         * @param perPage Number of results per page (optional) (default: `20`) (max: `50`)\n         * @param format Format (optional) (options: `TV`, `TV_SHORT`, `MOVIE`, `SPECIAL`, `OVA`, `ONA`, `MUSIC`)\n         * @param sort Sort (optional) (Default: `[POPULARITY_DESC, SCORE_DESC]`) (options: `POPULARITY_DESC`, `POPULARITY`, `TRENDING_DESC`, `TRENDING`, `UPDATED_AT_DESC`, `UPDATED_AT`, `START_DATE_DESC`, `START_DATE`, `END_DATE_DESC`, `END_DATE`, `FAVOURITES_DESC`, `FAVOURITES`, `SCORE_DESC`, `SCORE`, `TITLE_ROMAJI_DESC`, `TITLE_ROMAJI`, `TITLE_ENGLISH_DESC`, `TITLE_ENGLISH`, `TITLE_NATIVE_DESC`, `TITLE_NATIVE`, `EPISODES_DESC`, `EPISODES`, `ID`, `ID_DESC`)\n         * @param genres Genres (optional) (options: `Action`, `Adventure`, `Cars`, `Comedy`, `Drama`, `Fantasy`, `Horror`, `Mahou Shoujo`, `Mecha`, `Music`, `Mystery`, `Psychological`, `Romance`, `Sci-Fi`, `Slice of Life`, `Sports`, `Supernatural`, `Thriller`)\n         * @param id anilist Id (optional)\n         * @param year Year (optional) e.g. `2022`\n         * @param status Status (optional) (options: `RELEASING`, `FINISHED`, `NOT_YET_RELEASED`, `CANCELLED`, `HIATUS`)\n         * @param season Season (optional) (options: `WINTER`, `SPRING`, `SUMMER`, `FALL`)\n         */ this.advancedSearch = async (query, type = \"ANIME\", page = 1, perPage = 20, format, sort, genres, id, year, status, season)=>{\n            var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                query: (0, utils_1.anilistAdvancedQuery)(),\n                variables: {\n                    search: query,\n                    type: type,\n                    page: page,\n                    size: perPage,\n                    format: format,\n                    sort: sort,\n                    genres: genres,\n                    id: id,\n                    year: year ? `${year}%` : undefined,\n                    status: status,\n                    season: season\n                }\n            };\n            if (genres) {\n                genres.forEach((genre)=>{\n                    if (!Object.values(models_1.Genres).includes(genre)) {\n                        throw new Error(`genre ${genre} is not valid`);\n                    }\n                });\n            }\n            try {\n                let { data, status } = await this.client.post(this.anilistGraphqlUrl, options, {\n                    validateStatus: ()=>true\n                });\n                if (status >= 500 && !query) throw new Error(\"No results found\");\n                if (status >= 500) data = await new anify_1.default().rawSearch(query, page);\n                const res = {\n                    currentPage: (_e = (_d = (_c = (_b = data.data) === null || _b === void 0 ? void 0 : _b.Page) === null || _c === void 0 ? void 0 : _c.pageInfo) === null || _d === void 0 ? void 0 : _d.currentPage) !== null && _e !== void 0 ? _e : (_f = data.meta) === null || _f === void 0 ? void 0 : _f.currentPage,\n                    hasNextPage: (_k = (_j = (_h = (_g = data.data) === null || _g === void 0 ? void 0 : _g.Page) === null || _h === void 0 ? void 0 : _h.pageInfo) === null || _j === void 0 ? void 0 : _j.hasNextPage) !== null && _k !== void 0 ? _k : ((_l = data.meta) === null || _l === void 0 ? void 0 : _l.currentPage) != ((_m = data.meta) === null || _m === void 0 ? void 0 : _m.lastPage),\n                    totalPages: (_q = (_p = (_o = data.data) === null || _o === void 0 ? void 0 : _o.Page) === null || _p === void 0 ? void 0 : _p.pageInfo) === null || _q === void 0 ? void 0 : _q.lastPage,\n                    totalResults: (_t = (_s = (_r = data.data) === null || _r === void 0 ? void 0 : _r.Page) === null || _s === void 0 ? void 0 : _s.pageInfo) === null || _t === void 0 ? void 0 : _t.total,\n                    results: []\n                };\n                res.results.push(...(_x = (_w = (_v = (_u = data.data) === null || _u === void 0 ? void 0 : _u.Page) === null || _v === void 0 ? void 0 : _v.media) === null || _w === void 0 ? void 0 : _w.map((item)=>{\n                    var _b, _c, _d, _e, _f, _g, _h;\n                    return {\n                        id: item.id.toString(),\n                        malId: item.idMal,\n                        title: {\n                            romaji: item.title.romaji,\n                            english: item.title.english,\n                            native: item.title.native,\n                            userPreferred: item.title.userPreferred\n                        } || item.title.romaji,\n                        status: item.status == \"RELEASING\" ? models_1.MediaStatus.ONGOING : item.status == \"FINISHED\" ? models_1.MediaStatus.COMPLETED : item.status == \"NOT_YET_RELEASED\" ? models_1.MediaStatus.NOT_YET_AIRED : item.status == \"CANCELLED\" ? models_1.MediaStatus.CANCELLED : item.status == \"HIATUS\" ? models_1.MediaStatus.HIATUS : models_1.MediaStatus.UNKNOWN,\n                        image: (_c = (_b = item.coverImage.extraLarge) !== null && _b !== void 0 ? _b : item.coverImage.large) !== null && _c !== void 0 ? _c : item.coverImage.medium,\n                        cover: item.bannerImage,\n                        popularity: item.popularity,\n                        totalEpisodes: (_d = item.episodes) !== null && _d !== void 0 ? _d : ((_e = item.nextAiringEpisode) === null || _e === void 0 ? void 0 : _e.episode) - 1,\n                        currentEpisode: (_g = ((_f = item.nextAiringEpisode) === null || _f === void 0 ? void 0 : _f.episode) - 1) !== null && _g !== void 0 ? _g : item.episodes,\n                        countryOfOrigin: item.countryOfOrigin,\n                        description: item.description,\n                        genres: item.genres,\n                        rating: item.averageScore,\n                        color: (_h = item.coverImage) === null || _h === void 0 ? void 0 : _h.color,\n                        type: item.format,\n                        releaseDate: item.seasonYear\n                    };\n                })) !== null && _x !== void 0 ? _x : (_y = data.data) === null || _y === void 0 ? void 0 : _y.map((item)=>{\n                    var _b;\n                    return {\n                        id: item.anilistId.toString(),\n                        malId: item.mappings[\"mal\"],\n                        title: item.title,\n                        status: item.status == \"RELEASING\" ? models_1.MediaStatus.ONGOING : item.status == \"FINISHED\" ? models_1.MediaStatus.COMPLETED : item.status == \"NOT_YET_RELEASED\" ? models_1.MediaStatus.NOT_YET_AIRED : item.status == \"CANCELLED\" ? models_1.MediaStatus.CANCELLED : item.status == \"HIATUS\" ? models_1.MediaStatus.HIATUS : models_1.MediaStatus.UNKNOWN,\n                        image: (_b = item.coverImage) !== null && _b !== void 0 ? _b : item.bannerImage,\n                        cover: item.bannerImage,\n                        popularity: item.popularity,\n                        description: item.description,\n                        rating: item.averageScore,\n                        genres: item.genre,\n                        color: item.color,\n                        totalEpisodes: item.currentEpisode,\n                        type: item.format,\n                        releaseDate: item.year\n                    };\n                }));\n                return res;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param id Anime id\n         * @param dub to get dubbed episodes (optional) set to `true` to get dubbed episodes. **ONLY WORKS FOR GOGOANIME**\n         * @param fetchFiller to get filler boolean on the episode object (optional) set to `true` to get filler boolean on the episode object.\n         */ this.fetchAnimeInfo = async (id, dub = false, fetchFiller = false)=>{\n            var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64;\n            const animeInfo = {\n                id: id,\n                title: \"\"\n            };\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                query: (0, utils_1.anilistMediaDetailQuery)(id)\n            };\n            let fillerEpisodes;\n            try {\n                let { data, status } = await this.client.post(this.anilistGraphqlUrl, options, {\n                    validateStatus: ()=>true\n                });\n                if (status == 404) throw new Error(\"Media not found. Perhaps the id is invalid or the anime is not in anilist\");\n                if (status == 429) throw new Error(\"You have been ratelimited by anilist. Please try again later\");\n                // if (status >= 500) throw new Error('Anilist seems to be down. Please try again later');\n                if (status != 200 && status < 429) throw Error(\"Media not found. If the problem persists, please contact the developer\");\n                if (status >= 500) data = await new anify_1.default().fetchAnimeInfoByIdRaw(id);\n                animeInfo.malId = (_d = (_c = (_b = data.data) === null || _b === void 0 ? void 0 : _b.Media) === null || _c === void 0 ? void 0 : _c.idMal) !== null && _d !== void 0 ? _d : (_e = data === null || data === void 0 ? void 0 : data.mappings) === null || _e === void 0 ? void 0 : _e.mal;\n                animeInfo.title = data.data.Media ? {\n                    romaji: data.data.Media.title.romaji,\n                    english: data.data.Media.title.english,\n                    native: data.data.Media.title.native,\n                    userPreferred: data.data.Media.title.userPreferred\n                } : data.data.title;\n                animeInfo.synonyms = (_h = (_g = (_f = data.data) === null || _f === void 0 ? void 0 : _f.Media) === null || _g === void 0 ? void 0 : _g.synonyms) !== null && _h !== void 0 ? _h : data === null || data === void 0 ? void 0 : data.synonyms;\n                animeInfo.isLicensed = (_l = (_k = (_j = data.data) === null || _j === void 0 ? void 0 : _j.Media) === null || _k === void 0 ? void 0 : _k.isLicensed) !== null && _l !== void 0 ? _l : undefined;\n                animeInfo.isAdult = (_p = (_o = (_m = data.data) === null || _m === void 0 ? void 0 : _m.Media) === null || _o === void 0 ? void 0 : _o.isAdult) !== null && _p !== void 0 ? _p : undefined;\n                animeInfo.countryOfOrigin = (_s = (_r = (_q = data.data) === null || _q === void 0 ? void 0 : _q.Media) === null || _r === void 0 ? void 0 : _r.countryOfOrigin) !== null && _s !== void 0 ? _s : undefined;\n                if ((_v = (_u = (_t = data.data) === null || _t === void 0 ? void 0 : _t.Media) === null || _u === void 0 ? void 0 : _u.trailer) === null || _v === void 0 ? void 0 : _v.id) {\n                    animeInfo.trailer = {\n                        id: data.data.Media.trailer.id,\n                        site: (_w = data.data.Media.trailer) === null || _w === void 0 ? void 0 : _w.site,\n                        thumbnail: (_x = data.data.Media.trailer) === null || _x === void 0 ? void 0 : _x.thumbnail\n                    };\n                }\n                animeInfo.image = (_10 = (_9 = (_5 = (_1 = (_0 = (_z = (_y = data.data) === null || _y === void 0 ? void 0 : _y.Media) === null || _z === void 0 ? void 0 : _z.coverImage) === null || _0 === void 0 ? void 0 : _0.extraLarge) !== null && _1 !== void 0 ? _1 : (_4 = (_3 = (_2 = data.data) === null || _2 === void 0 ? void 0 : _2.Media) === null || _3 === void 0 ? void 0 : _3.coverImage) === null || _4 === void 0 ? void 0 : _4.large) !== null && _5 !== void 0 ? _5 : (_8 = (_7 = (_6 = data.data) === null || _6 === void 0 ? void 0 : _6.Media) === null || _7 === void 0 ? void 0 : _7.coverImage) === null || _8 === void 0 ? void 0 : _8.medium) !== null && _9 !== void 0 ? _9 : data.coverImage) !== null && _10 !== void 0 ? _10 : data.bannerImage;\n                animeInfo.popularity = (_13 = (_12 = (_11 = data.data) === null || _11 === void 0 ? void 0 : _11.Media) === null || _12 === void 0 ? void 0 : _12.popularity) !== null && _13 !== void 0 ? _13 : data === null || data === void 0 ? void 0 : data.popularity;\n                animeInfo.color = (_17 = (_16 = (_15 = (_14 = data.data) === null || _14 === void 0 ? void 0 : _14.Media) === null || _15 === void 0 ? void 0 : _15.coverImage) === null || _16 === void 0 ? void 0 : _16.color) !== null && _17 !== void 0 ? _17 : data === null || data === void 0 ? void 0 : data.color;\n                animeInfo.cover = (_21 = (_20 = (_19 = (_18 = data.data) === null || _18 === void 0 ? void 0 : _18.Media) === null || _19 === void 0 ? void 0 : _19.bannerImage) !== null && _20 !== void 0 ? _20 : data === null || data === void 0 ? void 0 : data.bannerImage) !== null && _21 !== void 0 ? _21 : animeInfo.image;\n                animeInfo.description = (_24 = (_23 = (_22 = data.data) === null || _22 === void 0 ? void 0 : _22.Media) === null || _23 === void 0 ? void 0 : _23.description) !== null && _24 !== void 0 ? _24 : data === null || data === void 0 ? void 0 : data.description;\n                switch((_27 = (_26 = (_25 = data.data) === null || _25 === void 0 ? void 0 : _25.Media) === null || _26 === void 0 ? void 0 : _26.status) !== null && _27 !== void 0 ? _27 : data === null || data === void 0 ? void 0 : data.status){\n                    case \"RELEASING\":\n                        animeInfo.status = models_1.MediaStatus.ONGOING;\n                        break;\n                    case \"FINISHED\":\n                        animeInfo.status = models_1.MediaStatus.COMPLETED;\n                        break;\n                    case \"NOT_YET_RELEASED\":\n                        animeInfo.status = models_1.MediaStatus.NOT_YET_AIRED;\n                        break;\n                    case \"CANCELLED\":\n                        animeInfo.status = models_1.MediaStatus.CANCELLED;\n                        break;\n                    case \"HIATUS\":\n                        animeInfo.status = models_1.MediaStatus.HIATUS;\n                    default:\n                        animeInfo.status = models_1.MediaStatus.UNKNOWN;\n                }\n                animeInfo.releaseDate = (_31 = (_30 = (_29 = (_28 = data.data) === null || _28 === void 0 ? void 0 : _28.Media) === null || _29 === void 0 ? void 0 : _29.startDate) === null || _30 === void 0 ? void 0 : _30.year) !== null && _31 !== void 0 ? _31 : data.year;\n                animeInfo.startDate = {\n                    year: data.data.Media.startDate.year,\n                    month: data.data.Media.startDate.month,\n                    day: data.data.Media.startDate.day\n                };\n                animeInfo.endDate = {\n                    year: data.data.Media.endDate.year,\n                    month: data.data.Media.endDate.month,\n                    day: data.data.Media.endDate.day\n                };\n                if ((_32 = data.data.Media.nextAiringEpisode) === null || _32 === void 0 ? void 0 : _32.airingAt) animeInfo.nextAiringEpisode = {\n                    airingTime: (_33 = data.data.Media.nextAiringEpisode) === null || _33 === void 0 ? void 0 : _33.airingAt,\n                    timeUntilAiring: (_34 = data.data.Media.nextAiringEpisode) === null || _34 === void 0 ? void 0 : _34.timeUntilAiring,\n                    episode: (_35 = data.data.Media.nextAiringEpisode) === null || _35 === void 0 ? void 0 : _35.episode\n                };\n                animeInfo.totalEpisodes = (_37 = (_36 = data.data.Media) === null || _36 === void 0 ? void 0 : _36.episodes) !== null && _37 !== void 0 ? _37 : ((_38 = data.data.Media.nextAiringEpisode) === null || _38 === void 0 ? void 0 : _38.episode) - 1;\n                animeInfo.currentEpisode = ((_40 = (_39 = data.data.Media) === null || _39 === void 0 ? void 0 : _39.nextAiringEpisode) === null || _40 === void 0 ? void 0 : _40.episode) ? ((_41 = data.data.Media.nextAiringEpisode) === null || _41 === void 0 ? void 0 : _41.episode) - 1 : (_42 = data.data.Media) === null || _42 === void 0 ? void 0 : _42.episodes;\n                animeInfo.rating = data.data.Media.averageScore;\n                animeInfo.duration = data.data.Media.duration;\n                animeInfo.genres = data.data.Media.genres;\n                animeInfo.season = data.data.Media.season;\n                animeInfo.studios = data.data.Media.studios.edges.map((item)=>item.node.name);\n                animeInfo.subOrDub = dub ? models_1.SubOrSub.DUB : models_1.SubOrSub.SUB;\n                animeInfo.type = data.data.Media.format;\n                animeInfo.recommendations = (_45 = (_44 = (_43 = data.data.Media) === null || _43 === void 0 ? void 0 : _43.recommendations) === null || _44 === void 0 ? void 0 : _44.edges) === null || _45 === void 0 ? void 0 : _45.map((item)=>{\n                    var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12;\n                    return {\n                        id: (_b = item.node.mediaRecommendation) === null || _b === void 0 ? void 0 : _b.id,\n                        malId: (_c = item.node.mediaRecommendation) === null || _c === void 0 ? void 0 : _c.idMal,\n                        title: {\n                            romaji: (_e = (_d = item.node.mediaRecommendation) === null || _d === void 0 ? void 0 : _d.title) === null || _e === void 0 ? void 0 : _e.romaji,\n                            english: (_g = (_f = item.node.mediaRecommendation) === null || _f === void 0 ? void 0 : _f.title) === null || _g === void 0 ? void 0 : _g.english,\n                            native: (_j = (_h = item.node.mediaRecommendation) === null || _h === void 0 ? void 0 : _h.title) === null || _j === void 0 ? void 0 : _j.native,\n                            userPreferred: (_l = (_k = item.node.mediaRecommendation) === null || _k === void 0 ? void 0 : _k.title) === null || _l === void 0 ? void 0 : _l.userPreferred\n                        },\n                        status: ((_m = item.node.mediaRecommendation) === null || _m === void 0 ? void 0 : _m.status) == \"RELEASING\" ? models_1.MediaStatus.ONGOING : ((_o = item.node.mediaRecommendation) === null || _o === void 0 ? void 0 : _o.status) == \"FINISHED\" ? models_1.MediaStatus.COMPLETED : ((_p = item.node.mediaRecommendation) === null || _p === void 0 ? void 0 : _p.status) == \"NOT_YET_RELEASED\" ? models_1.MediaStatus.NOT_YET_AIRED : ((_q = item.node.mediaRecommendation) === null || _q === void 0 ? void 0 : _q.status) == \"CANCELLED\" ? models_1.MediaStatus.CANCELLED : ((_r = item.node.mediaRecommendation) === null || _r === void 0 ? void 0 : _r.status) == \"HIATUS\" ? models_1.MediaStatus.HIATUS : models_1.MediaStatus.UNKNOWN,\n                        episodes: (_s = item.node.mediaRecommendation) === null || _s === void 0 ? void 0 : _s.episodes,\n                        image: (_y = (_v = (_u = (_t = item.node.mediaRecommendation) === null || _t === void 0 ? void 0 : _t.coverImage) === null || _u === void 0 ? void 0 : _u.extraLarge) !== null && _v !== void 0 ? _v : (_x = (_w = item.node.mediaRecommendation) === null || _w === void 0 ? void 0 : _w.coverImage) === null || _x === void 0 ? void 0 : _x.large) !== null && _y !== void 0 ? _y : (_0 = (_z = item.node.mediaRecommendation) === null || _z === void 0 ? void 0 : _z.coverImage) === null || _0 === void 0 ? void 0 : _0.medium,\n                        cover: (_8 = (_5 = (_2 = (_1 = item.node.mediaRecommendation) === null || _1 === void 0 ? void 0 : _1.bannerImage) !== null && _2 !== void 0 ? _2 : (_4 = (_3 = item.node.mediaRecommendation) === null || _3 === void 0 ? void 0 : _3.coverImage) === null || _4 === void 0 ? void 0 : _4.extraLarge) !== null && _5 !== void 0 ? _5 : (_7 = (_6 = item.node.mediaRecommendation) === null || _6 === void 0 ? void 0 : _6.coverImage) === null || _7 === void 0 ? void 0 : _7.large) !== null && _8 !== void 0 ? _8 : (_10 = (_9 = item.node.mediaRecommendation) === null || _9 === void 0 ? void 0 : _9.coverImage) === null || _10 === void 0 ? void 0 : _10.medium,\n                        rating: (_11 = item.node.mediaRecommendation) === null || _11 === void 0 ? void 0 : _11.meanScore,\n                        type: (_12 = item.node.mediaRecommendation) === null || _12 === void 0 ? void 0 : _12.format\n                    };\n                });\n                animeInfo.characters = (_49 = (_48 = (_47 = (_46 = data.data) === null || _46 === void 0 ? void 0 : _46.Media) === null || _47 === void 0 ? void 0 : _47.characters) === null || _48 === void 0 ? void 0 : _48.edges) === null || _49 === void 0 ? void 0 : _49.map((item)=>{\n                    var _b, _c;\n                    return {\n                        id: (_b = item.node) === null || _b === void 0 ? void 0 : _b.id,\n                        role: item.role,\n                        name: {\n                            first: item.node.name.first,\n                            last: item.node.name.last,\n                            full: item.node.name.full,\n                            native: item.node.name.native,\n                            userPreferred: item.node.name.userPreferred\n                        },\n                        image: (_c = item.node.image.large) !== null && _c !== void 0 ? _c : item.node.image.medium,\n                        voiceActors: item.voiceActors.map((voiceActor)=>{\n                            var _b;\n                            return {\n                                id: voiceActor.id,\n                                language: voiceActor.languageV2,\n                                name: {\n                                    first: voiceActor.name.first,\n                                    last: voiceActor.name.last,\n                                    full: voiceActor.name.full,\n                                    native: voiceActor.name.native,\n                                    userPreferred: voiceActor.name.userPreferred\n                                },\n                                image: (_b = voiceActor.image.large) !== null && _b !== void 0 ? _b : voiceActor.image.medium\n                            };\n                        })\n                    };\n                });\n                animeInfo.relations = (_53 = (_52 = (_51 = (_50 = data.data) === null || _50 === void 0 ? void 0 : _50.Media) === null || _51 === void 0 ? void 0 : _51.relations) === null || _52 === void 0 ? void 0 : _52.edges) === null || _53 === void 0 ? void 0 : _53.map((item)=>{\n                    var _b, _c, _d, _e, _f, _g;\n                    return {\n                        id: item.node.id,\n                        relationType: item.relationType,\n                        malId: item.node.idMal,\n                        title: {\n                            romaji: item.node.title.romaji,\n                            english: item.node.title.english,\n                            native: item.node.title.native,\n                            userPreferred: item.node.title.userPreferred\n                        },\n                        status: item.node.status == \"RELEASING\" ? models_1.MediaStatus.ONGOING : item.node.status == \"FINISHED\" ? models_1.MediaStatus.COMPLETED : item.node.status == \"NOT_YET_RELEASED\" ? models_1.MediaStatus.NOT_YET_AIRED : item.node.status == \"CANCELLED\" ? models_1.MediaStatus.CANCELLED : item.node.status == \"HIATUS\" ? models_1.MediaStatus.HIATUS : models_1.MediaStatus.UNKNOWN,\n                        episodes: item.node.episodes,\n                        image: (_c = (_b = item.node.coverImage.extraLarge) !== null && _b !== void 0 ? _b : item.node.coverImage.large) !== null && _c !== void 0 ? _c : item.node.coverImage.medium,\n                        color: (_d = item.node.coverImage) === null || _d === void 0 ? void 0 : _d.color,\n                        type: item.node.format,\n                        cover: (_g = (_f = (_e = item.node.bannerImage) !== null && _e !== void 0 ? _e : item.node.coverImage.extraLarge) !== null && _f !== void 0 ? _f : item.node.coverImage.large) !== null && _g !== void 0 ? _g : item.node.coverImage.medium,\n                        rating: item.node.meanScore\n                    };\n                });\n                if ((this.provider instanceof zoro_1.default || this.provider instanceof gogoanime_1.default) && !dub && (animeInfo.status === models_1.MediaStatus.ONGOING || (0, utils_1.range)({\n                    from: 1940,\n                    to: new Date().getFullYear() + 1\n                }).includes(parseInt(animeInfo.releaseDate)))) {\n                    try {\n                        const anifyInfo = await new anify_1.default(this.proxyConfig, this.adapter, this.provider.name.toLowerCase()).fetchAnimeInfo(id);\n                        animeInfo.mappings = anifyInfo.mappings;\n                        animeInfo.artwork = anifyInfo.artwork;\n                        animeInfo.episodes = (_54 = anifyInfo.episodes) === null || _54 === void 0 ? void 0 : _54.map((item)=>{\n                            var _b;\n                            return {\n                                id: item.id,\n                                title: item.title,\n                                description: item.description,\n                                number: item.number,\n                                image: item.image,\n                                airDate: (_b = item.airDate) !== null && _b !== void 0 ? _b : null\n                            };\n                        });\n                        if (!((_55 = animeInfo.episodes) === null || _55 === void 0 ? void 0 : _55.length)) {\n                            animeInfo.episodes = await this.fetchDefaultEpisodeList({\n                                idMal: animeInfo.malId,\n                                season: data.data.Media.season,\n                                startDate: {\n                                    year: parseInt(animeInfo.releaseDate)\n                                },\n                                title: {\n                                    english: (_56 = animeInfo.title) === null || _56 === void 0 ? void 0 : _56.english,\n                                    romaji: (_57 = animeInfo.title) === null || _57 === void 0 ? void 0 : _57.romaji\n                                }\n                            }, dub, id);\n                            animeInfo.episodes = (_58 = animeInfo.episodes) === null || _58 === void 0 ? void 0 : _58.map((episode)=>{\n                                if (!episode.image) episode.image = animeInfo.image;\n                                return episode;\n                            });\n                        }\n                    } catch (err) {\n                        animeInfo.episodes = await this.fetchDefaultEpisodeList({\n                            idMal: animeInfo.malId,\n                            season: data.data.Media.season,\n                            startDate: {\n                                year: parseInt(animeInfo.releaseDate)\n                            },\n                            title: {\n                                english: (_59 = animeInfo.title) === null || _59 === void 0 ? void 0 : _59.english,\n                                romaji: (_60 = animeInfo.title) === null || _60 === void 0 ? void 0 : _60.romaji\n                            }\n                        }, dub, id);\n                        animeInfo.episodes = (_61 = animeInfo.episodes) === null || _61 === void 0 ? void 0 : _61.map((episode)=>{\n                            if (!episode.image) episode.image = animeInfo.image;\n                            return episode;\n                        });\n                        return animeInfo;\n                    }\n                } else animeInfo.episodes = await this.fetchDefaultEpisodeList({\n                    idMal: animeInfo.malId,\n                    season: data.data.Media.season,\n                    startDate: {\n                        year: parseInt(animeInfo.releaseDate)\n                    },\n                    title: {\n                        english: (_62 = animeInfo.title) === null || _62 === void 0 ? void 0 : _62.english,\n                        romaji: (_63 = animeInfo.title) === null || _63 === void 0 ? void 0 : _63.romaji\n                    },\n                    externalLinks: data.data.Media.externalLinks.filter((link)=>link.type === \"STREAMING\")\n                }, dub, id);\n                if (fetchFiller) {\n                    const { data: fillerData } = await this.client.get(`https://raw.githubusercontent.com/saikou-app/mal-id-filler-list/main/fillers/${animeInfo.malId}.json`, {\n                        validateStatus: ()=>true\n                    });\n                    if (!fillerData.toString().startsWith(\"404\")) {\n                        fillerEpisodes = [];\n                        fillerEpisodes === null || fillerEpisodes === void 0 ? void 0 : fillerEpisodes.push(...fillerData.episodes);\n                    }\n                }\n                animeInfo.episodes = (_64 = animeInfo.episodes) === null || _64 === void 0 ? void 0 : _64.map((episode)=>{\n                    if (!episode.image) episode.image = animeInfo.image;\n                    if (fetchFiller && (fillerEpisodes === null || fillerEpisodes === void 0 ? void 0 : fillerEpisodes.length) > 0 && (fillerEpisodes === null || fillerEpisodes === void 0 ? void 0 : fillerEpisodes.length) >= animeInfo.episodes.length) {\n                        if (fillerEpisodes[episode.number - 1]) episode.isFiller = new Boolean(fillerEpisodes[episode.number - 1][\"filler-bool\"]).valueOf();\n                    }\n                    return episode;\n                });\n                return animeInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param episodeId Episode id\n         */ this.fetchEpisodeSources = async (episodeId, ...args)=>{\n            try {\n                if (this.provider instanceof anify_1.default) return new anify_1.default().fetchEpisodeSources(episodeId, args[0], args[1]);\n                return this.provider.fetchEpisodeSources(episodeId, ...args);\n            } catch (err) {\n                throw new Error(`Failed to fetch episode sources from ${this.provider.name}: ${err}`);\n            }\n        };\n        /**\n         *\n         * @param episodeId Episode id\n         */ this.fetchEpisodeServers = async (episodeId)=>{\n            try {\n                return this.provider.fetchEpisodeServers(episodeId);\n            } catch (err) {\n                throw new Error(`Failed to fetch episode servers from ${this.provider.name}: ${err}`);\n            }\n        };\n        this.findAnime = async (title, season, startDate, malId, dub, anilistId, externalLinks)=>{\n            var _b, _c, _d;\n            title.english = (_b = title.english) !== null && _b !== void 0 ? _b : title.romaji;\n            title.romaji = (_c = title.romaji) !== null && _c !== void 0 ? _c : title.english;\n            title.english = title.english.toLowerCase();\n            title.romaji = title.romaji.toLowerCase();\n            if (title.english === title.romaji) {\n                return (_d = await this.findAnimeSlug(title.english, season, startDate, malId, dub, anilistId, externalLinks)) !== null && _d !== void 0 ? _d : [];\n            }\n            const romajiPossibleEpisodes = await this.findAnimeSlug(title.romaji, season, startDate, malId, dub, anilistId, externalLinks);\n            if (romajiPossibleEpisodes) {\n                return romajiPossibleEpisodes;\n            }\n            const englishPossibleEpisodes = await this.findAnimeSlug(title.english, season, startDate, malId, dub, anilistId, externalLinks);\n            return englishPossibleEpisodes !== null && englishPossibleEpisodes !== void 0 ? englishPossibleEpisodes : [];\n        };\n        this.findAnimeSlug = async (title, season, startDate, malId, dub, anilistId, externalLinks)=>{\n            var _b, _c, _d;\n            if (this.provider instanceof anify_1.default) return (await this.provider.fetchAnimeInfo(anilistId)).episodes;\n            const slug = title.replace(/[^0-9a-zA-Z]+/g, \" \");\n            let possibleAnime;\n            if (malId && !(this.provider instanceof crunchyroll_1.default || this.provider instanceof bilibili_1.default)) {\n                const malAsyncReq = await this.client.get(`${this.malSyncUrl}/mal/anime/${malId}`, {\n                    validateStatus: ()=>true\n                });\n                if (malAsyncReq.status === 200) {\n                    const sitesT = malAsyncReq.data.Sites;\n                    let sites = Object.values(sitesT).map((v, i)=>{\n                        const obj = [\n                            ...Object.values(Object.values(sitesT)[i])\n                        ];\n                        const pages = obj.map((v)=>({\n                                page: v.page,\n                                url: v.url,\n                                title: v.title\n                            }));\n                        return pages;\n                    });\n                    sites = sites.flat();\n                    sites.sort((a, b)=>{\n                        const targetTitle = malAsyncReq.data.title.toLowerCase();\n                        const firstRating = (0, utils_2.compareTwoStrings)(targetTitle, a.title.toLowerCase());\n                        const secondRating = (0, utils_2.compareTwoStrings)(targetTitle, b.title.toLowerCase());\n                        // Sort in descending order\n                        return secondRating - firstRating;\n                    });\n                    const possibleSource = sites.find((s)=>{\n                        if (s.page.toLowerCase() === this.provider.name.toLowerCase()) if (this.provider instanceof gogoanime_1.default) return dub ? s.title.toLowerCase().includes(\"dub\") : !s.title.toLowerCase().includes(\"dub\");\n                        else return true;\n                        return false;\n                    });\n                    if (possibleSource) {\n                        try {\n                            possibleAnime = await this.provider.fetchAnimeInfo(possibleSource.url.split(\"/\").pop());\n                        } catch (err) {\n                            console.error(err);\n                            possibleAnime = await this.findAnimeRaw(slug);\n                        }\n                    } else possibleAnime = await this.findAnimeRaw(slug);\n                } else possibleAnime = await this.findAnimeRaw(slug);\n            } else possibleAnime = await this.findAnimeRaw(slug, externalLinks);\n            if (!possibleAnime) return undefined;\n            // To avoid a new request, lets match and see if the anime show found is in sub/dub\n            const expectedType = dub ? models_1.SubOrSub.DUB : models_1.SubOrSub.SUB;\n            // Have this as a fallback in the meantime for compatibility\n            if (possibleAnime.subOrDub) {\n                if (possibleAnime.subOrDub != models_1.SubOrSub.BOTH && possibleAnime.subOrDub != expectedType) {\n                    return undefined;\n                }\n            } else if (!possibleAnime.hasDub && dub || !possibleAnime.hasSub && !dub) {\n                return undefined;\n            }\n            if (this.provider instanceof zoro_1.default) {\n                // Set the correct episode sub/dub request type\n                possibleAnime.episodes.forEach((_, index)=>{\n                    if (possibleAnime.subOrDub === models_1.SubOrSub.BOTH) {\n                        possibleAnime.episodes[index].id = possibleAnime.episodes[index].id.replace(`$both`, dub ? \"$dub\" : \"$sub\");\n                    }\n                });\n            }\n            if (this.provider instanceof crunchyroll_1.default) {\n                const nestedEpisodes = Object.keys(possibleAnime.episodes).filter((key)=>key.toLowerCase().includes(dub ? \"dub\" : \"sub\")).sort((first, second)=>{\n                    var _b, _c, _d, _e;\n                    return ((_c = (_b = possibleAnime.episodes[first]) === null || _b === void 0 ? void 0 : _b[0].season_number) !== null && _c !== void 0 ? _c : 0) - ((_e = (_d = possibleAnime.episodes[second]) === null || _d === void 0 ? void 0 : _d[0].season_number) !== null && _e !== void 0 ? _e : 0);\n                }).map((key)=>{\n                    const audio = key.replace(/[0-9]/g, \"\").replace(/(^\\w{1})|(\\s+\\w{1})/g, (letter)=>letter.toUpperCase());\n                    possibleAnime.episodes[key].forEach((element)=>element.type = audio);\n                    return possibleAnime.episodes[key];\n                });\n                return nestedEpisodes.flat();\n            }\n            if (this.provider instanceof _9anime_1.default) {\n                possibleAnime.episodes.forEach((_, index)=>{\n                    if (expectedType == models_1.SubOrSub.DUB) {\n                        possibleAnime.episodes[index].id = possibleAnime.episodes[index].dubId;\n                    }\n                    if (possibleAnime.episodes[index].dubId) {\n                        delete possibleAnime.episodes[index].dubId;\n                    }\n                });\n                possibleAnime.episodes = possibleAnime.episodes.filter((el)=>el.id != undefined);\n            }\n            const possibleProviderEpisodes = possibleAnime.episodes;\n            if (typeof ((_b = possibleProviderEpisodes[0]) === null || _b === void 0 ? void 0 : _b.image) !== \"undefined\" && typeof ((_c = possibleProviderEpisodes[0]) === null || _c === void 0 ? void 0 : _c.title) !== \"undefined\" && typeof ((_d = possibleProviderEpisodes[0]) === null || _d === void 0 ? void 0 : _d.description) !== \"undefined\") return possibleProviderEpisodes;\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                query: (0, utils_1.kitsuSearchQuery)(slug)\n            };\n            const newEpisodeList = await this.findKitsuAnime(possibleProviderEpisodes, options, season, startDate);\n            return newEpisodeList;\n        };\n        this.findKitsuAnime = async (possibleProviderEpisodes, options, season, startDate)=>{\n            const kitsuEpisodes = await this.client.post(this.kitsuGraphqlUrl, options);\n            const episodesList = new Map();\n            if (kitsuEpisodes === null || kitsuEpisodes === void 0 ? void 0 : kitsuEpisodes.data.data) {\n                const { nodes } = kitsuEpisodes.data.data.searchAnimeByTitle;\n                if (nodes) {\n                    nodes.forEach((node)=>{\n                        var _b, _c;\n                        if (node.season === season && node.startDate.trim().split(\"-\")[0] === (startDate === null || startDate === void 0 ? void 0 : startDate.toString())) {\n                            const episodes = node.episodes.nodes;\n                            for (const episode of episodes){\n                                const i = episode === null || episode === void 0 ? void 0 : episode.number.toString().replace(/\"/g, \"\");\n                                let name = undefined;\n                                let description = undefined;\n                                let thumbnail = undefined;\n                                if ((_b = episode === null || episode === void 0 ? void 0 : episode.description) === null || _b === void 0 ? void 0 : _b.en) description = episode === null || episode === void 0 ? void 0 : episode.description.en.toString().replace(/\"/g, \"\").replace(\"\\\\n\", \"\\n\");\n                                if (episode === null || episode === void 0 ? void 0 : episode.thumbnail) thumbnail = episode === null || episode === void 0 ? void 0 : episode.thumbnail.original.url.toString().replace(/\"/g, \"\");\n                                if (episode) {\n                                    if ((_c = episode.titles) === null || _c === void 0 ? void 0 : _c.canonical) name = episode.titles.canonical.toString().replace(/\"/g, \"\");\n                                    episodesList.set(i, {\n                                        episodeNum: episode === null || episode === void 0 ? void 0 : episode.number.toString().replace(/\"/g, \"\"),\n                                        title: name,\n                                        description,\n                                        createdAt: episode === null || episode === void 0 ? void 0 : episode.createdAt,\n                                        thumbnail\n                                    });\n                                    continue;\n                                }\n                                episodesList.set(i, {\n                                    episodeNum: undefined,\n                                    title: undefined,\n                                    description: undefined,\n                                    createdAt: undefined,\n                                    thumbnail\n                                });\n                            }\n                        }\n                    });\n                }\n            }\n            const newEpisodeList = [];\n            if ((possibleProviderEpisodes === null || possibleProviderEpisodes === void 0 ? void 0 : possibleProviderEpisodes.length) !== 0) {\n                possibleProviderEpisodes === null || possibleProviderEpisodes === void 0 ? void 0 : possibleProviderEpisodes.forEach((ep, i)=>{\n                    var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n                    const j = (i + 1).toString();\n                    newEpisodeList.push({\n                        id: ep.id,\n                        title: (_d = (_b = ep.title) !== null && _b !== void 0 ? _b : (_c = episodesList.get(j)) === null || _c === void 0 ? void 0 : _c.title) !== null && _d !== void 0 ? _d : null,\n                        image: (_g = (_e = ep.image) !== null && _e !== void 0 ? _e : (_f = episodesList.get(j)) === null || _f === void 0 ? void 0 : _f.thumbnail) !== null && _g !== void 0 ? _g : null,\n                        number: ep.number,\n                        createdAt: (_k = (_h = ep.createdAt) !== null && _h !== void 0 ? _h : (_j = episodesList.get(j)) === null || _j === void 0 ? void 0 : _j.createdAt) !== null && _k !== void 0 ? _k : null,\n                        description: (_o = (_l = ep.description) !== null && _l !== void 0 ? _l : (_m = episodesList.get(j)) === null || _m === void 0 ? void 0 : _m.description) !== null && _o !== void 0 ? _o : null,\n                        url: (_p = ep.url) !== null && _p !== void 0 ? _p : null\n                    });\n                });\n            }\n            return newEpisodeList;\n        };\n        /**\n         * @param page page number to search for (optional)\n         * @param perPage number of results per page (optional)\n         */ this.fetchTrendingAnime = async (page = 1, perPage = 10)=>{\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                query: (0, utils_1.anilistTrendingQuery)(page, perPage)\n            };\n            try {\n                const { data } = await this.client.post(this.anilistGraphqlUrl, options);\n                const res = {\n                    currentPage: data.data.Page.pageInfo.currentPage,\n                    hasNextPage: data.data.Page.pageInfo.hasNextPage,\n                    results: data.data.Page.media.map((item)=>{\n                        var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n                        return {\n                            id: item.id.toString(),\n                            malId: item.idMal,\n                            title: {\n                                romaji: item.title.romaji,\n                                english: item.title.english,\n                                native: item.title.native,\n                                userPreferred: item.title.userPreferred\n                            } || item.title.romaji,\n                            image: (_c = (_b = item.coverImage.extraLarge) !== null && _b !== void 0 ? _b : item.coverImage.large) !== null && _c !== void 0 ? _c : item.coverImage.medium,\n                            trailer: {\n                                id: (_d = item.trailer) === null || _d === void 0 ? void 0 : _d.id,\n                                site: (_e = item.trailer) === null || _e === void 0 ? void 0 : _e.site,\n                                thumbnail: (_f = item.trailer) === null || _f === void 0 ? void 0 : _f.thumbnail\n                            },\n                            description: item.description,\n                            status: item.status == \"RELEASING\" ? models_1.MediaStatus.ONGOING : item.status == \"FINISHED\" ? models_1.MediaStatus.COMPLETED : item.status == \"NOT_YET_RELEASED\" ? models_1.MediaStatus.NOT_YET_AIRED : item.status == \"CANCELLED\" ? models_1.MediaStatus.CANCELLED : item.status == \"HIATUS\" ? models_1.MediaStatus.HIATUS : models_1.MediaStatus.UNKNOWN,\n                            cover: (_j = (_h = (_g = item.bannerImage) !== null && _g !== void 0 ? _g : item.coverImage.extraLarge) !== null && _h !== void 0 ? _h : item.coverImage.large) !== null && _j !== void 0 ? _j : item.coverImage.medium,\n                            rating: item.averageScore,\n                            releaseDate: item.seasonYear,\n                            color: (_k = item.coverImage) === null || _k === void 0 ? void 0 : _k.color,\n                            genres: item.genres,\n                            totalEpisodes: isNaN(item.episodes) ? 0 : (_o = (_l = item.episodes) !== null && _l !== void 0 ? _l : ((_m = item.nextAiringEpisode) === null || _m === void 0 ? void 0 : _m.episode) - 1) !== null && _o !== void 0 ? _o : 0,\n                            duration: item.duration,\n                            type: item.format\n                        };\n                    })\n                };\n                return res;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param page page number to search for (optional)\n         * @param perPage number of results per page (optional)\n         */ this.fetchPopularAnime = async (page = 1, perPage = 10)=>{\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                query: (0, utils_1.anilistPopularQuery)(page, perPage)\n            };\n            try {\n                const { data } = await this.client.post(this.anilistGraphqlUrl, options);\n                const res = {\n                    currentPage: data.data.Page.pageInfo.currentPage,\n                    hasNextPage: data.data.Page.pageInfo.hasNextPage,\n                    results: data.data.Page.media.map((item)=>{\n                        var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n                        return {\n                            id: item.id.toString(),\n                            malId: item.idMal,\n                            title: {\n                                romaji: item.title.romaji,\n                                english: item.title.english,\n                                native: item.title.native,\n                                userPreferred: item.title.userPreferred\n                            } || item.title.romaji,\n                            image: (_c = (_b = item.coverImage.extraLarge) !== null && _b !== void 0 ? _b : item.coverImage.large) !== null && _c !== void 0 ? _c : item.coverImage.medium,\n                            trailer: {\n                                id: (_d = item.trailer) === null || _d === void 0 ? void 0 : _d.id,\n                                site: (_e = item.trailer) === null || _e === void 0 ? void 0 : _e.site,\n                                thumbnail: (_f = item.trailer) === null || _f === void 0 ? void 0 : _f.thumbnail\n                            },\n                            description: item.description,\n                            status: item.status == \"RELEASING\" ? models_1.MediaStatus.ONGOING : item.status == \"FINISHED\" ? models_1.MediaStatus.COMPLETED : item.status == \"NOT_YET_RELEASED\" ? models_1.MediaStatus.NOT_YET_AIRED : item.status == \"CANCELLED\" ? models_1.MediaStatus.CANCELLED : item.status == \"HIATUS\" ? models_1.MediaStatus.HIATUS : models_1.MediaStatus.UNKNOWN,\n                            cover: (_j = (_h = (_g = item.bannerImage) !== null && _g !== void 0 ? _g : item.coverImage.extraLarge) !== null && _h !== void 0 ? _h : item.coverImage.large) !== null && _j !== void 0 ? _j : item.coverImage.medium,\n                            rating: item.averageScore,\n                            releaseDate: item.seasonYear,\n                            color: (_k = item.coverImage) === null || _k === void 0 ? void 0 : _k.color,\n                            genres: item.genres,\n                            totalEpisodes: isNaN(item.episodes) ? 0 : (_o = (_l = item.episodes) !== null && _l !== void 0 ? _l : ((_m = item.nextAiringEpisode) === null || _m === void 0 ? void 0 : _m.episode) - 1) !== null && _o !== void 0 ? _o : 0,\n                            duration: item.duration,\n                            type: item.format\n                        };\n                    })\n                };\n                return res;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param page page number (optional)\n         * @param perPage number of results per page (optional)\n         * @param weekStart Filter by the start of the week (optional) (default: todays date) (options: 2 = Monday, 3 = Tuesday, 4 = Wednesday, 5 = Thursday, 6 = Friday, 0 = Saturday, 1 = Sunday) you can use either the number or the string\n         * @param weekEnd Filter by the end of the week (optional) similar to weekStart\n         * @param notYetAired if true will return anime that have not yet aired (optional)\n         * @returns the next airing episodes\n         */ this.fetchAiringSchedule = async (page = 1, perPage = 20, weekStart = (new Date().getDay() + 1) % 7, weekEnd = (new Date().getDay() + 7) % 7, notYetAired = false)=>{\n            let day1, day2 = undefined;\n            if (typeof weekStart === \"string\" && typeof weekEnd === \"string\") [day1, day2] = (0, utils_1.getDays)((0, utils_1.capitalizeFirstLetter)(weekStart.toLowerCase()), (0, utils_1.capitalizeFirstLetter)(weekEnd.toLowerCase()));\n            else if (typeof weekStart === \"number\" && typeof weekEnd === \"number\") [day1, day2] = [\n                weekStart,\n                weekEnd\n            ];\n            else throw new Error(\"Invalid weekStart or weekEnd\");\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                query: (0, utils_1.anilistAiringScheduleQuery)(page, perPage, day1, day2, notYetAired)\n            };\n            try {\n                const { data } = await this.client.post(this.anilistGraphqlUrl, options);\n                const res = {\n                    currentPage: data.data.Page.pageInfo.currentPage,\n                    hasNextPage: data.data.Page.pageInfo.hasNextPage,\n                    results: data.data.Page.airingSchedules.map((item)=>{\n                        var _b, _c, _d, _e, _f, _g;\n                        return {\n                            id: item.media.id.toString(),\n                            malId: item.media.idMal,\n                            episode: item.episode,\n                            airingAt: item.airingAt,\n                            title: {\n                                romaji: item.media.title.romaji,\n                                english: item.media.title.english,\n                                native: item.media.title.native,\n                                userPreferred: item.media.title.userPreferred\n                            } || item.media.title.romaji,\n                            country: item.media.countryOfOrigin,\n                            image: (_c = (_b = item.media.coverImage.extraLarge) !== null && _b !== void 0 ? _b : item.media.coverImage.large) !== null && _c !== void 0 ? _c : item.media.coverImage.medium,\n                            description: item.media.description,\n                            cover: (_f = (_e = (_d = item.media.bannerImage) !== null && _d !== void 0 ? _d : item.media.coverImage.extraLarge) !== null && _e !== void 0 ? _e : item.media.coverImage.large) !== null && _f !== void 0 ? _f : item.media.coverImage.medium,\n                            genres: item.media.genres,\n                            color: (_g = item.media.coverImage) === null || _g === void 0 ? void 0 : _g.color,\n                            rating: item.media.averageScore,\n                            releaseDate: item.media.seasonYear,\n                            type: item.media.format\n                        };\n                    })\n                };\n                return res;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param genres An array of genres to filter by (optional) genres: [`Action`, `Adventure`, `Cars`, `Comedy`, `Drama`, `Fantasy`, `Horror`, `Mahou Shoujo`, `Mecha`, `Music`, `Mystery`, `Psychological`, `Romance`, `Sci-Fi`, `Slice of Life`, `Sports`, `Supernatural`, `Thriller`]\n         * @param page page number (optional)\n         * @param perPage number of results per page (optional)\n         */ this.fetchAnimeGenres = async (genres, page = 1, perPage = 20)=>{\n            if (genres.length === 0) throw new Error(\"No genres specified\");\n            for (const genre of genres)if (!Object.values(models_1.Genres).includes(genre)) throw new Error(\"Invalid genre\");\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                query: (0, utils_1.anilistGenresQuery)(genres, page, perPage)\n            };\n            try {\n                const { data } = await this.client.post(this.anilistGraphqlUrl, options);\n                const res = {\n                    currentPage: data.data.Page.pageInfo.currentPage,\n                    hasNextPage: data.data.Page.pageInfo.hasNextPage,\n                    results: data.data.Page.media.map((item)=>{\n                        var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n                        return {\n                            id: item.id.toString(),\n                            malId: item.idMal,\n                            title: {\n                                romaji: item.title.romaji,\n                                english: item.title.english,\n                                native: item.title.native,\n                                userPreferred: item.title.userPreferred\n                            } || item.title.romaji,\n                            image: (_c = (_b = item.coverImage.extraLarge) !== null && _b !== void 0 ? _b : item.coverImage.large) !== null && _c !== void 0 ? _c : item.coverImage.medium,\n                            trailer: {\n                                id: (_d = item.trailer) === null || _d === void 0 ? void 0 : _d.id,\n                                site: (_e = item.trailer) === null || _e === void 0 ? void 0 : _e.site,\n                                thumbnail: (_f = item.trailer) === null || _f === void 0 ? void 0 : _f.thumbnail\n                            },\n                            description: item.description,\n                            cover: (_j = (_h = (_g = item.bannerImage) !== null && _g !== void 0 ? _g : item.coverImage.extraLarge) !== null && _h !== void 0 ? _h : item.coverImage.large) !== null && _j !== void 0 ? _j : item.coverImage.medium,\n                            rating: item.averageScore,\n                            releaseDate: item.seasonYear,\n                            color: (_k = item.coverImage) === null || _k === void 0 ? void 0 : _k.color,\n                            genres: item.genres,\n                            totalEpisodes: isNaN(item.episodes) ? 0 : (_o = (_l = item.episodes) !== null && _l !== void 0 ? _l : ((_m = item.nextAiringEpisode) === null || _m === void 0 ? void 0 : _m.episode) - 1) !== null && _o !== void 0 ? _o : 0,\n                            duration: item.duration,\n                            type: item.format\n                        };\n                    })\n                };\n                return res;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.findAnimeRaw = async (slug, externalLinks)=>{\n            if (this.provider instanceof crunchyroll_1.default && externalLinks) {\n                const link = externalLinks.find((link)=>link.site.includes(\"Crunchyroll\"));\n                if (link) {\n                    const { request } = await this.client.get(link.url, {\n                        validateStatus: ()=>true\n                    });\n                    if (request.res.responseUrl.includes(\"series\") || request.res.responseUrl.includes(\"watch\")) {\n                        const mediaType = request.res.responseUrl.split(\"/\")[3];\n                        const id = request.res.responseUrl.split(\"/\")[4];\n                        return await this.provider.fetchAnimeInfo(id, mediaType);\n                    }\n                }\n            }\n            const findAnime = await this.provider.search(slug);\n            if (findAnime.results.length === 0) return undefined;\n            // Sort the retrieved info for more accurate results.\n            let topRating = 0;\n            findAnime.results.sort((a, b)=>{\n                var _b, _c, _d, _e;\n                const targetTitle = slug.toLowerCase();\n                let firstTitle;\n                let secondTitle;\n                if (typeof a.title == \"string\") firstTitle = a.title;\n                else firstTitle = (_c = (_b = a.title.english) !== null && _b !== void 0 ? _b : a.title.romaji) !== null && _c !== void 0 ? _c : \"\";\n                if (typeof b.title == \"string\") secondTitle = b.title;\n                else secondTitle = (_e = (_d = b.title.english) !== null && _d !== void 0 ? _d : b.title.romaji) !== null && _e !== void 0 ? _e : \"\";\n                const firstRating = (0, utils_2.compareTwoStrings)(targetTitle, firstTitle.toLowerCase());\n                const secondRating = (0, utils_2.compareTwoStrings)(targetTitle, secondTitle.toLowerCase());\n                if (firstRating > topRating) {\n                    topRating = firstRating;\n                }\n                if (secondRating > topRating) {\n                    topRating = secondRating;\n                }\n                // Sort in descending order\n                return secondRating - firstRating;\n            });\n            if (topRating >= 0.7) {\n                if (this.provider instanceof crunchyroll_1.default) {\n                    return await this.provider.fetchAnimeInfo(findAnime.results[0].id, findAnime.results[0].type);\n                } else {\n                    return await this.provider.fetchAnimeInfo(findAnime.results[0].id);\n                }\n            }\n            return undefined;\n        };\n        /**\n         * @returns a random anime\n         */ this.fetchRandomAnime = async ()=>{\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                query: (0, utils_1.anilistSiteStatisticsQuery)()\n            };\n            try {\n                // const {\n                //   data: { data },\n                // } = await this.client.post(this.anilistGraphqlUrl, options);\n                // const selectedAnime = Math.floor(\n                //   Math.random() * data.SiteStatistics.anime.nodes[data.SiteStatistics.anime.nodes.length - 1].count\n                // );\n                // const { results } = await this.advancedSearch(undefined, 'ANIME', Math.ceil(selectedAnime / 50), 50);\n                const { data: data } = await this.client.get(\"https://raw.githubusercontent.com/5H4D0WILA/IDFetch/main/ids.txt\");\n                const ids = data === null || data === void 0 ? void 0 : data.trim().split(\"\\n\");\n                const selectedAnime = Math.floor(Math.random() * ids.length);\n                return await this.fetchAnimeInfo(ids[selectedAnime]);\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         * @param provider The provider to get the episode Ids from (optional) default: `gogoanime` (options: `gogoanime`, `zoro`)\n         * @param page page number (optional)\n         * @param perPage number of results per page (optional)\n         */ this.fetchRecentEpisodes = async (provider = \"gogoanime\", page = 1, perPage = 25)=>{\n            try {\n                const { data } = await this.client.get(`${this.anifyUrl}/recent?page=${page}&perPage=${perPage}&type=anime`);\n                const results = data === null || data === void 0 ? void 0 : data.map((item)=>{\n                    var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n                    return {\n                        id: item.id.toString(),\n                        malId: (_b = item.mappings.find((item)=>item.providerType === \"META\" && item.providerId === \"mal\")) === null || _b === void 0 ? void 0 : _b.id,\n                        title: {\n                            romaji: (_c = item.title) === null || _c === void 0 ? void 0 : _c.romaji,\n                            english: (_d = item.title) === null || _d === void 0 ? void 0 : _d.english,\n                            native: (_e = item.title) === null || _e === void 0 ? void 0 : _e.native\n                        },\n                        image: (_f = item.coverImage) !== null && _f !== void 0 ? _f : item.bannerImage,\n                        rating: item.averageScore,\n                        color: (_g = item.anime) === null || _g === void 0 ? void 0 : _g.color,\n                        episodeId: `${provider === \"gogoanime\" ? (_j = (_h = item.episodes.data.find((source)=>source.providerId.toLowerCase() === \"gogoanime\")) === null || _h === void 0 ? void 0 : _h.episodes.pop()) === null || _j === void 0 ? void 0 : _j.id : (_l = (_k = item.episodes.data.find((source)=>source.providerId.toLowerCase() === \"zoro\")) === null || _k === void 0 ? void 0 : _k.episodes.pop()) === null || _l === void 0 ? void 0 : _l.id}`,\n                        episodeTitle: (_m = item.episodes.latest.latestTitle) !== null && _m !== void 0 ? _m : `Episode ${item.currentEpisode}`,\n                        episodeNumber: item.currentEpisode,\n                        genres: item.genre,\n                        type: item.format\n                    };\n                });\n                // results = results.filter((item) => item.episodeNumber !== 0 &&\n                //     item.episodeId.replace('-enime', '').length > 0 &&\n                //     item.episodeId.replace('-enime', '') !== 'undefined');\n                return {\n                    currentPage: page,\n                    // hasNextPage: meta.lastPage !== page,\n                    // totalPages: meta.lastPage,\n                    totalResults: results === null || results === void 0 ? void 0 : results.length,\n                    results: results\n                };\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchDefaultEpisodeList = async (Media, dub, id)=>{\n            var _b, _c;\n            let episodes = [];\n            episodes = await this.findAnime({\n                english: (_b = Media.title) === null || _b === void 0 ? void 0 : _b.english,\n                romaji: (_c = Media.title) === null || _c === void 0 ? void 0 : _c.romaji\n            }, Media.season, Media.startDate.year, Media.idMal, dub, id, Media.externalLinks);\n            return episodes;\n        };\n        /**\n         * @param id anilist id\n         * @param dub language of the dubbed version (optional) currently only works for gogoanime\n         * @param fetchFiller to get filler boolean on the episode object (optional) set to `true` to get filler boolean on the episode object.\n         * @returns episode list **(without anime info)**\n         */ this.fetchEpisodesListById = async (id, dub = false, fetchFiller = false)=>{\n            var _b, _c;\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                query: `query($id: Int = ${id}){ Media(id: $id){ idMal externalLinks { site url } title { romaji english } status season episodes startDate { year month day } endDate { year month day }  coverImage {extraLarge large medium} } }`\n            };\n            const { data: { data: { Media } } } = await this.client.post(this.anilistGraphqlUrl, options);\n            let possibleAnimeEpisodes = [];\n            let fillerEpisodes = [];\n            if ((this.provider instanceof zoro_1.default || this.provider instanceof gogoanime_1.default) && !dub && (Media.status === \"RELEASING\" || (0, utils_1.range)({\n                from: 2000,\n                to: new Date().getFullYear() + 1\n            }).includes(parseInt((_b = Media.startDate) === null || _b === void 0 ? void 0 : _b.year)))) {\n                try {\n                    possibleAnimeEpisodes = (_c = (await new anify_1.default().fetchAnimeInfoByAnilistId(id, this.provider.name.toLowerCase())).episodes) === null || _c === void 0 ? void 0 : _c.map((item)=>({\n                            id: item.slug,\n                            title: item.title,\n                            description: item.description,\n                            number: item.number,\n                            image: item.image\n                        }));\n                    if (!possibleAnimeEpisodes.length) {\n                        possibleAnimeEpisodes = await this.fetchDefaultEpisodeList(Media, dub, id);\n                        possibleAnimeEpisodes = possibleAnimeEpisodes === null || possibleAnimeEpisodes === void 0 ? void 0 : possibleAnimeEpisodes.map((episode)=>{\n                            var _b, _c;\n                            if (!episode.image) episode.image = (_c = (_b = Media.coverImage.extraLarge) !== null && _b !== void 0 ? _b : Media.coverImage.large) !== null && _c !== void 0 ? _c : Media.coverImage.medium;\n                            return episode;\n                        });\n                    }\n                } catch (err) {\n                    possibleAnimeEpisodes = await this.fetchDefaultEpisodeList(Media, dub, id);\n                    possibleAnimeEpisodes = possibleAnimeEpisodes === null || possibleAnimeEpisodes === void 0 ? void 0 : possibleAnimeEpisodes.map((episode)=>{\n                        var _b, _c;\n                        if (!episode.image) episode.image = (_c = (_b = Media.coverImage.extraLarge) !== null && _b !== void 0 ? _b : Media.coverImage.large) !== null && _c !== void 0 ? _c : Media.coverImage.medium;\n                        return episode;\n                    });\n                    return possibleAnimeEpisodes;\n                }\n            } else possibleAnimeEpisodes = await this.fetchDefaultEpisodeList(Media, dub, id);\n            if (fetchFiller) {\n                const { data: fillerData } = await this.client.get(`https://raw.githubusercontent.com/saikou-app/mal-id-filler-list/main/fillers/${Media.idMal}.json`, {\n                    validateStatus: ()=>true\n                });\n                if (!fillerData.toString().startsWith(\"404\")) {\n                    fillerEpisodes = [];\n                    fillerEpisodes === null || fillerEpisodes === void 0 ? void 0 : fillerEpisodes.push(...fillerData.episodes);\n                }\n            }\n            possibleAnimeEpisodes = possibleAnimeEpisodes === null || possibleAnimeEpisodes === void 0 ? void 0 : possibleAnimeEpisodes.map((episode)=>{\n                var _b, _c;\n                if (!episode.image) episode.image = (_c = (_b = Media.coverImage.extraLarge) !== null && _b !== void 0 ? _b : Media.coverImage.large) !== null && _c !== void 0 ? _c : Media.coverImage.medium;\n                if (fetchFiller && (fillerEpisodes === null || fillerEpisodes === void 0 ? void 0 : fillerEpisodes.length) > 0 && (fillerEpisodes === null || fillerEpisodes === void 0 ? void 0 : fillerEpisodes.length) >= Media.episodes) {\n                    if (fillerEpisodes[episode.number - 1]) episode.isFiller = new Boolean(fillerEpisodes[episode.number - 1][\"filler-bool\"]).valueOf();\n                }\n                return episode;\n            });\n            return possibleAnimeEpisodes;\n        };\n        /**\n         * @param id anilist id\n         * @returns anilist data for the anime **(without episodes)** (use `fetchEpisodesListById` to get the episodes) (use `fetchAnimeInfo` to get both)\n         */ this.fetchAnilistInfoById = async (id)=>{\n            var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1;\n            const animeInfo = {\n                id: id,\n                title: \"\"\n            };\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                query: (0, utils_1.anilistMediaDetailQuery)(id)\n            };\n            try {\n                const { data } = await this.client.post(this.anilistGraphqlUrl, options).catch(()=>{\n                    throw new Error(\"Media not found\");\n                });\n                animeInfo.malId = data.data.Media.idMal;\n                animeInfo.title = {\n                    romaji: data.data.Media.title.romaji,\n                    english: data.data.Media.title.english,\n                    native: data.data.Media.title.native,\n                    userPreferred: data.data.Media.title.userPreferred\n                };\n                if ((_b = data.data.Media.trailer) === null || _b === void 0 ? void 0 : _b.id) {\n                    animeInfo.trailer = {\n                        id: (_c = data.data.Media.trailer) === null || _c === void 0 ? void 0 : _c.id,\n                        site: (_d = data.data.Media.trailer) === null || _d === void 0 ? void 0 : _d.site,\n                        thumbnail: (_e = data.data.Media.trailer) === null || _e === void 0 ? void 0 : _e.thumbnail\n                    };\n                }\n                animeInfo.synonyms = data.data.Media.synonyms;\n                animeInfo.isLicensed = data.data.Media.isLicensed;\n                animeInfo.isAdult = data.data.Media.isAdult;\n                animeInfo.countryOfOrigin = data.data.Media.countryOfOrigin;\n                animeInfo.image = (_g = (_f = data.data.Media.coverImage.extraLarge) !== null && _f !== void 0 ? _f : data.data.Media.coverImage.large) !== null && _g !== void 0 ? _g : data.data.Media.coverImage.medium;\n                animeInfo.cover = (_h = data.data.Media.bannerImage) !== null && _h !== void 0 ? _h : animeInfo.image;\n                animeInfo.description = data.data.Media.description;\n                switch(data.data.Media.status){\n                    case \"RELEASING\":\n                        animeInfo.status = models_1.MediaStatus.ONGOING;\n                        break;\n                    case \"FINISHED\":\n                        animeInfo.status = models_1.MediaStatus.COMPLETED;\n                        break;\n                    case \"NOT_YET_RELEASED\":\n                        animeInfo.status = models_1.MediaStatus.NOT_YET_AIRED;\n                        break;\n                    case \"CANCELLED\":\n                        animeInfo.status = models_1.MediaStatus.CANCELLED;\n                        break;\n                    case \"HIATUS\":\n                        animeInfo.status = models_1.MediaStatus.HIATUS;\n                    default:\n                        animeInfo.status = models_1.MediaStatus.UNKNOWN;\n                }\n                animeInfo.releaseDate = data.data.Media.startDate.year;\n                if ((_j = data.data.Media.nextAiringEpisode) === null || _j === void 0 ? void 0 : _j.airingAt) animeInfo.nextAiringEpisode = {\n                    airingTime: (_k = data.data.Media.nextAiringEpisode) === null || _k === void 0 ? void 0 : _k.airingAt,\n                    timeUntilAiring: (_l = data.data.Media.nextAiringEpisode) === null || _l === void 0 ? void 0 : _l.timeUntilAiring,\n                    episode: (_m = data.data.Media.nextAiringEpisode) === null || _m === void 0 ? void 0 : _m.episode\n                };\n                animeInfo.totalEpisodes = (_p = (_o = data.data.Media) === null || _o === void 0 ? void 0 : _o.episodes) !== null && _p !== void 0 ? _p : ((_q = data.data.Media.nextAiringEpisode) === null || _q === void 0 ? void 0 : _q.episode) - 1;\n                animeInfo.currentEpisode = ((_s = (_r = data.data.Media) === null || _r === void 0 ? void 0 : _r.nextAiringEpisode) === null || _s === void 0 ? void 0 : _s.episode) ? ((_t = data.data.Media.nextAiringEpisode) === null || _t === void 0 ? void 0 : _t.episode) - 1 : ((_u = data.data.Media) === null || _u === void 0 ? void 0 : _u.episodes) || undefined;\n                animeInfo.rating = data.data.Media.averageScore;\n                animeInfo.duration = data.data.Media.duration;\n                animeInfo.genres = data.data.Media.genres;\n                animeInfo.studios = data.data.Media.studios.edges.map((item)=>item.node.name);\n                animeInfo.season = data.data.Media.season;\n                animeInfo.popularity = data.data.Media.popularity;\n                animeInfo.type = data.data.Media.format;\n                animeInfo.startDate = {\n                    year: (_v = data.data.Media.startDate) === null || _v === void 0 ? void 0 : _v.year,\n                    month: (_w = data.data.Media.startDate) === null || _w === void 0 ? void 0 : _w.month,\n                    day: (_x = data.data.Media.startDate) === null || _x === void 0 ? void 0 : _x.day\n                };\n                animeInfo.endDate = {\n                    year: (_y = data.data.Media.endDate) === null || _y === void 0 ? void 0 : _y.year,\n                    month: (_z = data.data.Media.endDate) === null || _z === void 0 ? void 0 : _z.month,\n                    day: (_0 = data.data.Media.endDate) === null || _0 === void 0 ? void 0 : _0.day\n                };\n                animeInfo.recommendations = data.data.Media.recommendations.edges.map((item)=>{\n                    var _b, _c, _d, _e, _f;\n                    return {\n                        id: item.node.mediaRecommendation.id,\n                        malId: item.node.mediaRecommendation.idMal,\n                        title: {\n                            romaji: item.node.mediaRecommendation.title.romaji,\n                            english: item.node.mediaRecommendation.title.english,\n                            native: item.node.mediaRecommendation.title.native,\n                            userPreferred: item.node.mediaRecommendation.title.userPreferred\n                        },\n                        status: item.node.mediaRecommendation.status == \"RELEASING\" ? models_1.MediaStatus.ONGOING : item.node.mediaRecommendation.status == \"FINISHED\" ? models_1.MediaStatus.COMPLETED : item.node.mediaRecommendation.status == \"NOT_YET_RELEASED\" ? models_1.MediaStatus.NOT_YET_AIRED : item.node.mediaRecommendation.status == \"CANCELLED\" ? models_1.MediaStatus.CANCELLED : item.node.mediaRecommendation.status == \"HIATUS\" ? models_1.MediaStatus.HIATUS : models_1.MediaStatus.UNKNOWN,\n                        episodes: item.node.mediaRecommendation.episodes,\n                        image: (_c = (_b = item.node.mediaRecommendation.coverImage.extraLarge) !== null && _b !== void 0 ? _b : item.node.mediaRecommendation.coverImage.large) !== null && _c !== void 0 ? _c : item.node.mediaRecommendation.coverImage.medium,\n                        cover: (_f = (_e = (_d = item.node.mediaRecommendation.bannerImage) !== null && _d !== void 0 ? _d : item.node.mediaRecommendation.coverImage.extraLarge) !== null && _e !== void 0 ? _e : item.node.mediaRecommendation.coverImage.large) !== null && _f !== void 0 ? _f : item.node.mediaRecommendation.coverImage.medium,\n                        rating: item.node.mediaRecommendation.meanScore,\n                        type: item.node.mediaRecommendation.format\n                    };\n                });\n                animeInfo.characters = data.data.Media.characters.edges.map((item)=>{\n                    var _b;\n                    return {\n                        id: item.node.id,\n                        role: item.role,\n                        name: {\n                            first: item.node.name.first,\n                            last: item.node.name.last,\n                            full: item.node.name.full,\n                            native: item.node.name.native,\n                            userPreferred: item.node.name.userPreferred\n                        },\n                        image: (_b = item.node.image.large) !== null && _b !== void 0 ? _b : item.node.image.medium,\n                        voiceActors: item.voiceActors.map((voiceActor)=>{\n                            var _b;\n                            return {\n                                id: voiceActor.id,\n                                language: voiceActor.languageV2,\n                                name: {\n                                    first: voiceActor.name.first,\n                                    last: voiceActor.name.last,\n                                    full: voiceActor.name.full,\n                                    native: voiceActor.name.native,\n                                    userPreferred: voiceActor.name.userPreferred\n                                },\n                                image: (_b = voiceActor.image.large) !== null && _b !== void 0 ? _b : voiceActor.image.medium\n                            };\n                        })\n                    };\n                });\n                animeInfo.color = (_1 = data.data.Media.coverImage) === null || _1 === void 0 ? void 0 : _1.color;\n                animeInfo.relations = data.data.Media.relations.edges.map((item)=>{\n                    var _b, _c, _d, _e, _f;\n                    return {\n                        id: item.node.id,\n                        malId: item.node.idMal,\n                        relationType: item.relationType,\n                        title: {\n                            romaji: item.node.title.romaji,\n                            english: item.node.title.english,\n                            native: item.node.title.native,\n                            userPreferred: item.node.title.userPreferred\n                        },\n                        status: item.node.status == \"RELEASING\" ? models_1.MediaStatus.ONGOING : item.node.status == \"FINISHED\" ? models_1.MediaStatus.COMPLETED : item.node.status == \"NOT_YET_RELEASED\" ? models_1.MediaStatus.NOT_YET_AIRED : item.node.status == \"CANCELLED\" ? models_1.MediaStatus.CANCELLED : item.node.status == \"HIATUS\" ? models_1.MediaStatus.HIATUS : models_1.MediaStatus.UNKNOWN,\n                        episodes: item.node.episodes,\n                        image: (_c = (_b = item.node.coverImage.extraLarge) !== null && _b !== void 0 ? _b : item.node.coverImage.large) !== null && _c !== void 0 ? _c : item.node.coverImage.medium,\n                        cover: (_f = (_e = (_d = item.node.bannerImage) !== null && _d !== void 0 ? _d : item.node.coverImage.extraLarge) !== null && _e !== void 0 ? _e : item.node.coverImage.large) !== null && _f !== void 0 ? _f : item.node.coverImage.medium,\n                        rating: item.node.meanScore,\n                        type: item.node.format\n                    };\n                });\n                return animeInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         * TODO: finish this (got lazy)\n         * @param id staff id from anilist\n         *\n         */ this.fetchStaffById = async (id)=>{\n            throw new Error(\"Not implemented yet\");\n        };\n        /**\n         *\n         * @param id character id from anilist\n         */ this.fetchCharacterInfoById = async (id)=>{\n            var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9;\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                query: (0, utils_1.anilistCharacterQuery)(),\n                variables: {\n                    id: id\n                }\n            };\n            try {\n                const { data: { data: { Character } } } = await this.client.post(this.anilistGraphqlUrl, options);\n                const height = (_b = Character.description.match(/__Height:__(.*)/)) === null || _b === void 0 ? void 0 : _b[1].trim();\n                const weight = (_c = Character.description.match(/__Weight:__(.*)/)) === null || _c === void 0 ? void 0 : _c[1].trim();\n                const hairColor = (_d = Character.description.match(/__Hair Color:__(.*)/)) === null || _d === void 0 ? void 0 : _d[1].trim();\n                const eyeColor = (_e = Character.description.match(/__Eye Color:__(.*)/)) === null || _e === void 0 ? void 0 : _e[1].trim();\n                const relatives = (_f = Character.description.match(/__Relatives:__(.*)/)) === null || _f === void 0 ? void 0 : _f[1].trim().split(/(, \\[)/g).filter((g)=>!g.includes(\", [\")).map((r)=>{\n                    var _b, _c, _d;\n                    return {\n                        id: (_b = r.match(/\\/(\\d+)/)) === null || _b === void 0 ? void 0 : _b[1],\n                        name: (_c = r.match(/([^)]+)\\]/)) === null || _c === void 0 ? void 0 : _c[1].replace(/\\[/g, \"\"),\n                        relationship: (_d = r.match(/\\(([^)]+)\\).*?(\\(([^)]+)\\))/)) === null || _d === void 0 ? void 0 : _d[3]\n                    };\n                });\n                const race = (_g = Character.description.match(/__Race:__(.*)/)) === null || _g === void 0 ? void 0 : _g[1].split(\", \").map((r)=>r.trim());\n                const rank = (_h = Character.description.match(/__Rank:__(.*)/)) === null || _h === void 0 ? void 0 : _h[1];\n                const occupation = (_j = Character.description.match(/__Occupation:__(.*)/)) === null || _j === void 0 ? void 0 : _j[1];\n                const previousPosition = (_l = (_k = Character.description.match(/__Previous Position:__(.*)/)) === null || _k === void 0 ? void 0 : _k[1]) === null || _l === void 0 ? void 0 : _l.trim();\n                const partner = (_m = Character.description.match(/__Partner:__(.*)/)) === null || _m === void 0 ? void 0 : _m[1].split(/(, \\[)/g).filter((g)=>!g.includes(\", [\")).map((r)=>{\n                    var _b, _c;\n                    return {\n                        id: (_b = r.match(/\\/(\\d+)/)) === null || _b === void 0 ? void 0 : _b[1],\n                        name: (_c = r.match(/([^)]+)\\]/)) === null || _c === void 0 ? void 0 : _c[1].replace(/\\[/g, \"\")\n                    };\n                });\n                const dislikes = (_o = Character.description.match(/__Dislikes:__(.*)/)) === null || _o === void 0 ? void 0 : _o[1];\n                const sign = (_p = Character.description.match(/__Sign:__(.*)/)) === null || _p === void 0 ? void 0 : _p[1];\n                const zodicSign = (_r = (_q = Character.description.match(/__Zodiac sign:__(.*)/)) === null || _q === void 0 ? void 0 : _q[1]) === null || _r === void 0 ? void 0 : _r.trim();\n                const zodicAnimal = (_t = (_s = Character.description.match(/__Zodiac Animal:__(.*)/)) === null || _s === void 0 ? void 0 : _s[1]) === null || _t === void 0 ? void 0 : _t.trim();\n                const themeSong = (_v = (_u = Character.description.match(/__Theme Song:__(.*)/)) === null || _u === void 0 ? void 0 : _u[1]) === null || _v === void 0 ? void 0 : _v.trim();\n                Character.description = Character.description.replace(/__Theme Song:__(.*)\\n|__Race:__(.*)\\n|__Height:__(.*)\\n|__Relatives:__(.*)\\n|__Rank:__(.*)\\n|__Zodiac sign:__(.*)\\n|__Zodiac Animal:__(.*)\\n|__Weight:__(.*)\\n|__Eye Color:__(.*)\\n|__Hair Color:__(.*)\\n|__Dislikes:__(.*)\\n|__Sign:__(.*)\\n|__Partner:__(.*)\\n|__Previous Position:__(.*)\\n|__Occupation:__(.*)\\n/gm, \"\");\n                const characterInfo = {\n                    id: Character.id,\n                    name: {\n                        first: (_w = Character.name) === null || _w === void 0 ? void 0 : _w.first,\n                        last: (_x = Character.name) === null || _x === void 0 ? void 0 : _x.last,\n                        full: (_y = Character.name) === null || _y === void 0 ? void 0 : _y.full,\n                        native: (_z = Character.name) === null || _z === void 0 ? void 0 : _z.native,\n                        userPreferred: (_0 = Character.name) === null || _0 === void 0 ? void 0 : _0.userPreferred,\n                        alternative: (_1 = Character.name) === null || _1 === void 0 ? void 0 : _1.alternative,\n                        alternativeSpoiler: (_2 = Character.name) === null || _2 === void 0 ? void 0 : _2.alternativeSpoiler\n                    },\n                    image: (_4 = (_3 = Character.image) === null || _3 === void 0 ? void 0 : _3.large) !== null && _4 !== void 0 ? _4 : (_5 = Character.image) === null || _5 === void 0 ? void 0 : _5.medium,\n                    description: Character.description,\n                    gender: Character.gender,\n                    dateOfBirth: {\n                        year: (_6 = Character.dateOfBirth) === null || _6 === void 0 ? void 0 : _6.year,\n                        month: (_7 = Character.dateOfBirth) === null || _7 === void 0 ? void 0 : _7.month,\n                        day: (_8 = Character.dateOfBirth) === null || _8 === void 0 ? void 0 : _8.day\n                    },\n                    bloodType: Character.bloodType,\n                    age: Character.age,\n                    hairColor: hairColor,\n                    eyeColor: eyeColor,\n                    height: height,\n                    weight: weight,\n                    occupation: occupation,\n                    partner: partner,\n                    relatives: relatives,\n                    race: race,\n                    rank: rank,\n                    previousPosition: previousPosition,\n                    dislikes: dislikes,\n                    sign: sign,\n                    zodicSign: zodicSign,\n                    zodicAnimal: zodicAnimal,\n                    themeSong: themeSong,\n                    relations: (_9 = Character.media.edges) === null || _9 === void 0 ? void 0 : _9.map((v)=>{\n                        var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n                        return {\n                            id: v.node.id,\n                            malId: v.node.idMal,\n                            role: v.characterRole,\n                            title: {\n                                romaji: (_b = v.node.title) === null || _b === void 0 ? void 0 : _b.romaji,\n                                english: (_c = v.node.title) === null || _c === void 0 ? void 0 : _c.english,\n                                native: (_d = v.node.title) === null || _d === void 0 ? void 0 : _d.native,\n                                userPreferred: (_e = v.node.title) === null || _e === void 0 ? void 0 : _e.userPreferred\n                            },\n                            status: v.node.status == \"RELEASING\" ? models_1.MediaStatus.ONGOING : v.node.status == \"FINISHED\" ? models_1.MediaStatus.COMPLETED : v.node.status == \"NOT_YET_RELEASED\" ? models_1.MediaStatus.NOT_YET_AIRED : v.node.status == \"CANCELLED\" ? models_1.MediaStatus.CANCELLED : v.node.status == \"HIATUS\" ? models_1.MediaStatus.HIATUS : models_1.MediaStatus.UNKNOWN,\n                            episodes: v.node.episodes,\n                            image: (_j = (_g = (_f = v.node.coverImage) === null || _f === void 0 ? void 0 : _f.extraLarge) !== null && _g !== void 0 ? _g : (_h = v.node.coverImage) === null || _h === void 0 ? void 0 : _h.large) !== null && _j !== void 0 ? _j : (_k = v.node.coverImage) === null || _k === void 0 ? void 0 : _k.medium,\n                            rating: v.node.averageScore,\n                            releaseDate: (_l = v.node.startDate) === null || _l === void 0 ? void 0 : _l.year,\n                            type: v.node.format,\n                            color: (_m = v.node.coverImage) === null || _m === void 0 ? void 0 : _m.color\n                        };\n                    })\n                };\n                return characterInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.findMangaSlug = async (provider, title, malId)=>{\n            const slug = title.replace(/[^0-9a-zA-Z]+/g, \" \");\n            let possibleManga;\n            if (malId) {\n                const malAsyncReq = await this.client.get(`${this.malSyncUrl}/mal/manga/${malId}`, {\n                    validateStatus: ()=>true\n                });\n                if (malAsyncReq.status === 200) {\n                    const sitesT = malAsyncReq.data.Sites;\n                    let sites = Object.values(sitesT).map((v, i)=>{\n                        const obj = [\n                            ...Object.values(Object.values(sitesT)[i])\n                        ];\n                        const pages = obj.map((v)=>({\n                                page: v.page,\n                                url: v.url,\n                                title: v.title\n                            }));\n                        return pages;\n                    });\n                    sites = sites.flat();\n                    const possibleSource = sites.find((s)=>s.page.toLowerCase() === provider.name.toLowerCase());\n                    if (possibleSource) possibleManga = await provider.fetchMangaInfo(possibleSource.url.split(\"/\").pop());\n                    else possibleManga = await this.findMangaRaw(provider, slug, title);\n                } else possibleManga = await this.findMangaRaw(provider, slug, title);\n            } else possibleManga = await this.findMangaRaw(provider, slug, title);\n            const possibleProviderChapters = possibleManga.chapters;\n            return possibleProviderChapters;\n        };\n        this.findMangaRaw = async (provider, slug, title)=>{\n            const findAnime = await provider.search(slug);\n            if (findAnime.results.length === 0) return [];\n            // TODO: use much better way than this\n            const possibleManga = findAnime.results.find((manga)=>title.toLowerCase() == (typeof manga.title === \"string\" ? manga.title.toLowerCase() : \"\"));\n            if (!possibleManga) return await provider.fetchMangaInfo(findAnime.results[0].id);\n            return await provider.fetchMangaInfo(possibleManga.id);\n        };\n        this.findManga = async (provider, title, malId)=>{\n            var _b, _c;\n            title.english = (_b = title.english) !== null && _b !== void 0 ? _b : title.romaji;\n            title.romaji = (_c = title.romaji) !== null && _c !== void 0 ? _c : title.english;\n            title.english = title.english.toLowerCase();\n            title.romaji = title.romaji.toLowerCase();\n            if (title.english === title.romaji) return await this.findMangaSlug(provider, title.english, malId);\n            const romajiPossibleEpisodes = this.findMangaSlug(provider, title.romaji, malId);\n            if (romajiPossibleEpisodes) {\n                return romajiPossibleEpisodes;\n            }\n            const englishPossibleEpisodes = this.findMangaSlug(provider, title.english, malId);\n            return englishPossibleEpisodes;\n        };\n        this.provider = provider || new gogoanime_1.default(proxyConfig);\n    }\n}\n_a = Anilist;\n/**\n * Anilist Anime class\n */ Anilist.Anime = _a;\n/**\n * Anilist Manga Class\n */ Anilist.Manga = class Manga {\n    /**\n     * Maps anilist manga to any manga provider (mangadex, mangasee, etc)\n     * @param provider MangaParser\n     */ constructor(provider){\n        /**\n         *\n         * @param query query to search for\n         * @param page (optional) page number (default: `1`)\n         * @param perPage (optional) number of results per page (default: `20`)\n         */ this.search = async (query, page = 1, perPage = 20)=>{\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                query: (0, utils_1.anilistSearchQuery)(query, page, perPage, \"MANGA\")\n            };\n            try {\n                const { data } = await axios_1.default.post(new _a().anilistGraphqlUrl, options);\n                const res = {\n                    currentPage: data.data.Page.pageInfo.currentPage,\n                    hasNextPage: data.data.Page.pageInfo.hasNextPage,\n                    results: data.data.Page.media.map((item)=>{\n                        var _b, _c, _d, _e, _f, _g;\n                        return {\n                            id: item.id.toString(),\n                            malId: item.idMal,\n                            title: {\n                                romaji: item.title.romaji,\n                                english: item.title.english,\n                                native: item.title.native,\n                                userPreferred: item.title.userPreferred\n                            } || item.title.romaji,\n                            status: item.status == \"RELEASING\" ? models_1.MediaStatus.ONGOING : item.status == \"FINISHED\" ? models_1.MediaStatus.COMPLETED : item.status == \"NOT_YET_RELEASED\" ? models_1.MediaStatus.NOT_YET_AIRED : item.status == \"CANCELLED\" ? models_1.MediaStatus.CANCELLED : item.status == \"HIATUS\" ? models_1.MediaStatus.HIATUS : models_1.MediaStatus.UNKNOWN,\n                            image: (_e = (_c = (_b = item.coverImage) === null || _b === void 0 ? void 0 : _b.extraLarge) !== null && _c !== void 0 ? _c : (_d = item.coverImage) === null || _d === void 0 ? void 0 : _d.large) !== null && _e !== void 0 ? _e : (_f = item.coverImage) === null || _f === void 0 ? void 0 : _f.medium,\n                            cover: item.bannerImage,\n                            popularity: item.popularity,\n                            description: item.description,\n                            rating: item.averageScore,\n                            genres: item.genres,\n                            color: (_g = item.coverImage) === null || _g === void 0 ? void 0 : _g.color,\n                            totalChapters: item.chapters,\n                            volumes: item.volumes,\n                            type: item.format,\n                            releaseDate: item.seasonYear\n                        };\n                    })\n                };\n                return res;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param chapterId chapter id\n         * @param args args to pass to the provider (if any)\n         * @returns\n         */ this.fetchChapterPages = (chapterId, ...args)=>{\n            return this.provider.fetchChapterPages(chapterId, ...args);\n        };\n        this.fetchMangaInfo = async (id, ...args)=>{\n            var _b, _c, _d, _e, _f, _g, _h;\n            const mangaInfo = {\n                id: id,\n                title: \"\"\n            };\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                },\n                query: (0, utils_1.anilistMediaDetailQuery)(id)\n            };\n            try {\n                const { data } = await axios_1.default.post(new _a().anilistGraphqlUrl, options).catch((err)=>{\n                    throw new Error(\"Media not found\");\n                });\n                mangaInfo.malId = data.data.Media.idMal;\n                mangaInfo.title = {\n                    romaji: data.data.Media.title.romaji,\n                    english: data.data.Media.title.english,\n                    native: data.data.Media.title.native,\n                    userPreferred: data.data.Media.title.userPreferred\n                };\n                if ((_b = data.data.Media.trailer) === null || _b === void 0 ? void 0 : _b.id) {\n                    mangaInfo.trailer = {\n                        id: data.data.Media.trailer.id,\n                        site: (_c = data.data.Media.trailer) === null || _c === void 0 ? void 0 : _c.site,\n                        thumbnail: (_d = data.data.Media.trailer) === null || _d === void 0 ? void 0 : _d.thumbnail\n                    };\n                }\n                mangaInfo.image = (_f = (_e = data.data.Media.coverImage.extraLarge) !== null && _e !== void 0 ? _e : data.data.Media.coverImage.large) !== null && _f !== void 0 ? _f : data.data.Media.coverImage.medium;\n                mangaInfo.popularity = data.data.Media.popularity;\n                mangaInfo.color = (_g = data.data.Media.coverImage) === null || _g === void 0 ? void 0 : _g.color;\n                mangaInfo.cover = (_h = data.data.Media.bannerImage) !== null && _h !== void 0 ? _h : mangaInfo.image;\n                mangaInfo.description = data.data.Media.description;\n                switch(data.data.Media.status){\n                    case \"RELEASING\":\n                        mangaInfo.status = models_1.MediaStatus.ONGOING;\n                        break;\n                    case \"FINISHED\":\n                        mangaInfo.status = models_1.MediaStatus.COMPLETED;\n                        break;\n                    case \"NOT_YET_RELEASED\":\n                        mangaInfo.status = models_1.MediaStatus.NOT_YET_AIRED;\n                        break;\n                    case \"CANCELLED\":\n                        mangaInfo.status = models_1.MediaStatus.CANCELLED;\n                        break;\n                    case \"HIATUS\":\n                        mangaInfo.status = models_1.MediaStatus.HIATUS;\n                    default:\n                        mangaInfo.status = models_1.MediaStatus.UNKNOWN;\n                }\n                mangaInfo.releaseDate = data.data.Media.startDate.year;\n                mangaInfo.startDate = {\n                    year: data.data.Media.startDate.year,\n                    month: data.data.Media.startDate.month,\n                    day: data.data.Media.startDate.day\n                };\n                mangaInfo.endDate = {\n                    year: data.data.Media.endDate.year,\n                    month: data.data.Media.endDate.month,\n                    day: data.data.Media.endDate.day\n                };\n                mangaInfo.rating = data.data.Media.averageScore;\n                mangaInfo.genres = data.data.Media.genres;\n                mangaInfo.season = data.data.Media.season;\n                mangaInfo.studios = data.data.Media.studios.edges.map((item)=>item.node.name);\n                mangaInfo.type = data.data.Media.format;\n                mangaInfo.recommendations = data.data.Media.recommendations.edges.map((item)=>{\n                    var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12;\n                    return {\n                        id: (_b = item.node.mediaRecommendation) === null || _b === void 0 ? void 0 : _b.id,\n                        malId: (_c = item.node.mediaRecommendation) === null || _c === void 0 ? void 0 : _c.idMal,\n                        title: {\n                            romaji: (_e = (_d = item.node.mediaRecommendation) === null || _d === void 0 ? void 0 : _d.title) === null || _e === void 0 ? void 0 : _e.romaji,\n                            english: (_g = (_f = item.node.mediaRecommendation) === null || _f === void 0 ? void 0 : _f.title) === null || _g === void 0 ? void 0 : _g.english,\n                            native: (_j = (_h = item.node.mediaRecommendation) === null || _h === void 0 ? void 0 : _h.title) === null || _j === void 0 ? void 0 : _j.native,\n                            userPreferred: (_l = (_k = item.node.mediaRecommendation) === null || _k === void 0 ? void 0 : _k.title) === null || _l === void 0 ? void 0 : _l.userPreferred\n                        },\n                        status: ((_m = item.node.mediaRecommendation) === null || _m === void 0 ? void 0 : _m.status) == \"RELEASING\" ? models_1.MediaStatus.ONGOING : ((_o = item.node.mediaRecommendation) === null || _o === void 0 ? void 0 : _o.status) == \"FINISHED\" ? models_1.MediaStatus.COMPLETED : ((_p = item.node.mediaRecommendation) === null || _p === void 0 ? void 0 : _p.status) == \"NOT_YET_RELEASED\" ? models_1.MediaStatus.NOT_YET_AIRED : ((_q = item.node.mediaRecommendation) === null || _q === void 0 ? void 0 : _q.status) == \"CANCELLED\" ? models_1.MediaStatus.CANCELLED : ((_r = item.node.mediaRecommendation) === null || _r === void 0 ? void 0 : _r.status) == \"HIATUS\" ? models_1.MediaStatus.HIATUS : models_1.MediaStatus.UNKNOWN,\n                        chapters: (_s = item.node.mediaRecommendation) === null || _s === void 0 ? void 0 : _s.chapters,\n                        image: (_y = (_v = (_u = (_t = item.node.mediaRecommendation) === null || _t === void 0 ? void 0 : _t.coverImage) === null || _u === void 0 ? void 0 : _u.extraLarge) !== null && _v !== void 0 ? _v : (_x = (_w = item.node.mediaRecommendation) === null || _w === void 0 ? void 0 : _w.coverImage) === null || _x === void 0 ? void 0 : _x.large) !== null && _y !== void 0 ? _y : (_0 = (_z = item.node.mediaRecommendation) === null || _z === void 0 ? void 0 : _z.coverImage) === null || _0 === void 0 ? void 0 : _0.medium,\n                        cover: (_8 = (_5 = (_2 = (_1 = item.node.mediaRecommendation) === null || _1 === void 0 ? void 0 : _1.bannerImage) !== null && _2 !== void 0 ? _2 : (_4 = (_3 = item.node.mediaRecommendation) === null || _3 === void 0 ? void 0 : _3.coverImage) === null || _4 === void 0 ? void 0 : _4.extraLarge) !== null && _5 !== void 0 ? _5 : (_7 = (_6 = item.node.mediaRecommendation) === null || _6 === void 0 ? void 0 : _6.coverImage) === null || _7 === void 0 ? void 0 : _7.large) !== null && _8 !== void 0 ? _8 : (_10 = (_9 = item.node.mediaRecommendation) === null || _9 === void 0 ? void 0 : _9.coverImage) === null || _10 === void 0 ? void 0 : _10.medium,\n                        rating: (_11 = item.node.mediaRecommendation) === null || _11 === void 0 ? void 0 : _11.meanScore,\n                        type: (_12 = item.node.mediaRecommendation) === null || _12 === void 0 ? void 0 : _12.format\n                    };\n                });\n                mangaInfo.characters = data.data.Media.characters.edges.map((item)=>{\n                    var _b, _c;\n                    return {\n                        id: (_b = item.node) === null || _b === void 0 ? void 0 : _b.id,\n                        role: item.role,\n                        name: {\n                            first: item.node.name.first,\n                            last: item.node.name.last,\n                            full: item.node.name.full,\n                            native: item.node.name.native,\n                            userPreferred: item.node.name.userPreferred\n                        },\n                        image: (_c = item.node.image.large) !== null && _c !== void 0 ? _c : item.node.image.medium\n                    };\n                });\n                mangaInfo.relations = data.data.Media.relations.edges.map((item)=>{\n                    var _b, _c, _d, _e, _f, _g;\n                    return {\n                        id: item.node.id,\n                        relationType: item.relationType,\n                        malId: item.node.idMal,\n                        title: {\n                            romaji: item.node.title.romaji,\n                            english: item.node.title.english,\n                            native: item.node.title.native,\n                            userPreferred: item.node.title.userPreferred\n                        },\n                        status: item.node.status == \"RELEASING\" ? models_1.MediaStatus.ONGOING : item.node.status == \"FINISHED\" ? models_1.MediaStatus.COMPLETED : item.node.status == \"NOT_YET_RELEASED\" ? models_1.MediaStatus.NOT_YET_AIRED : item.node.status == \"CANCELLED\" ? models_1.MediaStatus.CANCELLED : item.node.status == \"HIATUS\" ? models_1.MediaStatus.HIATUS : models_1.MediaStatus.UNKNOWN,\n                        chapters: item.node.chapters,\n                        image: (_c = (_b = item.node.coverImage.extraLarge) !== null && _b !== void 0 ? _b : item.node.coverImage.large) !== null && _c !== void 0 ? _c : item.node.coverImage.medium,\n                        color: (_d = item.node.coverImage) === null || _d === void 0 ? void 0 : _d.color,\n                        type: item.node.format,\n                        cover: (_g = (_f = (_e = item.node.bannerImage) !== null && _e !== void 0 ? _e : item.node.coverImage.extraLarge) !== null && _f !== void 0 ? _f : item.node.coverImage.large) !== null && _g !== void 0 ? _g : item.node.coverImage.medium,\n                        rating: item.node.meanScore\n                    };\n                });\n                mangaInfo.chapters = await new _a().findManga(this.provider, {\n                    english: mangaInfo.title.english,\n                    romaji: mangaInfo.title.romaji\n                }, mangaInfo.malId);\n                mangaInfo.chapters = mangaInfo.chapters.reverse();\n                return mangaInfo;\n            } catch (error) {\n                throw Error(error.message);\n            }\n        };\n        this.provider = provider || new mangasee123_1.default();\n    }\n};\n// (async () => {\n//   const ani = new Anilist(new Zoro());\n//   const anime = await ani.fetchAnimeInfo('21');\n//   console.log(anime.episodes);\n//   const sources = await ani.fetchEpisodeSources(anime.episodes![0].id, anime.episodes![0].number, anime.id);\n//   console.log(sources);\n// })();\nexports[\"default\"] = Anilist; //# sourceMappingURL=anilist.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/anilist.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/index.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/index.js ***!
  \**********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst anilist_1 = __importDefault(__webpack_require__(/*! ./anilist */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/anilist.js\"));\nconst mal_1 = __importDefault(__webpack_require__(/*! ./mal */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/mal.js\"));\nconst tmdb_1 = __importDefault(__webpack_require__(/*! ./tmdb */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/tmdb.js\"));\nexports[\"default\"] = {\n    Anilist: anilist_1.default,\n    Myanimelist: mal_1.default,\n    TMDB: tmdb_1.default\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL21ldGEvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsSUFBSyxJQUFJLElBQUksQ0FBQ0EsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFlBQVlQLGdCQUFnQlEsbUJBQU9BLENBQUMseUlBQVc7QUFDckQsTUFBTUMsUUFBUVQsZ0JBQWdCUSxtQkFBT0EsQ0FBQyxpSUFBTztBQUM3QyxNQUFNRSxTQUFTVixnQkFBZ0JRLG1CQUFPQSxDQUFDLG1JQUFRO0FBQy9DSCxrQkFBZSxHQUFHO0lBQUVPLFNBQVNMLFVBQVVJLE9BQU87SUFBRUUsYUFBYUosTUFBTUUsT0FBTztJQUFFRyxNQUFNSixPQUFPQyxPQUFPO0FBQUMsR0FDakcsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL21ldGEvaW5kZXguanM/ZGI4YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFuaWxpc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9hbmlsaXN0XCIpKTtcbmNvbnN0IG1hbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hbFwiKSk7XG5jb25zdCB0bWRiXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdG1kYlwiKSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7IEFuaWxpc3Q6IGFuaWxpc3RfMS5kZWZhdWx0LCBNeWFuaW1lbGlzdDogbWFsXzEuZGVmYXVsdCwgVE1EQjogdG1kYl8xLmRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhbmlsaXN0XzEiLCJyZXF1aXJlIiwibWFsXzEiLCJ0bWRiXzEiLCJkZWZhdWx0IiwiQW5pbGlzdCIsIk15YW5pbWVsaXN0IiwiVE1EQiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/mal.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/mal.js ***!
  \********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nconst gogoanime_1 = __importDefault(__webpack_require__(/*! ../anime/gogoanime */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/gogoanime.js\"));\nconst zoro_1 = __importDefault(__webpack_require__(/*! ../anime/zoro */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/zoro.js\"));\nconst crunchyroll_1 = __importDefault(__webpack_require__(/*! ../anime/crunchyroll */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/crunchyroll.js\"));\nconst anify_1 = __importDefault(__webpack_require__(/*! ../anime/anify */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/anify.js\"));\nconst bilibili_1 = __importDefault(__webpack_require__(/*! ../anime/bilibili */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/anime/bilibili.js\"));\nclass Myanimelist extends models_1.AnimeParser {\n    /**\n     * This class maps myanimelist to kitsu with any other anime provider.\n     * kitsu is used for episode images, titles and description.\n     * @param provider anime provider (optional) default: Gogoanime\n     */ constructor(provider){\n        super();\n        this.name = \"Myanimelist\";\n        this.baseUrl = \"https://myanimelist.net/\";\n        this.logo = \"https://en.wikipedia.org/wiki/MyAnimeList#/media/File:MyAnimeList.png\";\n        this.classPath = \"META.Myanimelist\";\n        this.anilistGraphqlUrl = \"https://graphql.anilist.co\";\n        this.kitsuGraphqlUrl = \"https://kitsu.io/api/graphql\";\n        this.malSyncUrl = \"https://api.malsync.moe\";\n        this.anifyUrl = \"https://api.anify.tv\";\n        this.search = async (query, page = 1)=>{\n            const searchResults = {\n                currentPage: page,\n                results: []\n            };\n            const { data } = await this.client.request({\n                method: \"get\",\n                url: `https://myanimelist.net/anime.php?q=${query}&cat=anime&show=${50 * (page - 1)}`,\n                headers: {\n                    \"user-agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.35\"\n                }\n            });\n            const $ = (0, cheerio_1.load)(data);\n            const pages = $(\".normal_header\").find(\"span\").children();\n            const maxPage = parseInt(pages.last().text());\n            const hasNextPage = page < maxPage;\n            searchResults.hasNextPage = hasNextPage;\n            $(\"tr\").each((i, item)=>{\n                var _a;\n                const id = (_a = $(item).find(\".hoverinfo_trigger\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.split(\"anime/\")[1].split(\"/\")[0];\n                const title = $(item).find(\"strong\").text();\n                const description = $(item).find(\".pt4\").text().replace(\"...read more.\", \"...\");\n                const type = $(item).children().eq(2).text().trim();\n                const episodeCount = $(item).children().eq(3).text().trim();\n                const score = (parseFloat($(item).children().eq(4).text()) * 10).toFixed(0);\n                const imageTmp = $(item).children().first().find(\"img\").attr(\"data-src\");\n                const imageUrl = `https://cdn.myanimelist.net/images/anime/${imageTmp === null || imageTmp === void 0 ? void 0 : imageTmp.split(\"anime/\")[1]}`;\n                if (title != \"\") {\n                    searchResults.results.push({\n                        id: id !== null && id !== void 0 ? id : \"\",\n                        title: title,\n                        image: imageUrl,\n                        rating: parseInt(score),\n                        description: description,\n                        totalEpisodes: parseInt(episodeCount),\n                        type: type == \"TV\" ? models_1.MediaFormat.TV : type == \"TV_SHORT\" ? models_1.MediaFormat.TV_SHORT : type == \"MOVIE\" ? models_1.MediaFormat.MOVIE : type == \"SPECIAL\" ? models_1.MediaFormat.SPECIAL : type == \"OVA\" ? models_1.MediaFormat.OVA : type == \"ONA\" ? models_1.MediaFormat.ONA : type == \"MUSIC\" ? models_1.MediaFormat.MUSIC : type == \"MANGA\" ? models_1.MediaFormat.MANGA : type == \"NOVEL\" ? models_1.MediaFormat.NOVEL : type == \"ONE_SHOT\" ? models_1.MediaFormat.ONE_SHOT : undefined\n                    });\n                }\n            });\n            return searchResults;\n        };\n        /**\n         *\n         * @param animeId anime id\n         * @param fetchFiller fetch filler episodes\n         */ this.fetchAnimeInfo = async (animeId, dub = false, fetchFiller = false)=>{\n            var _a, _b, _c, _d, _e, _f, _g;\n            try {\n                const animeInfo = await this.fetchMalInfoById(animeId);\n                const titleWithLanguages = animeInfo === null || animeInfo === void 0 ? void 0 : animeInfo.title;\n                let fillerEpisodes;\n                if ((this.provider instanceof zoro_1.default || this.provider instanceof gogoanime_1.default) && !dub && (animeInfo.status === models_1.MediaStatus.ONGOING || (0, utils_1.range)({\n                    from: 2000,\n                    to: new Date().getFullYear() + 1\n                }).includes((_a = animeInfo.startDate) === null || _a === void 0 ? void 0 : _a.year))) {\n                    try {\n                        animeInfo.episodes = (_b = (await new anify_1.default(this.proxyConfig, this.adapter, this.provider.name.toLowerCase()).fetchAnimeInfo(animeId)).episodes) === null || _b === void 0 ? void 0 : _b.map((item)=>({\n                                id: item.slug,\n                                title: item.title,\n                                description: item.description,\n                                number: item.number,\n                                image: item.image\n                            }));\n                        (_c = animeInfo.episodes) === null || _c === void 0 ? void 0 : _c.reverse();\n                    } catch (err) {\n                        animeInfo.episodes = await this.findAnimeSlug((titleWithLanguages === null || titleWithLanguages === void 0 ? void 0 : titleWithLanguages.english) || (titleWithLanguages === null || titleWithLanguages === void 0 ? void 0 : titleWithLanguages.romaji) || (titleWithLanguages === null || titleWithLanguages === void 0 ? void 0 : titleWithLanguages.native) || (titleWithLanguages === null || titleWithLanguages === void 0 ? void 0 : titleWithLanguages.userPreferred), animeInfo.season, (_d = animeInfo.startDate) === null || _d === void 0 ? void 0 : _d.year, animeId, dub);\n                        animeInfo.episodes = (_e = animeInfo.episodes) === null || _e === void 0 ? void 0 : _e.map((episode)=>{\n                            if (!episode.image) episode.image = animeInfo.image;\n                            return episode;\n                        });\n                        return animeInfo;\n                    }\n                } else animeInfo.episodes = await this.findAnimeSlug((titleWithLanguages === null || titleWithLanguages === void 0 ? void 0 : titleWithLanguages.english) || (titleWithLanguages === null || titleWithLanguages === void 0 ? void 0 : titleWithLanguages.romaji) || (titleWithLanguages === null || titleWithLanguages === void 0 ? void 0 : titleWithLanguages.native) || (titleWithLanguages === null || titleWithLanguages === void 0 ? void 0 : titleWithLanguages.userPreferred), animeInfo.season, (_f = animeInfo.startDate) === null || _f === void 0 ? void 0 : _f.year, animeId, dub);\n                if (fetchFiller) {\n                    const { data: fillerData } = await this.client({\n                        baseURL: `https://raw.githubusercontent.com/saikou-app/mal-id-filler-list/main/fillers/${animeId}.json`,\n                        method: \"GET\",\n                        validateStatus: ()=>true\n                    });\n                    if (!fillerData.toString().startsWith(\"404\")) {\n                        fillerEpisodes = [];\n                        fillerEpisodes === null || fillerEpisodes === void 0 ? void 0 : fillerEpisodes.push(...fillerData.episodes);\n                    }\n                }\n                animeInfo.episodes = (_g = animeInfo.episodes) === null || _g === void 0 ? void 0 : _g.map((episode)=>{\n                    if (!episode.image) episode.image = animeInfo.image;\n                    if (fetchFiller && (fillerEpisodes === null || fillerEpisodes === void 0 ? void 0 : fillerEpisodes.length) > 0 && (fillerEpisodes === null || fillerEpisodes === void 0 ? void 0 : fillerEpisodes.length) >= animeInfo.episodes.length) {\n                        if (fillerEpisodes[episode.number - 1]) episode.isFiller = new Boolean(fillerEpisodes[episode.number - 1][\"filler-bool\"]).valueOf();\n                    }\n                    return episode;\n                });\n                return animeInfo;\n            } catch (err) {\n                console.error(err);\n                throw err;\n            }\n        };\n        this.fetchEpisodeSources = async (episodeId, ...args)=>{\n            try {\n                if (episodeId.includes(\"/\") && this.provider instanceof anify_1.default) return new anify_1.default().fetchEpisodeSources(episodeId, args[0], args[1]);\n                return this.provider.fetchEpisodeSources(episodeId, ...args);\n            } catch (err) {\n                throw new Error(`Failed to fetch episode sources from ${this.provider.name}: ${err}`);\n            }\n        };\n        this.findAnimeRaw = async (slug, externalLinks)=>{\n            if (externalLinks && this.provider instanceof crunchyroll_1.default) {\n                if (externalLinks.map((link)=>link.site.includes(\"Crunchyroll\"))) {\n                    const link = externalLinks.find((link)=>link.site.includes(\"Crunchyroll\"));\n                    const { request } = await this.client.get(link.url, {\n                        validateStatus: ()=>true\n                    });\n                    const mediaType = request.res.responseUrl.split(\"/\")[3];\n                    const id = request.res.responseUrl.split(\"/\")[4];\n                    return await this.provider.fetchAnimeInfo(id, mediaType);\n                }\n            }\n            const findAnime = await this.provider.search(slug);\n            if (findAnime.results.length === 0) return [];\n            // Sort the retrieved info for more accurate results.\n            findAnime.results.sort((a, b)=>{\n                var _a, _b, _c, _d;\n                const targetTitle = slug.toLowerCase();\n                let firstTitle;\n                let secondTitle;\n                if (typeof a.title == \"string\") firstTitle = a.title;\n                else firstTitle = (_b = (_a = a.title.english) !== null && _a !== void 0 ? _a : a.title.romaji) !== null && _b !== void 0 ? _b : \"\";\n                if (typeof b.title == \"string\") secondTitle = b.title;\n                else secondTitle = (_d = (_c = b.title.english) !== null && _c !== void 0 ? _c : b.title.romaji) !== null && _d !== void 0 ? _d : \"\";\n                const firstRating = (0, utils_1.compareTwoStrings)(targetTitle, firstTitle.toLowerCase());\n                const secondRating = (0, utils_1.compareTwoStrings)(targetTitle, secondTitle.toLowerCase());\n                // Sort in descending order\n                return secondRating - firstRating;\n            });\n            if (this.provider instanceof crunchyroll_1.default) {\n                return await this.provider.fetchAnimeInfo(findAnime.results[0].id, findAnime.results[0].type);\n            }\n            // TODO: use much better way than this\n            return await this.provider.fetchAnimeInfo(findAnime.results[0].id);\n        };\n        this.findAnimeSlug = async (title, season, startDate, malId, dub, externalLinks)=>{\n            var _a, _b, _c;\n            if (this.provider instanceof anify_1.default) return (await this.provider.fetchAnimeInfo(malId)).episodes;\n            // console.log({ title });\n            const slug = title === null || title === void 0 ? void 0 : title.replace(/[^0-9a-zA-Z]+/g, \" \");\n            let possibleAnime;\n            if (malId && !(this.provider instanceof crunchyroll_1.default || this.provider instanceof bilibili_1.default)) {\n                const malAsyncReq = await this.client({\n                    method: \"GET\",\n                    url: `${this.malSyncUrl}/mal/anime/${malId}`,\n                    validateStatus: ()=>true\n                });\n                if (malAsyncReq.status === 200) {\n                    const sitesT = malAsyncReq.data.Sites;\n                    let sites = Object.values(sitesT).map((v, i)=>{\n                        const obj = [\n                            ...Object.values(Object.values(sitesT)[i])\n                        ];\n                        const pages = obj.map((v)=>({\n                                page: v.page,\n                                url: v.url,\n                                title: v.title\n                            }));\n                        return pages;\n                    });\n                    sites = sites.flat();\n                    sites.sort((a, b)=>{\n                        const targetTitle = malAsyncReq.data.title.toLowerCase();\n                        const firstRating = (0, utils_1.compareTwoStrings)(targetTitle, a.title.toLowerCase());\n                        const secondRating = (0, utils_1.compareTwoStrings)(targetTitle, b.title.toLowerCase());\n                        // Sort in descending order\n                        return secondRating - firstRating;\n                    });\n                    const possibleSource = sites.find((s)=>{\n                        if (s.page.toLowerCase() === this.provider.name.toLowerCase()) if (this.provider instanceof gogoanime_1.default) return dub ? s.title.toLowerCase().includes(\"dub\") : !s.title.toLowerCase().includes(\"dub\");\n                        else return true;\n                        return false;\n                    });\n                    if (possibleSource) {\n                        try {\n                            possibleAnime = await this.provider.fetchAnimeInfo(possibleSource.url.split(\"/\").pop());\n                        } catch (err) {\n                            console.error(err);\n                            possibleAnime = await this.findAnimeRaw(slug);\n                        }\n                    } else possibleAnime = await this.findAnimeRaw(slug);\n                } else possibleAnime = await this.findAnimeRaw(slug);\n            } else possibleAnime = await this.findAnimeRaw(slug, externalLinks);\n            // To avoid a new request, lets match and see if the anime show found is in sub/dub\n            const expectedType = dub ? models_1.SubOrSub.DUB : models_1.SubOrSub.SUB;\n            if (possibleAnime.subOrDub != models_1.SubOrSub.BOTH && possibleAnime.subOrDub != expectedType) {\n                return [];\n            }\n            if (this.provider instanceof zoro_1.default) {\n                // Set the correct episode sub/dub request type\n                possibleAnime.episodes.forEach((_, index)=>{\n                    if (possibleAnime.subOrDub === models_1.SubOrSub.BOTH) {\n                        possibleAnime.episodes[index].id = possibleAnime.episodes[index].id.replace(`$both`, dub ? \"$dub\" : \"$sub\");\n                    }\n                });\n            }\n            if (this.provider instanceof crunchyroll_1.default) {\n                const nestedEpisodes = Object.keys(possibleAnime.episodes).filter((key)=>key.toLowerCase().includes(dub ? \"dub\" : \"sub\")).sort((first, second)=>{\n                    var _a, _b, _c, _d;\n                    return ((_b = (_a = possibleAnime.episodes[first]) === null || _a === void 0 ? void 0 : _a[0].season_number) !== null && _b !== void 0 ? _b : 0) - ((_d = (_c = possibleAnime.episodes[second]) === null || _c === void 0 ? void 0 : _c[0].season_number) !== null && _d !== void 0 ? _d : 0);\n                }).map((key)=>{\n                    const audio = key.replace(/[0-9]/g, \"\").replace(/(^\\w{1})|(\\s+\\w{1})/g, (letter)=>letter.toUpperCase());\n                    possibleAnime.episodes[key].forEach((element)=>element.type = audio);\n                    return possibleAnime.episodes[key];\n                });\n                return nestedEpisodes.flat();\n            }\n            const possibleProviderEpisodes = possibleAnime.episodes;\n            if (typeof ((_a = possibleProviderEpisodes[0]) === null || _a === void 0 ? void 0 : _a.image) !== \"undefined\" && typeof ((_b = possibleProviderEpisodes[0]) === null || _b === void 0 ? void 0 : _b.title) !== \"undefined\" && typeof ((_c = possibleProviderEpisodes[0]) === null || _c === void 0 ? void 0 : _c.description) !== \"undefined\") return possibleProviderEpisodes;\n            const options = {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                query: (0, utils_1.kitsuSearchQuery)(slug)\n            };\n            const newEpisodeList = await this.findKitsuAnime(possibleProviderEpisodes, options, season, startDate);\n            return newEpisodeList;\n        };\n        this.findKitsuAnime = async (possibleProviderEpisodes, options, season, startDate)=>{\n            const kitsuEpisodes = await this.client.post(this.kitsuGraphqlUrl, options);\n            const episodesList = new Map();\n            if (kitsuEpisodes === null || kitsuEpisodes === void 0 ? void 0 : kitsuEpisodes.data.data) {\n                const { nodes } = kitsuEpisodes.data.data.searchAnimeByTitle;\n                if (nodes) {\n                    nodes.forEach((node)=>{\n                        var _a, _b;\n                        if (node.season === season && node.startDate.trim().split(\"-\")[0] === (startDate === null || startDate === void 0 ? void 0 : startDate.toString())) {\n                            const episodes = node.episodes.nodes;\n                            for (const episode of episodes){\n                                const i = episode === null || episode === void 0 ? void 0 : episode.number.toString().replace(/\"/g, \"\");\n                                let name = undefined;\n                                let description = undefined;\n                                let thumbnail = undefined;\n                                if ((_a = episode === null || episode === void 0 ? void 0 : episode.description) === null || _a === void 0 ? void 0 : _a.en) description = episode === null || episode === void 0 ? void 0 : episode.description.en.toString().replace(/\"/g, \"\").replace(\"\\\\n\", \"\\n\");\n                                if (episode === null || episode === void 0 ? void 0 : episode.thumbnail) thumbnail = episode === null || episode === void 0 ? void 0 : episode.thumbnail.original.url.toString().replace(/\"/g, \"\");\n                                if (episode) {\n                                    if ((_b = episode.titles) === null || _b === void 0 ? void 0 : _b.canonical) name = episode.titles.canonical.toString().replace(/\"/g, \"\");\n                                    episodesList.set(i, {\n                                        episodeNum: episode === null || episode === void 0 ? void 0 : episode.number.toString().replace(/\"/g, \"\"),\n                                        title: name,\n                                        description,\n                                        thumbnail\n                                    });\n                                    continue;\n                                }\n                                episodesList.set(i, {\n                                    episodeNum: undefined,\n                                    title: undefined,\n                                    description: undefined,\n                                    thumbnail\n                                });\n                            }\n                        }\n                    });\n                }\n            }\n            const newEpisodeList = [];\n            if ((possibleProviderEpisodes === null || possibleProviderEpisodes === void 0 ? void 0 : possibleProviderEpisodes.length) !== 0) {\n                possibleProviderEpisodes === null || possibleProviderEpisodes === void 0 ? void 0 : possibleProviderEpisodes.forEach((ep, i)=>{\n                    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n                    const j = (i + 1).toString();\n                    newEpisodeList.push({\n                        id: ep.id,\n                        title: (_c = (_a = ep.title) !== null && _a !== void 0 ? _a : (_b = episodesList.get(j)) === null || _b === void 0 ? void 0 : _b.title) !== null && _c !== void 0 ? _c : null,\n                        image: (_f = (_d = ep.image) !== null && _d !== void 0 ? _d : (_e = episodesList.get(j)) === null || _e === void 0 ? void 0 : _e.thumbnail) !== null && _f !== void 0 ? _f : null,\n                        number: ep.number,\n                        description: (_j = (_g = ep.description) !== null && _g !== void 0 ? _g : (_h = episodesList.get(j)) === null || _h === void 0 ? void 0 : _h.description) !== null && _j !== void 0 ? _j : null,\n                        url: (_k = ep.url) !== null && _k !== void 0 ? _k : null\n                    });\n                });\n            }\n            return newEpisodeList;\n        };\n        /**\n         *\n         * @param id anime id\n         * @returns anime info without streamable episodes\n         */ this.fetchMalInfoById = async (id)=>{\n            const animeInfo = {\n                id: id,\n                title: \"\"\n            };\n            const { data } = await this.client.request({\n                method: \"GET\",\n                url: `https://myanimelist.net/anime/${id}`,\n                headers: {\n                    \"user-agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.35\"\n                }\n            });\n            const $ = (0, cheerio_1.load)(data);\n            const episodes = [];\n            const desc = $('[itemprop=\"description\"]').first().text();\n            const imageElem = $('[itemprop=\"image\"]').first();\n            const image = imageElem.attr(\"src\") || imageElem.attr(\"data-image\") || imageElem.attr(\"data-src\");\n            const genres = [];\n            const genreDOM = $('[itemprop=\"genre\"]').get();\n            genreDOM.forEach((elem)=>genres.push($(elem).text()));\n            animeInfo.genres = genres;\n            animeInfo.image = image;\n            animeInfo.description = desc;\n            animeInfo.title = {\n                english: $(\".js-alternative-titles.hide\").children().eq(0).text().replace(\"English: \", \"\").trim(),\n                romaji: $(\".title-name\").text(),\n                native: $(\".js-alternative-titles.hide\").parent().children().eq(9).text().trim(),\n                userPreferred: $(\".js-alternative-titles.hide\").children().eq(0).text().replace(\"English: \", \"\").trim()\n            };\n            animeInfo.synonyms = $(\".js-alternative-titles.hide\").parent().children().eq(8).text().replace(\"Synonyms:\", \"\").trim().split(\",\");\n            animeInfo.studios = [];\n            animeInfo.popularity = parseInt($(\".numbers.popularity\").text().trim().replace(\"Popularity #\", \"\").trim());\n            const producers = [];\n            $(\"a\").each(function(i, link) {\n                var _a;\n                if (((_a = $(link).attr(\"href\")) === null || _a === void 0 ? void 0 : _a.includes(\"producer\")) && $(link).parent().children().eq(0).text() == \"Producers:\") {\n                    producers.push($(link).text());\n                }\n            });\n            animeInfo.producers = producers;\n            // animeInfo.episodes = episodes;\n            const teaserDOM = $(\".video-promotion > a\");\n            if (teaserDOM.length > 0) {\n                const teaserURL = $(teaserDOM).attr(\"href\");\n                const style = $(teaserDOM).attr(\"style\");\n                if (teaserURL) {\n                    animeInfo.trailer = {\n                        id: (0, utils_1.substringAfter)(teaserURL, \"embed/\").split(\"?\")[0],\n                        site: \"https://youtube.com/watch?v=\",\n                        thumbnail: style ? (0, utils_1.substringBefore)((0, utils_1.substringAfter)(style, \"url('\"), \"'\") : \"\"\n                    };\n                }\n            }\n            const ops = $(\".theme-songs.js-theme-songs.opnening\").find(\"tr\").get();\n            const ignoreList = [\n                \"Apple Music\",\n                \"Youtube Music\",\n                \"Amazon Music\",\n                \"Spotify\"\n            ];\n            animeInfo.openings = ops.map((element)=>{\n                //console.log($(element).text().trim());\n                const name = $(element).children().eq(1).children().first().text().trim();\n                if (!ignoreList.includes(name)) {\n                    if ($(element).find(\".theme-song-index\").length != 0) {\n                        const index = $(element).find(\".theme-song-index\").text().trim();\n                        const band = $(element).find(\".theme-song-artist\").text().trim();\n                        const episodes = $(element).find(\".theme-song-episode\").text().trim();\n                        //console.log($(element).children().eq(1).text().trim().split(index)[1]);\n                        return {\n                            name: $(element).children().eq(1).text().trim().split(index)[1].split(band)[0].trim(),\n                            band: band.replace(\"by \", \"\"),\n                            episodes: episodes\n                        };\n                    } else {\n                        const band = $(element).find(\".theme-song-artist\").text().trim();\n                        const episodes = $(element).find(\".theme-song-episode\").text().trim();\n                        return {\n                            name: $(element).children().eq(1).text().trim().split(band)[0].trim(),\n                            band: band.replace(\"by \", \"\"),\n                            episodes: episodes\n                        };\n                    }\n                }\n            });\n            animeInfo.openings = animeInfo.openings.filter(function(element) {\n                return element !== undefined;\n            });\n            const eds = $(\".theme-songs.js-theme-songs.ending\").find(\"tr\").get();\n            animeInfo.endings = eds.map((element)=>{\n                //console.log($(element).text().trim());\n                const name = $(element).children().eq(1).children().first().text().trim();\n                if (!ignoreList.includes(name)) {\n                    if ($(element).find(\".theme-song-index\").length != 0) {\n                        const index = $(element).find(\".theme-song-index\").text().trim();\n                        const band = $(element).find(\".theme-song-artist\").text().trim();\n                        const episodes = $(element).find(\".theme-song-episode\").text().trim();\n                        //console.log($(element).children().eq(1).text().trim().split(index)[1]);\n                        return {\n                            name: $(element).children().eq(1).text().trim().split(index)[1].split(band)[0].trim(),\n                            band: band.replace(\"by \", \"\"),\n                            episodes: episodes\n                        };\n                    } else {\n                        const band = $(element).find(\".theme-song-artist\").text().trim();\n                        const episodes = $(element).find(\".theme-song-episode\").text().trim();\n                        return {\n                            name: $(element).children().eq(1).text().trim().split(band)[0].trim(),\n                            band: band.replace(\"by \", \"\"),\n                            episodes: episodes\n                        };\n                    }\n                }\n            });\n            animeInfo.endings = animeInfo.endings.filter(function(element) {\n                return element !== undefined;\n            });\n            const description = $(\".spaceit_pad\").get();\n            description.forEach((elem)=>{\n                var _a;\n                const text = $(elem).text().toLowerCase().trim();\n                const key = text.split(\":\")[0];\n                const value = (0, utils_1.substringAfter)(text, `${key}:`).trim();\n                switch(key){\n                    case \"status\":\n                        animeInfo.status = this.malStatusToMediaStatus(value);\n                        break;\n                    case \"episodes\":\n                        animeInfo.totalEpisodes = parseInt(value);\n                        if (isNaN(animeInfo.totalEpisodes)) animeInfo.totalEpisodes = 0;\n                        break;\n                    case \"premiered\":\n                        animeInfo.season = value.split(\" \")[0].toUpperCase();\n                        break;\n                    case \"aired\":\n                        const dates = value.split(\"to\");\n                        if (dates.length >= 2) {\n                            const start = dates[0].trim();\n                            const end = dates[1].trim();\n                            const startDate = new Date(start);\n                            const endDate = new Date(end);\n                            if (startDate.toString() !== \"Invalid Date\") {\n                                animeInfo.startDate = {\n                                    day: startDate.getDate(),\n                                    month: startDate.getMonth(),\n                                    year: startDate.getFullYear()\n                                };\n                            }\n                            if (endDate.toString() != \"Invalid Date\") {\n                                animeInfo.endDate = {\n                                    day: endDate.getDate(),\n                                    month: endDate.getMonth(),\n                                    year: endDate.getFullYear()\n                                };\n                            }\n                        }\n                        break;\n                    case \"score\":\n                        animeInfo.rating = parseFloat(value);\n                        break;\n                    case \"studios\":\n                        for (const studio of $(elem).find(\"a\"))(_a = animeInfo.studios) === null || _a === void 0 ? void 0 : _a.push($(studio).text());\n                        break;\n                    case \"rating\":\n                        animeInfo.ageRating = value;\n                }\n            });\n            // Only works on certain animes, so it is unreliable\n            // let videoLink = $('.mt4.ar a').attr('href');\n            // if (videoLink) {\n            //   await this.populateEpisodeList(episodes, videoLink);\n            // }\n            return animeInfo;\n        };\n        this.provider = provider || new gogoanime_1.default();\n    }\n    malStatusToMediaStatus(status) {\n        if (status == \"currently airing\") return models_1.MediaStatus.ONGOING;\n        else if (status == \"finished airing\") return models_1.MediaStatus.COMPLETED;\n        else if (status == \"not yet aired\") return models_1.MediaStatus.NOT_YET_AIRED;\n        return models_1.MediaStatus.UNKNOWN;\n    }\n    async populateEpisodeList(episodes, url, count = 1) {\n        try {\n            const { data } = await this.client.request({\n                method: \"get\",\n                url: `${url}?p=${count}`,\n                headers: {\n                    \"user-agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.35\"\n                }\n            });\n            let hasEpisodes = false;\n            const $ = (0, cheerio_1.load)(data);\n            for (const elem of $(\".video-list\").toArray()){\n                const href = $(elem).attr(\"href\");\n                const image = $(elem).find(\"img\").attr(\"data-src\");\n                const titleDOM = $(elem).find(\".episode-title\");\n                const title = titleDOM === null || titleDOM === void 0 ? void 0 : titleDOM.text();\n                titleDOM.remove();\n                const numberDOM = $(elem).find(\".title\").text().split(\" \");\n                let number = 0;\n                if (numberDOM.length > 1) {\n                    number = Number(numberDOM[1]);\n                }\n                if (href && href.indexOf(\"myanimelist.net/anime\") > -1) {\n                    hasEpisodes = true;\n                    episodes.push({\n                        id: \"\",\n                        number,\n                        title,\n                        image\n                    });\n                }\n            }\n            if (hasEpisodes) await this.populateEpisodeList(episodes, url, ++count);\n        } catch (err) {\n            console.error(err);\n        }\n    }\n    fetchEpisodeServers(episodeId) {\n        return this.provider.fetchEpisodeServers(episodeId);\n    }\n}\nexports[\"default\"] = Myanimelist; // (async () => {\n //   const mal = new Myanimelist();\n //   // const search = await mal.search('one piece');\n //   const info = await mal.fetchAnimeInfo('21', true);\n //   //console.log(info);\n // })();\n //# sourceMappingURL=mal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/mal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/tmdb.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/tmdb.js ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\");\nconst flixhq_1 = __importDefault(__webpack_require__(/*! ../movies/flixhq */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/flixhq.js\"));\nclass TMDB extends models_1.MovieParser {\n    constructor(apiKey = \"5201b54eb0968700e693a30576d7d4dc\", provider, proxyConfig, adapter){\n        super(proxyConfig, adapter);\n        this.apiKey = apiKey;\n        this.name = \"TMDB\";\n        this.baseUrl = \"https://www.themoviedb.org\";\n        this.apiUrl = \"https://api.themoviedb.org/3\";\n        this.logo = \"https://pbs.twimg.com/profile_images/1243623122089041920/gVZIvphd_400x400.jpg\";\n        this.classPath = \"META.TMDB\";\n        this.supportedTypes = new Set([\n            models_1.TvType.MOVIE,\n            models_1.TvType.TVSERIES,\n            models_1.TvType.ANIME\n        ]);\n        /**\n         * @param query search query\n         * @param page page number\n         */ this.search = async (query, page = 1)=>{\n            const searchUrl = `${this.apiUrl}/search/multi?api_key=${this.apiKey}&language=en-US&page=${page}&include_adult=false&query=${query}`;\n            const search = {\n                currentPage: page,\n                hasNextPage: false,\n                results: []\n            };\n            try {\n                const { data } = await this.client.get(searchUrl);\n                if (data.results.length < 1) return search;\n                search.hasNextPage = page + 1 <= data.total_pages;\n                search.currentPage = page;\n                search.totalResults = data.total_results;\n                search.totalPages = data.total_pages;\n                data.results.forEach((result)=>{\n                    const date = new Date((result === null || result === void 0 ? void 0 : result.release_date) || (result === null || result === void 0 ? void 0 : result.first_air_date));\n                    const movie = {\n                        id: result.id,\n                        title: (result === null || result === void 0 ? void 0 : result.title) || (result === null || result === void 0 ? void 0 : result.name),\n                        image: `https://image.tmdb.org/t/p/original${result === null || result === void 0 ? void 0 : result.poster_path}`,\n                        type: result.media_type === \"movie\" ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES,\n                        rating: (result === null || result === void 0 ? void 0 : result.vote_average) || 0,\n                        releaseDate: `${date.getFullYear()}` || \"0\"\n                    };\n                    return search.results.push(movie);\n                });\n                return search;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         * @param id media id (anime or movie/tv)\n         * @param type movie or tv\n         */ this.fetchMediaInfo = async (mediaId, type)=>{\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;\n            type = type.toLowerCase() === \"movie\" ? \"movie\" : \"tv\";\n            const infoUrl = `${this.apiUrl}/${type}/${mediaId}?api_key=${this.apiKey}&language=en-US&append_to_response=release_dates,watch/providers,alternative_titles,credits,external_ids,images,keywords,recommendations,reviews,similar,translations,videos&include_image_language=en`;\n            const info = {\n                id: mediaId,\n                title: \"\"\n            };\n            try {\n                //request api to get media info from tmdb\n                const { data } = await this.client.get(infoUrl);\n                //get provider id from title and year (if available) to get the correct provider id for the movie/tv series (e.g. flixhq)\n                const providerId = await this.findIdFromTitle((data === null || data === void 0 ? void 0 : data.title) || (data === null || data === void 0 ? void 0 : data.name), {\n                    type: type === \"movie\" ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES,\n                    totalSeasons: data === null || data === void 0 ? void 0 : data.number_of_seasons,\n                    totalEpisodes: data === null || data === void 0 ? void 0 : data.number_of_episodes,\n                    year: new Date((data === null || data === void 0 ? void 0 : data.release_year) || (data === null || data === void 0 ? void 0 : data.first_air_date)).getFullYear()\n                });\n                //fetch media info from provider\n                const InfoFromProvider = await this.provider.fetchMediaInfo(providerId);\n                info.id = providerId;\n                //check if the movie so episode id does not show on tv shows\n                if (type === \"movie\") info.episodeId = (_a = InfoFromProvider === null || InfoFromProvider === void 0 ? void 0 : InfoFromProvider.episodes[0]) === null || _a === void 0 ? void 0 : _a.id;\n                info.title = (data === null || data === void 0 ? void 0 : data.title) || (data === null || data === void 0 ? void 0 : data.name);\n                info.translations = (_b = data === null || data === void 0 ? void 0 : data.translations) === null || _b === void 0 ? void 0 : _b.translations.map((translation)=>{\n                    var _a, _b;\n                    return {\n                        title: ((_a = translation.data) === null || _a === void 0 ? void 0 : _a.title) || (data === null || data === void 0 ? void 0 : data.name) || undefined,\n                        description: ((_b = translation.data) === null || _b === void 0 ? void 0 : _b.overview) || undefined,\n                        language: (translation === null || translation === void 0 ? void 0 : translation.english_name) || undefined\n                    };\n                });\n                //images\n                info.image = `https://image.tmdb.org/t/p/original${data === null || data === void 0 ? void 0 : data.poster_path}`;\n                info.cover = `https://image.tmdb.org/t/p/original${data === null || data === void 0 ? void 0 : data.backdrop_path}`;\n                info.logos = (_c = data === null || data === void 0 ? void 0 : data.images) === null || _c === void 0 ? void 0 : _c.logos.map((logo)=>({\n                        url: `https://image.tmdb.org/t/p/original${logo.file_path}`,\n                        aspectRatio: logo === null || logo === void 0 ? void 0 : logo.aspect_ratio,\n                        width: logo === null || logo === void 0 ? void 0 : logo.width\n                    }));\n                info.type = type === \"movie\" ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES;\n                info.rating = (data === null || data === void 0 ? void 0 : data.vote_average) || 0;\n                info.releaseDate = (data === null || data === void 0 ? void 0 : data.release_date) || (data === null || data === void 0 ? void 0 : data.first_air_date);\n                info.description = data === null || data === void 0 ? void 0 : data.overview;\n                info.genres = data === null || data === void 0 ? void 0 : data.genres.map((genre)=>genre.name);\n                info.duration = (data === null || data === void 0 ? void 0 : data.runtime) || (data === null || data === void 0 ? void 0 : data.episode_run_time[0]);\n                info.totalEpisodes = data === null || data === void 0 ? void 0 : data.number_of_episodes;\n                info.totalSeasons = data === null || data === void 0 ? void 0 : data.number_of_seasons;\n                info.directors = (_d = data === null || data === void 0 ? void 0 : data.credits) === null || _d === void 0 ? void 0 : _d.crew.filter((crew)=>crew.job === \"Director\").map((crew)=>crew.name);\n                info.writers = (_e = data === null || data === void 0 ? void 0 : data.credits) === null || _e === void 0 ? void 0 : _e.crew.filter((crew)=>crew.job === \"Screenplay\").map((crew)=>crew.name);\n                info.actors = (_f = data === null || data === void 0 ? void 0 : data.credits) === null || _f === void 0 ? void 0 : _f.cast.map((cast)=>cast.name);\n                info.trailer = {\n                    id: (_h = (_g = data === null || data === void 0 ? void 0 : data.videos) === null || _g === void 0 ? void 0 : _g.results[0]) === null || _h === void 0 ? void 0 : _h.key,\n                    site: (_k = (_j = data === null || data === void 0 ? void 0 : data.videos) === null || _j === void 0 ? void 0 : _j.results[0]) === null || _k === void 0 ? void 0 : _k.site,\n                    url: `https://www.youtube.com/watch?v=${(_m = (_l = data === null || data === void 0 ? void 0 : data.videos) === null || _l === void 0 ? void 0 : _l.results[0]) === null || _m === void 0 ? void 0 : _m.key}`\n                };\n                info.mappings = {\n                    imdb: ((_o = data === null || data === void 0 ? void 0 : data.external_ids) === null || _o === void 0 ? void 0 : _o.imdb_id) || undefined,\n                    tmdb: (data === null || data === void 0 ? void 0 : data.id) || undefined\n                };\n                info.similar = ((_q = (_p = data === null || data === void 0 ? void 0 : data.similar) === null || _p === void 0 ? void 0 : _p.results) === null || _q === void 0 ? void 0 : _q.length) <= 0 ? undefined : (_r = data === null || data === void 0 ? void 0 : data.similar) === null || _r === void 0 ? void 0 : _r.results.map((result)=>{\n                    return {\n                        id: result.id,\n                        title: result.title || result.name,\n                        image: `https://image.tmdb.org/t/p/original${result.poster_path}`,\n                        type: type === \"movie\" ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES,\n                        rating: result.vote_average || 0,\n                        releaseDate: result.release_date || result.first_air_date\n                    };\n                });\n                info.recommendations = ((_t = (_s = data === null || data === void 0 ? void 0 : data.recommendations) === null || _s === void 0 ? void 0 : _s.results) === null || _t === void 0 ? void 0 : _t.length) <= 0 ? undefined : (_u = data === null || data === void 0 ? void 0 : data.recommendations) === null || _u === void 0 ? void 0 : _u.results.map((result)=>{\n                    return {\n                        id: result.id,\n                        title: result.title || result.name,\n                        image: `https://image.tmdb.org/t/p/original${result.poster_path}`,\n                        type: type === \"movie\" ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES,\n                        rating: result.vote_average || 0,\n                        releaseDate: result.release_date || result.first_air_date\n                    };\n                });\n                const totalSeasons = (info === null || info === void 0 ? void 0 : info.totalSeasons) || 0;\n                if (type === \"tv\" && totalSeasons > 0) {\n                    const seasonUrl = (season)=>`${this.apiUrl}/tv/${mediaId}/season/${season}?api_key=${this.apiKey}`;\n                    info.seasons = [];\n                    const seasons = info.seasons;\n                    const providerEpisodes = InfoFromProvider === null || InfoFromProvider === void 0 ? void 0 : InfoFromProvider.episodes;\n                    if ((providerEpisodes === null || providerEpisodes === void 0 ? void 0 : providerEpisodes.length) < 1) return info;\n                    info.nextAiringEpisode = (data === null || data === void 0 ? void 0 : data.next_episode_to_air) ? {\n                        season: ((_v = data.next_episode_to_air) === null || _v === void 0 ? void 0 : _v.season_number) || undefined,\n                        episode: ((_w = data.next_episode_to_air) === null || _w === void 0 ? void 0 : _w.episode_number) || undefined,\n                        releaseDate: ((_x = data.next_episode_to_air) === null || _x === void 0 ? void 0 : _x.air_date) || undefined,\n                        title: ((_y = data.next_episode_to_air) === null || _y === void 0 ? void 0 : _y.name) || undefined,\n                        description: ((_z = data.next_episode_to_air) === null || _z === void 0 ? void 0 : _z.overview) || undefined,\n                        runtime: ((_0 = data.next_episode_to_air) === null || _0 === void 0 ? void 0 : _0.runtime) || undefined\n                    } : undefined;\n                    for(let i = 1; i <= totalSeasons; i++){\n                        const { data: seasonData } = await this.client.get(seasonUrl(i.toString()));\n                        //find season in each episode (providerEpisodes)\n                        const seasonEpisodes = providerEpisodes === null || providerEpisodes === void 0 ? void 0 : providerEpisodes.filter((episode)=>episode.season === i);\n                        const episodes = ((_1 = seasonData === null || seasonData === void 0 ? void 0 : seasonData.episodes) === null || _1 === void 0 ? void 0 : _1.length) <= 0 ? undefined : seasonData === null || seasonData === void 0 ? void 0 : seasonData.episodes.map((episode)=>{\n                            //find episode in each season (seasonEpisodes)\n                            const episodeFromProvider = seasonEpisodes === null || seasonEpisodes === void 0 ? void 0 : seasonEpisodes.find((ep)=>ep.number === episode.episode_number);\n                            return {\n                                id: episodeFromProvider === null || episodeFromProvider === void 0 ? void 0 : episodeFromProvider.id,\n                                title: episode.name,\n                                episode: episode.episode_number,\n                                season: episode.season_number,\n                                releaseDate: episode.air_date,\n                                description: episode.overview,\n                                url: (episodeFromProvider === null || episodeFromProvider === void 0 ? void 0 : episodeFromProvider.url) || undefined,\n                                img: !(episode === null || episode === void 0 ? void 0 : episode.still_path) ? undefined : {\n                                    mobile: `https://image.tmdb.org/t/p/w300${episode.still_path}`,\n                                    hd: `https://image.tmdb.org/t/p/w780${episode.still_path}`\n                                }\n                            };\n                        });\n                        seasons.push({\n                            season: i,\n                            image: !(seasonData === null || seasonData === void 0 ? void 0 : seasonData.poster_path) ? undefined : {\n                                mobile: `https://image.tmdb.org/t/p/w300${seasonData.poster_path}`,\n                                hd: `https://image.tmdb.org/t/p/w780${seasonData.poster_path}`\n                            },\n                            episodes,\n                            isReleased: ((_2 = seasonData === null || seasonData === void 0 ? void 0 : seasonData.episodes[0]) === null || _2 === void 0 ? void 0 : _2.air_date) > new Date().toISOString() ? false : true\n                        });\n                    }\n                }\n            } catch (err) {\n                throw new Error(err.message);\n            }\n            return info;\n        };\n        /**\n         * Find the id of a media from its title. and extra data. (year, totalSeasons, totalEpisodes)\n         * @param title\n         * @param extraData\n         * @returns id of the media\n         */ this.findIdFromTitle = async (title, extraData)=>{\n            var _a;\n            //clean title\n            title = title.replace(/[^a-zA-Z0-9 ]/g, \"\").toLowerCase();\n            const findMedia = await this.provider.search(title);\n            if (findMedia.results.length === 0) return \"\";\n            // console.log(findMedia.results);\n            // console.log(extraData);\n            // Sort the retrieved info for more accurate results.\n            findMedia.results.sort((a, b)=>{\n                var _a, _b;\n                const targetTitle = title;\n                let firstTitle;\n                let secondTitle;\n                if (typeof a.title == \"string\") firstTitle = a === null || a === void 0 ? void 0 : a.title;\n                else firstTitle = (_a = a === null || a === void 0 ? void 0 : a.title) !== null && _a !== void 0 ? _a : \"\";\n                if (typeof b.title == \"string\") secondTitle = b.title;\n                else secondTitle = (_b = b === null || b === void 0 ? void 0 : b.title) !== null && _b !== void 0 ? _b : \"\";\n                const firstRating = (0, utils_1.compareTwoStrings)(targetTitle, firstTitle.toLowerCase());\n                const secondRating = (0, utils_1.compareTwoStrings)(targetTitle, secondTitle.toLowerCase());\n                // Sort in descending order\n                return secondRating - firstRating;\n            });\n            //remove results that dont match the type\n            findMedia.results = findMedia.results.filter((result)=>{\n                if (extraData.type === models_1.TvType.MOVIE) return result.type === models_1.TvType.MOVIE;\n                else if (extraData.type === models_1.TvType.TVSERIES) return result.type === models_1.TvType.TVSERIES;\n                else return result;\n            });\n            // if extraData contains a year, filter out the results that don't match the year\n            if (extraData && extraData.year && extraData.type === models_1.TvType.MOVIE) {\n                findMedia.results = findMedia.results.filter((result)=>{\n                    var _a;\n                    return ((_a = result.releaseDate) === null || _a === void 0 ? void 0 : _a.split(\"-\")[0]) === extraData.year;\n                });\n            }\n            // console.log({ test1: findMedia.results });\n            // check if the result contains the total number of seasons and compare it to the extraData by 1 up or down and make sure that its a number\n            if (extraData && extraData.totalSeasons && extraData.type === models_1.TvType.TVSERIES) {\n                findMedia.results = findMedia.results.filter((result)=>{\n                    const totalSeasons = result.seasons || 0;\n                    const extraDataSeasons = extraData.totalSeasons || 0;\n                    return totalSeasons === extraDataSeasons || totalSeasons === extraDataSeasons + 1 || totalSeasons === extraDataSeasons - 1;\n                });\n            }\n            // console.log(findMedia.results);\n            return ((_a = findMedia === null || findMedia === void 0 ? void 0 : findMedia.results[0]) === null || _a === void 0 ? void 0 : _a.id) || undefined;\n        };\n        /**\n         * @param id media id (anime or movie/tv)\n         * @param args optional arguments\n         */ this.fetchEpisodeSources = async (id, ...args)=>{\n            return this.provider.fetchEpisodeSources(id, ...args);\n        };\n        /**\n         * @param episodeId episode id\n         * @param args optional arguments\n         **/ this.fetchEpisodeServers = async (episodeId, ...args)=>{\n            return this.provider.fetchEpisodeServers(episodeId, ...args);\n        };\n        this.provider = provider || new flixhq_1.default();\n    }\n}\n// (async () => {\n//   const tmdb = new TMDB();\n//   const search = await tmdb.search('the flash');\n//   const info = await tmdb.fetchMediaInfo(search.results[0].id, search.results![0].type as string);\n//   // console.log(info);\n// })();\nexports[\"default\"] = TMDB; //# sourceMappingURL=tmdb.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/meta/tmdb.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/dramacool.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/dramacool.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst extractors_1 = __webpack_require__(/*! ../../extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nclass DramaCool extends models_1.MovieParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"DramaCool\";\n        this.baseUrl = \"https://dramacool.hr\";\n        this.logo = \"https://play-lh.googleusercontent.com/IaCb2JXII0OV611MQ-wSA8v_SAs9XF6E3TMDiuxGGXo4wp9bI60GtDASIqdERSTO5XU\";\n        this.classPath = \"MOVIES.DramaCool\";\n        this.supportedTypes = new Set([\n            models_1.TvType.MOVIE,\n            models_1.TvType.TVSERIES\n        ]);\n        this.search = async (query, page = 1)=>{\n            try {\n                const searchResult = {\n                    currentPage: page,\n                    hasNextPage: false,\n                    results: []\n                };\n                const { data } = await this.client.get(`${this.baseUrl}/search?keyword=${query.replace(/[\\W_]+/g, \"-\")}&page=${page}`);\n                const $ = (0, cheerio_1.load)(data);\n                const navSelector = \"ul.pagination\";\n                searchResult.hasNextPage = $(navSelector).length > 0 ? !$(navSelector).children().last().hasClass(\"selected\") : false;\n                $(\"div.block > div.tab-content > ul.list-episode-item > li\").each((i, el)=>{\n                    var _a;\n                    searchResult.results.push({\n                        id: (_a = $(el).find(\"a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1),\n                        title: $(el).find(\"a > h3\").text(),\n                        url: `${this.baseUrl}${$(el).find(\"a\").attr(\"href\")}`,\n                        image: $(el).find(\"a > img\").attr(\"data-original\")\n                    });\n                });\n                return searchResult;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchMediaInfo = async (mediaId)=>{\n            try {\n                const realMediaId = mediaId;\n                if (!mediaId.startsWith(this.baseUrl)) mediaId = `${this.baseUrl}/${mediaId}`;\n                const mediaInfo = {\n                    id: \"\",\n                    title: \"\"\n                };\n                const { data } = await this.client.get(mediaId);\n                const $ = (0, cheerio_1.load)(data);\n                mediaInfo.id = realMediaId;\n                mediaInfo.title = $(\".info > h1:nth-child(1)\").text();\n                mediaInfo.otherNames = $(\".other_name > a\").map((i, el)=>$(el).text().trim()).get();\n                mediaInfo.image = $(\"div.details > div.img > img\").attr(\"src\");\n                // get the 3rd p tag\n                mediaInfo.description = $(\"div.details div.info p:nth-child(6)\").text();\n                mediaInfo.releaseDate = this.removeContainsFromString($('div.details div.info p:contains(\"Released:\")').text(), \"Released\");\n                mediaInfo.episodes = [];\n                $(\"div.content-left > div.block-tab > div > div > ul > li\").each((i, el)=>{\n                    var _a, _b, _c;\n                    (_a = mediaInfo.episodes) === null || _a === void 0 ? void 0 : _a.push({\n                        id: (_b = $(el).find(\"a\").attr(\"href\")) === null || _b === void 0 ? void 0 : _b.split(\".html\")[0].slice(1),\n                        title: $(el).find(\"h3\").text().replace(mediaInfo.title.toString(), \"\").trim(),\n                        episode: parseFloat((_c = $(el).find(\"a\").attr(\"href\")) === null || _c === void 0 ? void 0 : _c.split(\"-episode-\")[1].split(\".html\")[0].split(\"-\").join(\".\")),\n                        subType: $(el).find(\"span.type\").text(),\n                        releaseDate: $(el).find(\"span.time\").text(),\n                        url: `${this.baseUrl}${$(el).find(\"a\").attr(\"href\")}`\n                    });\n                });\n                mediaInfo.episodes.reverse();\n                return mediaInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchEpisodeSources = async (episodeId, server = models_1.StreamingServers.AsianLoad)=>{\n            if (episodeId.startsWith(\"http\")) {\n                const serverUrl = new URL(episodeId);\n                switch(server){\n                    case models_1.StreamingServers.AsianLoad:\n                        return Object.assign({}, await new extractors_1.AsianLoad(this.proxyConfig, this.adapter).extract(serverUrl));\n                    case models_1.StreamingServers.MixDrop:\n                        return {\n                            sources: await new extractors_1.MixDrop(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                    case models_1.StreamingServers.StreamTape:\n                        return {\n                            sources: await new extractors_1.StreamTape(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                    case models_1.StreamingServers.StreamSB:\n                        return {\n                            sources: await new extractors_1.StreamSB(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                    default:\n                        throw new Error(\"Server not supported\");\n                }\n            }\n            try {\n                if (!episodeId.includes(\".html\")) episodeId = `${this.baseUrl}/${episodeId}.html`;\n                const servers = await this.fetchEpisodeServers(episodeId);\n                const i = servers.findIndex((s)=>s.name.toLowerCase() === server.toLowerCase());\n                if (i === -1) {\n                    throw new Error(`Server ${server} not found`);\n                }\n                const serverUrl = new URL(servers.filter((s)=>s.name.toLowerCase() === server.toLowerCase())[0].url);\n                return await this.fetchEpisodeSources(serverUrl.href, server);\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.removeContainsFromString = (str, contains)=>{\n            contains = contains.toLowerCase();\n            return str.toLowerCase().replace(/\\n/g, \"\").replace(`${contains}:`, \"\").trim();\n        };\n    }\n    async fetchEpisodeServers(episodeId, ...args) {\n        try {\n            const episodeServers = [];\n            if (!episodeId.includes(\".html\")) episodeId = `${this.baseUrl}/${episodeId}.html`;\n            const { data } = await this.client.get(episodeId);\n            const $ = (0, cheerio_1.load)(data);\n            $(\"div.anime_muti_link > ul > li\").map(async (i, ele)=>{\n                const url = $(ele).attr(\"data-video\");\n                let name = $(ele).attr(\"class\").replace(\"selected\", \"\").trim();\n                if (name.includes(\"Standard\")) {\n                    name = models_1.StreamingServers.AsianLoad;\n                }\n                episodeServers.push({\n                    name: name,\n                    url: url.startsWith(\"//\") ? url === null || url === void 0 ? void 0 : url.replace(\"//\", \"https://\") : url\n                });\n            });\n            return episodeServers;\n        } catch (err) {\n            throw new Error(err.message);\n        }\n    }\n}\nexports[\"default\"] = DramaCool; //# sourceMappingURL=dramacool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/dramacool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/flixhq.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/flixhq.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst extractors_1 = __webpack_require__(/*! ../../extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nclass FlixHQ extends models_1.MovieParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"FlixHQ\";\n        this.baseUrl = \"https://flixhq.to\";\n        this.logo = \"https://upload.wikimedia.org/wikipedia/commons/7/7a/MyAnimeList_Logo.png\";\n        this.classPath = \"MOVIES.FlixHQ\";\n        this.supportedTypes = new Set([\n            models_1.TvType.MOVIE,\n            models_1.TvType.TVSERIES\n        ]);\n        /**\n         *\n         * @param query search query string\n         * @param page page number (default 1) (optional)\n         */ this.search = async (query, page = 1)=>{\n            const searchResult = {\n                currentPage: page,\n                hasNextPage: false,\n                results: []\n            };\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/search/${query.replace(/[\\W_]+/g, \"-\")}?page=${page}`);\n                const $ = (0, cheerio_1.load)(data);\n                const navSelector = \"div.pre-pagination:nth-child(3) > nav:nth-child(1) > ul:nth-child(1)\";\n                searchResult.hasNextPage = $(navSelector).length > 0 ? !$(navSelector).children().last().hasClass(\"active\") : false;\n                $(\".film_list-wrap > div.flw-item\").each((i, el)=>{\n                    var _a;\n                    const releaseDate = $(el).find(\"div.film-detail > div.fd-infor > span:nth-child(1)\").text();\n                    searchResult.results.push({\n                        id: (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1),\n                        title: $(el).find(\"div.film-detail > h2 > a\").attr(\"title\"),\n                        url: `${this.baseUrl}${$(el).find(\"div.film-poster > a\").attr(\"href\")}`,\n                        image: $(el).find(\"div.film-poster > img\").attr(\"data-src\"),\n                        releaseDate: isNaN(parseInt(releaseDate)) ? undefined : releaseDate,\n                        seasons: releaseDate.includes(\"SS\") ? parseInt(releaseDate.split(\"SS\")[1]) : undefined,\n                        type: $(el).find(\"div.film-detail > div.fd-infor > span.float-right\").text() === \"Movie\" ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES\n                    });\n                });\n                return searchResult;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param mediaId media link or id\n         */ this.fetchMediaInfo = async (mediaId)=>{\n            var _a;\n            if (!mediaId.startsWith(this.baseUrl)) {\n                mediaId = `${this.baseUrl}/${mediaId}`;\n            }\n            const movieInfo = {\n                id: mediaId.split(\"to/\").pop(),\n                title: \"\",\n                url: mediaId\n            };\n            try {\n                const { data } = await this.client.get(mediaId);\n                const $ = (0, cheerio_1.load)(data);\n                const recommendationsArray = [];\n                $(\"div.movie_information > div.container > div.m_i-related > div.film-related > section.block_area > div.block_area-content > div.film_list-wrap > div.flw-item\").each((i, el)=>{\n                    var _a, _b, _c;\n                    recommendationsArray.push({\n                        id: (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1),\n                        title: $(el).find(\"div.film-detail > h3.film-name > a\").text(),\n                        image: $(el).find(\"div.film-poster > img\").attr(\"data-src\"),\n                        duration: (_b = $(el).find(\"div.film-detail > div.fd-infor > span.fdi-duration\").text().replace(\"m\", \"\")) !== null && _b !== void 0 ? _b : null,\n                        type: $(el).find(\"div.film-detail > div.fd-infor > span.fdi-type\").text().toLowerCase() === \"tv\" ? models_1.TvType.TVSERIES : (_c = models_1.TvType.MOVIE) !== null && _c !== void 0 ? _c : null\n                    });\n                });\n                const uid = $(\".watch_block\").attr(\"data-id\");\n                movieInfo.cover = (_a = $(\"div.w_b-cover\").attr(\"style\")) === null || _a === void 0 ? void 0 : _a.slice(22).replace(\")\", \"\").replace(\";\", \"\");\n                movieInfo.title = $(\".heading-name > a:nth-child(1)\").text();\n                movieInfo.image = $(\".m_i-d-poster > div:nth-child(1) > img:nth-child(1)\").attr(\"src\");\n                movieInfo.description = $(\".description\").text();\n                movieInfo.type = movieInfo.id.split(\"/\")[0] === \"tv\" ? models_1.TvType.TVSERIES : models_1.TvType.MOVIE;\n                movieInfo.releaseDate = $(\"div.row-line:nth-child(3)\").text().replace(\"Released: \", \"\").trim();\n                movieInfo.genres = $(\"div.row-line:nth-child(2) > a\").map((i, el)=>$(el).text().split(\"&\")).get().map((v)=>v.trim());\n                movieInfo.casts = $(\"div.row-line:nth-child(5) > a\").map((i, el)=>$(el).text()).get();\n                movieInfo.tags = $(\"div.row-line:nth-child(6) > h2\").map((i, el)=>$(el).text()).get();\n                movieInfo.production = $(\"div.row-line:nth-child(4) > a:nth-child(2)\").text();\n                movieInfo.country = $(\"div.row-line:nth-child(1) > a:nth-child(2)\").text();\n                movieInfo.duration = $(\"span.item:nth-child(3)\").text();\n                movieInfo.rating = parseFloat($(\"span.item:nth-child(2)\").text());\n                movieInfo.recommendations = recommendationsArray;\n                const ajaxReqUrl = (id, type, isSeasons = false)=>`${this.baseUrl}/ajax/${type === \"movie\" ? type : `v2/${type}`}/${isSeasons ? \"seasons\" : \"episodes\"}/${id}`;\n                if (movieInfo.type === models_1.TvType.TVSERIES) {\n                    const { data } = await this.client.get(ajaxReqUrl(uid, \"tv\", true));\n                    const $$ = (0, cheerio_1.load)(data);\n                    const seasonsIds = $$(\".dropdown-menu > a\").map((i, el)=>$(el).attr(\"data-id\")).get();\n                    movieInfo.episodes = [];\n                    let season = 1;\n                    for (const id of seasonsIds){\n                        const { data } = await this.client.get(ajaxReqUrl(id, \"season\"));\n                        const $$$ = (0, cheerio_1.load)(data);\n                        $$$(\".nav > li\").map((i, el)=>{\n                            var _a;\n                            const episode = {\n                                id: $$$(el).find(\"a\").attr(\"id\").split(\"-\")[1],\n                                title: $$$(el).find(\"a\").attr(\"title\"),\n                                number: parseInt($$$(el).find(\"a\").attr(\"title\").split(\":\")[0].slice(3).trim()),\n                                season: season,\n                                url: `${this.baseUrl}/ajax/v2/episode/servers/${$$$(el).find(\"a\").attr(\"id\").split(\"-\")[1]}`\n                            };\n                            (_a = movieInfo.episodes) === null || _a === void 0 ? void 0 : _a.push(episode);\n                        }).get();\n                        season++;\n                    }\n                } else {\n                    movieInfo.episodes = [\n                        {\n                            id: uid,\n                            title: movieInfo.title + \" Movie\",\n                            url: `${this.baseUrl}/ajax/movie/episodes/${uid}`\n                        }\n                    ];\n                }\n                return movieInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param episodeId episode id\n         * @param mediaId media id\n         * @param server server type (default `VidCloud`) (optional)\n         */ this.fetchEpisodeSources = async (episodeId, mediaId, server = models_1.StreamingServers.UpCloud)=>{\n            if (episodeId.startsWith(\"http\")) {\n                const serverUrl = new URL(episodeId);\n                switch(server){\n                    case models_1.StreamingServers.MixDrop:\n                        return {\n                            headers: {\n                                Referer: serverUrl.href\n                            },\n                            sources: await new extractors_1.MixDrop(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                    case models_1.StreamingServers.VidCloud:\n                        return Object.assign({\n                            headers: {\n                                Referer: serverUrl.href\n                            }\n                        }, await new extractors_1.VidCloud(this.proxyConfig, this.adapter).extract(serverUrl, true));\n                    case models_1.StreamingServers.UpCloud:\n                        return Object.assign({\n                            headers: {\n                                Referer: serverUrl.href\n                            }\n                        }, await new extractors_1.VidCloud(this.proxyConfig, this.adapter).extract(serverUrl));\n                    default:\n                        return {\n                            headers: {\n                                Referer: serverUrl.href\n                            },\n                            sources: await new extractors_1.MixDrop(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                }\n            }\n            try {\n                const servers = await this.fetchEpisodeServers(episodeId, mediaId);\n                const i = servers.findIndex((s)=>s.name === server);\n                if (i === -1) {\n                    throw new Error(`Server ${server} not found`);\n                }\n                const { data } = await this.client.get(`${this.baseUrl}/ajax/get_link/${servers[i].url.split(\".\").slice(-1).shift()}`);\n                const serverUrl = new URL(data.link);\n                return await this.fetchEpisodeSources(serverUrl.href, mediaId, server);\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param episodeId takes episode link or movie id\n         * @param mediaId takes movie link or id (found on movie info object)\n         */ this.fetchEpisodeServers = async (episodeId, mediaId)=>{\n            if (!episodeId.startsWith(this.baseUrl + \"/ajax\") && !mediaId.includes(\"movie\")) episodeId = `${this.baseUrl}/ajax/v2/episode/servers/${episodeId}`;\n            else episodeId = `${this.baseUrl}/ajax/movie/episodes/${episodeId}`;\n            try {\n                const { data } = await this.client.get(episodeId);\n                const $ = (0, cheerio_1.load)(data);\n                const servers = $(\".nav > li\").map((i, el)=>{\n                    const server = {\n                        name: mediaId.includes(\"movie\") ? $(el).find(\"a\").attr(\"title\").toLowerCase() : $(el).find(\"a\").attr(\"title\").slice(6).trim().toLowerCase(),\n                        url: `${this.baseUrl}/${mediaId}.${!mediaId.includes(\"movie\") ? $(el).find(\"a\").attr(\"data-id\") : $(el).find(\"a\").attr(\"data-linkid\")}`.replace(!mediaId.includes(\"movie\") ? /\\/tv\\// : /\\/movie\\//, !mediaId.includes(\"movie\") ? \"/watch-tv/\" : \"/watch-movie/\")\n                    };\n                    return server;\n                }).get();\n                return servers;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchRecentMovies = async ()=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/home`);\n                const $ = (0, cheerio_1.load)(data);\n                const movies = $('section.block_area:contains(\"Latest Movies\") > div:nth-child(2) > div:nth-child(1) > div.flw-item').map((i, el)=>{\n                    var _a;\n                    const releaseDate = $(el).find(\"div.film-detail > div.fd-infor > span:nth-child(1)\").text();\n                    const movie = {\n                        id: (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1),\n                        title: $(el).find(\"div.film-detail > h3.film-name > a\").attr(\"title\"),\n                        url: `${this.baseUrl}${$(el).find(\"div.film-poster > a\").attr(\"href\")}`,\n                        image: $(el).find(\"div.film-poster > img\").attr(\"data-src\"),\n                        releaseDate: isNaN(parseInt(releaseDate)) ? undefined : releaseDate,\n                        duration: $(el).find(\"div.film-detail > div.fd-infor > span.fdi-duration\").text() || null,\n                        type: $(el).find(\"div.film-detail > div.fd-infor > span.float-right\").text() === \"Movie\" ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES\n                    };\n                    return movie;\n                }).get();\n                return movies;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchRecentTvShows = async ()=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/home`);\n                const $ = (0, cheerio_1.load)(data);\n                const tvshows = $('section.block_area:contains(\"Latest TV Shows\") > div:nth-child(2) > div:nth-child(1) > div.flw-item').map((i, el)=>{\n                    var _a;\n                    const tvshow = {\n                        id: (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1),\n                        title: $(el).find(\"div.film-detail > h3.film-name > a\").attr(\"title\"),\n                        url: `${this.baseUrl}${$(el).find(\"div.film-poster > a\").attr(\"href\")}`,\n                        image: $(el).find(\"div.film-poster > img\").attr(\"data-src\"),\n                        season: $(el).find(\"div.film-detail > div.fd-infor > span:nth-child(1)\").text(),\n                        latestEpisode: $(el).find(\"div.film-detail > div.fd-infor > span:nth-child(3)\").text() || null,\n                        type: $(el).find(\"div.film-detail > div.fd-infor > span.float-right\").text() === \"Movie\" ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES\n                    };\n                    return tvshow;\n                }).get();\n                return tvshows;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchTrendingMovies = async ()=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/home`);\n                const $ = (0, cheerio_1.load)(data);\n                const movies = $(\"div#trending-movies div.film_list-wrap div.flw-item\").map((i, el)=>{\n                    var _a;\n                    const releaseDate = $(el).find(\"div.film-detail > div.fd-infor > span:nth-child(1)\").text();\n                    const movie = {\n                        id: (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1),\n                        title: $(el).find(\"div.film-detail > h3.film-name > a\").attr(\"title\"),\n                        url: `${this.baseUrl}${$(el).find(\"div.film-poster > a\").attr(\"href\")}`,\n                        image: $(el).find(\"div.film-poster > img\").attr(\"data-src\"),\n                        releaseDate: isNaN(parseInt(releaseDate)) ? undefined : releaseDate,\n                        duration: $(el).find(\"div.film-detail > div.fd-infor > span.fdi-duration\").text() || null,\n                        type: $(el).find(\"div.film-detail > div.fd-infor > span.float-right\").text() === \"Movie\" ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES\n                    };\n                    return movie;\n                }).get();\n                return movies;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchTrendingTvShows = async ()=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/home`);\n                const $ = (0, cheerio_1.load)(data);\n                const tvshows = $(\"div#trending-tv div.film_list-wrap div.flw-item\").map((i, el)=>{\n                    var _a;\n                    const tvshow = {\n                        id: (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1),\n                        title: $(el).find(\"div.film-detail > h3.film-name > a\").attr(\"title\"),\n                        url: `${this.baseUrl}${$(el).find(\"div.film-poster > a\").attr(\"href\")}`,\n                        image: $(el).find(\"div.film-poster > img\").attr(\"data-src\"),\n                        season: $(el).find(\"div.film-detail > div.fd-infor > span:nth-child(1)\").text(),\n                        latestEpisode: $(el).find(\"div.film-detail > div.fd-infor > span:nth-child(3)\").text() || null,\n                        type: $(el).find(\"div.film-detail > div.fd-infor > span.float-right\").text() === \"Movie\" ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES\n                    };\n                    return tvshow;\n                }).get();\n                return tvshows;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\n// (async () => {\n//   const movie = new FlixHQ();\n//   const search = await movie.search('the flash');\n//   // const movieInfo = await movie.fetchEpisodeSources('1168337', 'tv/watch-vincenzo-67955');\n//   // const recentTv = await movie.fetchTrendingTvShows();\n//   console.log(search);\n// })();\nexports[\"default\"] = FlixHQ; //# sourceMappingURL=flixhq.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/flixhq.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/fmovies.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/fmovies.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils/utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/utils.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst extractors_1 = __webpack_require__(/*! ../../extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nclass Fmovies extends models_1.MovieParser {\n    constructor(fmoviesResolver, proxyConfig, apiKey, adapter){\n        super(proxyConfig && proxyConfig.url ? proxyConfig : undefined, adapter);\n        this.name = \"Fmovies\";\n        this.baseUrl = \"https://fmovies.to\";\n        this.logo = \"https://s1.bunnycdn.ru/assets/sites/fmovies/logo2.png\";\n        this.classPath = \"MOVIES.Fmovies\";\n        this.supportedTypes = new Set([\n            models_1.TvType.MOVIE,\n            models_1.TvType.TVSERIES\n        ]);\n        this.fmoviesResolver = \"\";\n        this.apiKey = \"\";\n        /**\n         *\n         * @param query search query string\n         * @param page page number (default 1) (optional)\n         */ this.search = async (query, page = 1)=>{\n            var _a;\n            const searchResult = {\n                currentPage: page,\n                hasNextPage: false,\n                results: []\n            };\n            try {\n                query = query.replace(/[\\W_]+/g, \"+\");\n                const vrf = await this.ev(query);\n                const { data } = await this.client.get(`${this.baseUrl}/search?keyword=${query}&vrf=${vrf}&page=${page}`);\n                const $ = (0, cheerio_1.load)(data);\n                searchResult.hasNextPage = (_a = $(\".pagination\")) === null || _a === void 0 ? void 0 : _a.find(\".active\").next().hasClass(\"disabled\");\n                $(\".filmlist > div.item\").each((i, el)=>{\n                    const releaseDate = $(el).find(\".meta\").text();\n                    searchResult.results.push({\n                        id: $(el).find(\"a.title\").attr(\"href\").slice(1),\n                        title: $(el).find(\"a.title\").text(),\n                        url: `${this.baseUrl}/${$(el).find(\"a.title\").attr(\"href\").slice(1)}`,\n                        image: $(el).find(\"img\").attr(\"src\"),\n                        releaseDate: isNaN(parseInt(releaseDate)) ? undefined : parseInt(releaseDate).toString(),\n                        seasons: releaseDate.includes(\"SS\") ? parseInt(releaseDate.split(\"SS\")[1]) : undefined,\n                        type: $(el).find(\"i.type\").text() === \"Movie\" ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES\n                    });\n                });\n                return searchResult;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param mediaId media link or id\n         */ this.fetchMediaInfo = async (mediaId)=>{\n            var _a, _b, _c, _d, _e, _f;\n            if (!mediaId.startsWith(this.baseUrl)) {\n                mediaId = `${this.baseUrl}/${mediaId}`;\n            }\n            const movieInfo = {\n                id: mediaId.split(\"to/\").pop(),\n                title: \"\",\n                url: mediaId\n            };\n            try {\n                const { data } = await this.client.get(mediaId);\n                const $ = (0, cheerio_1.load)(data);\n                const uid = $(\"#watch\").attr(\"data-id\");\n                // TODO\n                // const recommendationsArray: IMovieResult[] = [];\n                // $(\n                //     'div.movie_information > div.container > div.m_i-related > div.film-related > section.block_area > div.block_area-content > div.film_list-wrap > div.flw-item'\n                // ).each((i, el) => {\n                //     recommendationsArray.push({\n                //         id: $(el).find('div.film-poster > a').attr('href')?.slice(1)!,\n                //         title: $(el).find('div.film-detail > h3.film-name > a').text(),\n                //         image: $(el).find('div.film-poster > img').attr('data-src'),\n                //         duration:\n                //             $(el).find('div.film-detail > div.fd-infor > span.fdi-duration').text().replace('m', '') ?? null,\n                //         type:\n                //             $(el).find('div.film-detail > div.fd-infor > span.fdi-type').text().toLowerCase() === 'tv'\n                //                 ? TvType.TVSERIES\n                //                 : TvType.MOVIE ?? null,\n                //     });\n                // });\n                const container = $(\".watch-extra\");\n                movieInfo.cover = (0, utils_1.substringBeforeLast)((0, utils_1.substringAfter)((_b = (_a = $(\"#watch\").find(\".play\")) === null || _a === void 0 ? void 0 : _a.attr(\"style\")) !== null && _b !== void 0 ? _b : \"\", \"url(\"), \")\");\n                movieInfo.title = container.find(`h1[itemprop=\"name\"]`).text();\n                movieInfo.image = container.find(`img[itemprop=\"image\"]`).attr(\"src\");\n                movieInfo.description = (_d = (_c = container.find('div[itemprop=\"description\"]')) === null || _c === void 0 ? void 0 : _c.text()) === null || _d === void 0 ? void 0 : _d.trim();\n                movieInfo.type = movieInfo.id.split(\"/\")[0] === \"series\" ? models_1.TvType.TVSERIES : models_1.TvType.MOVIE;\n                movieInfo.releaseDate = (_f = (_e = container.find('span[itemprop=\"dateCreated\"]')) === null || _e === void 0 ? void 0 : _e.text()) === null || _f === void 0 ? void 0 : _f.trim();\n                // TODO\n                // movieInfo.genres = $('div.row-line:nth-child(2) > a')\n                //     .map((i, el) => $(el).text().split('&'))\n                //     .get()\n                //     .map(v => v.trim());\n                // movieInfo.casts = $('div.row-line:nth-child(5) > a')\n                //     .map((i, el) => $(el).text())\n                //     .get();\n                // movieInfo.tags = $('div.row-line:nth-child(6) > h2')\n                //     .map((i, el) => $(el).text())\n                //     .get();\n                // movieInfo.production = $('div.row-line:nth-child(4) > a:nth-child(2)').text();\n                // movieInfo.country = $('div.row-line:nth-child(1) > a:nth-child(2)').text();\n                // movieInfo.duration = $('span.item:nth-child(3)').text();\n                // movieInfo.rating = parseFloat($('span.item:nth-child(2)').text());\n                // movieInfo.recommendations = recommendationsArray as any;\n                const ajaxData = (await this.client.get(await this.ajaxReqUrl(uid))).data;\n                const $$ = (0, cheerio_1.load)(ajaxData.html);\n                movieInfo.episodes = [];\n                $$(\".episode\").each((i, el)=>{\n                    var _a, _b, _c, _d, _e;\n                    const episode = {\n                        id: $(el).find(\"a\").attr(\"data-kname\"),\n                        title: (_b = (_a = $(el).find(\"a\")) === null || _a === void 0 ? void 0 : _a.attr(\"title\")) !== null && _b !== void 0 ? _b : \"\"\n                    };\n                    if (movieInfo.type === models_1.TvType.TVSERIES) {\n                        episode.number = parseInt((_c = $(el).find(\"a\")) === null || _c === void 0 ? void 0 : _c.attr(\"data-kname\").split(\"-\")[1]);\n                        episode.season = parseInt((_d = $(el).find(\"a\")) === null || _d === void 0 ? void 0 : _d.attr(\"data-kname\").split(\"-\")[0]);\n                    }\n                    (_e = movieInfo.episodes) === null || _e === void 0 ? void 0 : _e.push(episode);\n                });\n                return movieInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param episodeId episode id\n         * @param mediaId media id\n         * @param server server type (default `Vizcloud`) (optional)\n         */ this.fetchEpisodeSources = async (episodeId, mediaId, server = models_1.StreamingServers.VizCloud)=>{\n            if (episodeId.startsWith(\"http\")) {\n                const serverUrl = new URL(episodeId);\n                switch(server){\n                    case models_1.StreamingServers.StreamTape:\n                        return {\n                            headers: {\n                                Referer: serverUrl.href\n                            },\n                            sources: await new extractors_1.StreamTape().extract(serverUrl)\n                        };\n                    default:\n                        return {\n                            headers: {\n                                Referer: serverUrl.href\n                            },\n                            sources: await new extractors_1.VizCloud().extract(serverUrl, this.fmoviesResolver, this.apiKey)\n                        };\n                }\n            }\n            try {\n                const servers = await this.fetchEpisodeServers(episodeId, mediaId);\n                const selectedServer = servers.find((s)=>s.name === server);\n                if (!selectedServer) {\n                    throw new Error(`Server ${server} not found`);\n                }\n                const { data } = await this.client.get(`${this.baseUrl}/ajax/episode/info?id=${selectedServer.url}`);\n                const serverUrl = new URL(await this.decrypt(data.url));\n                return await this.fetchEpisodeSources(serverUrl.href, mediaId, server);\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param episodeId takes episode link or movie id\n         * @param mediaId takes movie link or id (found on movie info object)\n         */ this.fetchEpisodeServers = async (episodeId, mediaId)=>{\n            if (!mediaId.startsWith(this.baseUrl)) {\n                mediaId = `${this.baseUrl}/${mediaId}`;\n            }\n            try {\n                const { data } = await this.client.get(mediaId);\n                const $ = (0, cheerio_1.load)(data);\n                const uid = $(\"#watch\").attr(\"data-id\");\n                const epsiodeServers = [];\n                const ajaxData = (await this.client.get(await this.ajaxReqUrl(uid))).data;\n                const $$ = (0, cheerio_1.load)(ajaxData.html);\n                const servers = {};\n                $$(\".server\").each((i, el)=>{\n                    const serverId = $(el).attr(\"data-id\");\n                    let serverName = $(el).text().toLowerCase().split(\"server\")[1].trim();\n                    if (serverName == \"vidstream\") {\n                        serverName = \"vizcloud\";\n                    }\n                    servers[serverId] = serverName;\n                });\n                const el = $$(`a[data-kname=\"${episodeId}\"]`);\n                try {\n                    const serverString = JSON.parse(el.attr(\"data-ep\"));\n                    for(const serverId in serverString){\n                        epsiodeServers.push({\n                            name: servers[serverId],\n                            url: serverString[serverId]\n                        });\n                    }\n                    return epsiodeServers;\n                } catch (err) {\n                    console.log(err);\n                    throw new Error(\"Episode not found\");\n                }\n            } catch (err) {\n                throw new Error(\"Episode not found\");\n            }\n        };\n        this.fmoviesResolver = fmoviesResolver !== null && fmoviesResolver !== void 0 ? fmoviesResolver : this.fmoviesResolver;\n        this.apiKey = apiKey !== null && apiKey !== void 0 ? apiKey : this.apiKey;\n    }\n    async ev(query) {\n        const { data } = await this.client.get(`${this.fmoviesResolver}/fmovies-vrf?query=${encodeURIComponent(query)}&apikey=${this.apiKey}`);\n        return encodeURIComponent(data.url);\n    }\n    async decrypt(query) {\n        const { data } = await this.client.get(`${this.fmoviesResolver}/fmovies-decrypt?query=${encodeURIComponent(query)}&apikey=${this.apiKey}`);\n        return data.url;\n    }\n    async ajaxReqUrl(id) {\n        const vrf = await this.ev(id);\n        return `${this.baseUrl}/ajax/film/servers?id=${id}&vrf=${vrf}&token=`;\n    }\n}\n// (async () => {\n//     const movie = new Fmovies(\"https://9anime.enimax.xyz\", {url: \"https://proxy.vnxservers.com/\"}, \"848624aaffec43808c86f5e47e3fa5b0\");\n//     const search = await movie.search('friends');\n//     // const search = await movie.fetchMediaInfo('series/friends-3rvj9');\n//     // const search = await movie.fetchMediaInfo('movie/chimes-at-midnight-1qvnw');\n//     // const search = await movie.fetchEpisodeSources('1-full','movie/chimes-at-midnight-1qvnw');\n//     // const search = await movie.fetchMediaInfo('series/friends-3rvj9');\n//     // console.log(JSON.stringify(movieInfo));\n//     console.log(\n//         search\n//     );\n//     // const recentTv = await movie.fetchTrendingTvShows();\n//     // console.log(search);\n// })();\nexports[\"default\"] = Fmovies; //# sourceMappingURL=fmovies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/fmovies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/goku.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/goku.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst extractors_1 = __webpack_require__(/*! ../../extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nclass Goku extends models_1.MovieParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"Goku\";\n        this.baseUrl = \"https://goku.sx\";\n        this.logo = \"https://img.goku.sx/xxrz/400x400/100/9c/e7/9ce7510639c4204bfe43904fad8f361f/9ce7510639c4204bfe43904fad8f361f.png\";\n        this.classPath = \"MOVIES.Goku\";\n        this.supportedTypes = new Set([\n            models_1.TvType.MOVIE,\n            models_1.TvType.TVSERIES\n        ]);\n        /**\n         *\n         * @param query search query string\n         * @param page page number (default 1) (optional)\n         */ this.search = async (query, page = 1)=>{\n            const searchResult = {\n                currentPage: page,\n                hasNextPage: false,\n                results: []\n            };\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/search?keyword=${query.replace(/[\\W_]+/g, \"-\")}&page=${page}`);\n                const $ = (0, cheerio_1.load)(data);\n                searchResult.hasNextPage = $(\".page-link\").length > 0 ? $(\".page-link\").last().attr(\"title\") === \"Last\" : false;\n                $(\"div.section-items > div.item\").each((i, el)=>{\n                    var _a, _b, _c, _d;\n                    const releaseDate = $(el).find(\"div.movie-info div.info-split > div:nth-child(1)\").text();\n                    const rating = $(el).find(\"div.movie-info div.info-split div.is-rated\").text();\n                    searchResult.results.push({\n                        id: (_b = (_a = $(el).find(\".is-watch > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.replace(\"/\", \"\")) !== null && _b !== void 0 ? _b : \"\",\n                        title: $(el).find(\"div.movie-info h3.movie-name\").text(),\n                        url: `${this.baseUrl}${$(el).find(\".is-watch > a\").attr(\"href\")}`,\n                        image: $(el).find(\"div.movie-thumbnail > a > img\").attr(\"src\"),\n                        releaseDate: isNaN(parseInt(releaseDate)) ? undefined : releaseDate,\n                        rating: isNaN(parseInt(rating)) ? undefined : parseFloat(rating),\n                        type: ((_d = (_c = $(el).find(\".is-watch > a\").attr(\"href\")) === null || _c === void 0 ? void 0 : _c.indexOf(\"watch-series\")) !== null && _d !== void 0 ? _d : -1 > -1) ? models_1.TvType.TVSERIES : models_1.TvType.MOVIE\n                    });\n                });\n                return searchResult;\n            // const { data } = await this.client.get(\n            //   `${this.baseUrl}/ajax/movie/search?keyword=${query.replace(/[\\W_]+/g, '-')}&page=${page}`\n            // );\n            // const $ = load(data);\n            // $('div.item').each((i, ele) => {\n            //   const url = $(ele).find('a')?.attr('href');\n            //   const releaseDate = $(ele).find('div.info-split > div:first-child').text();\n            //   const rating = $(ele).find('.is-rated').text();\n            //   searchResult.results.push({\n            //     id: url?.replace(this.baseUrl, '') ?? '',\n            //     title: $(ele).find('h3.movie-name').text(),\n            //     releaseDate: isNaN(parseInt(releaseDate)) ? undefined : releaseDate,\n            //     image: $(ele).find('div.movie-thumbnail > a > img').attr('src'),\n            //     rating: isNaN(parseInt(rating)) ? undefined : parseFloat(rating),\n            //     type: releaseDate.toLocaleLowerCase() !== 'tv' ? TvType.MOVIE : TvType.TVSERIES,\n            //   });\n            // });\n            // return searchResult;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param mediaId media link or id\n         */ this.fetchMediaInfo = async (mediaId)=>{\n            if (mediaId.startsWith(this.baseUrl)) {\n                mediaId = mediaId.replace(this.baseUrl + \"/\", \"\");\n            }\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/${mediaId}`);\n                const $ = (0, cheerio_1.load)(data);\n                const mediaInfo = {\n                    id: mediaId,\n                    title: \"\",\n                    url: `${this.baseUrl}/${mediaId}`\n                };\n                mediaInfo.title = $(\"div.movie-detail > div.is-name > h3\").text();\n                mediaInfo.image = $(\".movie-thumbnail > img\").attr(\"src\");\n                mediaInfo.description = $(\".is-description > .text-cut\").text();\n                mediaInfo.type = mediaId.indexOf(\"watch-series\") > -1 ? models_1.TvType.TVSERIES : models_1.TvType.MOVIE;\n                mediaInfo.genres = $(\"div.name:contains('Genres:')\").siblings().find(\"a\").map((i, el)=>$(el).text()).get();\n                mediaInfo.casts = $(\"div.name:contains('Cast:')\").siblings().find(\"a\").map((i, el)=>$(el).text()).get();\n                mediaInfo.production = $(\"div.name:contains('Production:')\").siblings().find(\"a\").map((i, el)=>$(el).text()).get().join();\n                mediaInfo.duration = $(\"div.name:contains('Duration:')\").siblings().text().split(\"\\n\").join(\"\").trim();\n                if (mediaInfo.type === models_1.TvType.TVSERIES) {\n                    const { data } = await this.client.get(`${this.baseUrl}/ajax/movie/seasons/${mediaInfo.id.split(\"-\").pop()}`);\n                    const $$ = (0, cheerio_1.load)(data);\n                    const seasonsIds = $$(\".dropdown-menu > a\").map((i, el)=>{\n                        const seasonsId = $(el).text().replace(\"Season\", \"\").trim();\n                        return {\n                            id: $(el).attr(\"data-id\"),\n                            season: isNaN(parseInt(seasonsId)) ? undefined : parseInt(seasonsId)\n                        };\n                    }).get();\n                    mediaInfo.episodes = [];\n                    for (const season of seasonsIds){\n                        const { data } = await this.client.get(`${this.baseUrl}/ajax/movie/season/episodes/${season.id}`);\n                        const $$$ = (0, cheerio_1.load)(data);\n                        $$$(\".item\").map((i, el)=>{\n                            var _a, _b, _c, _d, _e;\n                            const episode = {\n                                id: (_a = $$$(el).find(\"a\").attr(\"data-id\")) !== null && _a !== void 0 ? _a : \"\",\n                                title: (_b = $$$(el).find(\"a\").attr(\"title\")) !== null && _b !== void 0 ? _b : \"\",\n                                number: parseInt((_d = (_c = $$$(el).find(\"a\").text()) === null || _c === void 0 ? void 0 : _c.split(\":\")[0].trim().substring(3)) !== null && _d !== void 0 ? _d : \"\"),\n                                season: season.season,\n                                url: $$$(el).find(\"a\").attr(\"href\")\n                            };\n                            (_e = mediaInfo.episodes) === null || _e === void 0 ? void 0 : _e.push(episode);\n                        }).get();\n                    }\n                } else {\n                    mediaInfo.episodes = [];\n                    $(\"meta\").map((i, ele)=>{\n                        var _a, _b, _c;\n                        if ($(ele).attr(\"property\") === \"og:url\") {\n                            const episode = {\n                                id: (_b = (_a = $(ele).attr(\"content\")) === null || _a === void 0 ? void 0 : _a.split(\"/\").pop()) !== null && _b !== void 0 ? _b : \"\",\n                                title: mediaInfo.title.toString(),\n                                url: $(ele).attr(\"content\")\n                            };\n                            (_c = mediaInfo.episodes) === null || _c === void 0 ? void 0 : _c.push(episode);\n                        }\n                    });\n                }\n                return mediaInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param episodeId episode id\n         * @param mediaId media id\n         * @param server server type (default `VidCloud`) (optional)\n         */ this.fetchEpisodeSources = async (episodeId, mediaId, server = models_1.StreamingServers.UpCloud)=>{\n            if (episodeId.startsWith(\"http\")) {\n                const serverUrl = new URL(episodeId);\n                switch(server){\n                    case models_1.StreamingServers.MixDrop:\n                        return {\n                            headers: {\n                                Referer: serverUrl.href\n                            },\n                            sources: await new extractors_1.MixDrop(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                    case models_1.StreamingServers.VidCloud:\n                        return Object.assign({\n                            headers: {\n                                Referer: serverUrl.href\n                            }\n                        }, await new extractors_1.VidCloud(this.proxyConfig, this.adapter).extract(serverUrl, true));\n                    case models_1.StreamingServers.UpCloud:\n                        return Object.assign({\n                            headers: {\n                                Referer: serverUrl.href\n                            }\n                        }, await new extractors_1.VidCloud(this.proxyConfig, this.adapter).extract(serverUrl));\n                    default:\n                        return {\n                            headers: {\n                                Referer: serverUrl.href\n                            },\n                            sources: await new extractors_1.MixDrop(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                }\n            }\n            try {\n                const servers = await this.fetchEpisodeServers(episodeId, mediaId);\n                const i = servers.findIndex((s)=>s.name.toLowerCase() === server.toLowerCase());\n                if (i === -1) {\n                    throw new Error(`Server ${server} not found`);\n                }\n                const serverUrl = new URL(servers.filter((s)=>s.name.toLowerCase() === server.toLowerCase())[0].url);\n                return await this.fetchEpisodeSources(serverUrl.href, mediaId, server);\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param episodeId takes episode link or movie id\n         * @param mediaId takes movie link or id (found on movie info object)\n         */ this.fetchEpisodeServers = async (episodeId, mediaId)=>{\n            try {\n                const epsiodeServers = [];\n                const { data } = await this.client.get(`${this.baseUrl}/ajax/movie/episode/servers/${episodeId}`);\n                const $ = (0, cheerio_1.load)(data);\n                const servers = $(\".dropdown-menu > a\").map((i, ele)=>{\n                    var _a;\n                    return {\n                        name: $(ele).text(),\n                        id: (_a = $(ele).attr(\"data-id\")) !== null && _a !== void 0 ? _a : \"\"\n                    };\n                }).get();\n                for (const server of servers){\n                    const { data } = await this.client.get(`${this.baseUrl}/ajax/movie/episode/server/sources/${server.id}`);\n                    epsiodeServers.push({\n                        name: server.name,\n                        url: data.data.link\n                    });\n                }\n                return epsiodeServers;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchRecentMovies = async ()=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/home`);\n                const $ = (0, cheerio_1.load)(data);\n                const movies = $(\".section-last\").first().find(\".item\").map((i, ele)=>{\n                    var _a, _b, _c;\n                    const releaseDate = $(ele).find(\".info-split\").children().first().text();\n                    const movie = {\n                        id: (_a = $(ele).find(\".is-watch > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.replace(\"/\", \"\"),\n                        title: $(ele).find(\".movie-name\").text(),\n                        url: `${this.baseUrl}${$(ele).find(\".is-watch > a\").attr(\"href\")}`,\n                        image: $(ele).find(\".movie-thumbnail > a > img\").attr(\"src\"),\n                        releaseDate: isNaN(parseInt(releaseDate)) ? undefined : releaseDate,\n                        duration: $(ele).find(\".info-split > div:nth-child(3)\").text(),\n                        type: ((_c = (_b = $(ele).find(\".is-watch > a\").attr(\"href\")) === null || _b === void 0 ? void 0 : _b.indexOf(\"watch-movie\")) !== null && _c !== void 0 ? _c : -1 > -1) ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES\n                    };\n                    return movie;\n                }).get();\n                return movies;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchRecentTvShows = async ()=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/home`);\n                const $ = (0, cheerio_1.load)(data);\n                const tvShowes = $(\".section-last\").last().find(\".item\").map((i, ele)=>{\n                    var _a, _b, _c;\n                    const tvshow = {\n                        id: (_a = $(ele).find(\".is-watch > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.replace(\"/\", \"\"),\n                        title: $(ele).find(\".movie-name\").text(),\n                        url: `${this.baseUrl}${$(ele).find(\".is-watch > a\").attr(\"href\")}`,\n                        image: $(ele).find(\".movie-thumbnail > a > img\").attr(\"src\"),\n                        season: $(ele).find(\".info-split > div:nth-child(2)\").text().split(\"/\")[0].replace(\"SS \", \"\").trim(),\n                        latestEpisode: $(ele).find(\".info-split > div:nth-child(2)\").text().split(\"/\")[1].replace(\"EPS \", \"\").trim(),\n                        type: ((_c = (_b = $(ele).find(\".is-watch > a\").attr(\"href\")) === null || _b === void 0 ? void 0 : _b.indexOf(\"watch-series\")) !== null && _c !== void 0 ? _c : -1 > -1) ? models_1.TvType.TVSERIES : models_1.TvType.MOVIE\n                    };\n                    return tvshow;\n                }).get();\n                return tvShowes;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchTrendingMovies = async ()=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/home`);\n                const $ = (0, cheerio_1.load)(data);\n                const movies = $(\"#trending-movies\").find(\".item\").map((i, ele)=>{\n                    var _a, _b, _c;\n                    const releaseDate = $(ele).find(\".info-split\").children().first().text();\n                    const movie = {\n                        id: (_a = $(ele).find(\".is-watch > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.replace(\"/\", \"\"),\n                        title: $(ele).find(\".movie-name\").text(),\n                        url: `${this.baseUrl}${$(ele).find(\".is-watch > a\").attr(\"href\")}`,\n                        image: $(ele).find(\".movie-thumbnail > a > img\").attr(\"src\"),\n                        releaseDate: isNaN(parseInt(releaseDate)) ? undefined : releaseDate,\n                        duration: $(ele).find(\".info-split > div:nth-child(3)\").text(),\n                        type: ((_c = (_b = $(ele).find(\".is-watch > a\").attr(\"href\")) === null || _b === void 0 ? void 0 : _b.indexOf(\"watch-movie\")) !== null && _c !== void 0 ? _c : -1 > -1) ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES\n                    };\n                    return movie;\n                }).get();\n                return movies;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchTrendingTvShows = async ()=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/home`);\n                const $ = (0, cheerio_1.load)(data);\n                const tvShowes = $(\"#trending-series\").find(\".item\").map((i, ele)=>{\n                    var _a, _b, _c;\n                    const tvshow = {\n                        id: (_a = $(ele).find(\".is-watch > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.replace(\"/\", \"\"),\n                        title: $(ele).find(\".movie-name\").text(),\n                        url: `${this.baseUrl}${$(ele).find(\".is-watch > a\").attr(\"href\")}`,\n                        image: $(ele).find(\".movie-thumbnail > a > img\").attr(\"src\"),\n                        season: $(ele).find(\".info-split > div:nth-child(2)\").text().split(\"/\")[0].replace(\"SS \", \"\").trim(),\n                        latestEpisode: $(ele).find(\".info-split > div:nth-child(2)\").text().split(\"/\")[1].replace(\"EPS \", \"\").trim(),\n                        type: ((_c = (_b = $(ele).find(\".is-watch > a\").attr(\"href\")) === null || _b === void 0 ? void 0 : _b.indexOf(\"watch-series\")) !== null && _c !== void 0 ? _c : -1 > -1) ? models_1.TvType.TVSERIES : models_1.TvType.MOVIE\n                    };\n                    return tvshow;\n                }).get();\n                return tvShowes;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = Goku; //# sourceMappingURL=goku.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/goku.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/index.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/index.js ***!
  \************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst dramacool_1 = __importDefault(__webpack_require__(/*! ./dramacool */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/dramacool.js\"));\nconst flixhq_1 = __importDefault(__webpack_require__(/*! ./flixhq */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/flixhq.js\"));\nconst fmovies_1 = __importDefault(__webpack_require__(/*! ./fmovies */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/fmovies.js\"));\nconst goku_1 = __importDefault(__webpack_require__(/*! ./goku */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/goku.js\"));\nconst kissasian_1 = __importDefault(__webpack_require__(/*! ./kissasian */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/kissasian.js\"));\nconst movidhdwatch_1 = __importDefault(__webpack_require__(/*! ./movidhdwatch */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/movidhdwatch.js\"));\nconst smashystream_1 = __importDefault(__webpack_require__(/*! ./smashystream */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/smashystream.js\"));\nconst viewAsian_1 = __importDefault(__webpack_require__(/*! ./viewAsian */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/viewAsian.js\"));\nexports[\"default\"] = {\n    DramaCool: dramacool_1.default,\n    FlixHQ: flixhq_1.default,\n    Fmovies: fmovies_1.default,\n    Goku: goku_1.default,\n    KissAsian: kissasian_1.default,\n    MovieHdWatch: movidhdwatch_1.default,\n    SmashyStream: smashystream_1.default,\n    ViewAsian: viewAsian_1.default\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL21vdmllcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsY0FBY1AsZ0JBQWdCUSxtQkFBT0EsQ0FBQywrSUFBYTtBQUN6RCxNQUFNQyxXQUFXVCxnQkFBZ0JRLG1CQUFPQSxDQUFDLHlJQUFVO0FBQ25ELE1BQU1FLFlBQVlWLGdCQUFnQlEsbUJBQU9BLENBQUMsMklBQVc7QUFDckQsTUFBTUcsU0FBU1gsZ0JBQWdCUSxtQkFBT0EsQ0FBQyxxSUFBUTtBQUMvQyxNQUFNSSxjQUFjWixnQkFBZ0JRLG1CQUFPQSxDQUFDLCtJQUFhO0FBQ3pELE1BQU1LLGlCQUFpQmIsZ0JBQWdCUSxtQkFBT0EsQ0FBQyxxSkFBZ0I7QUFDL0QsTUFBTU0saUJBQWlCZCxnQkFBZ0JRLG1CQUFPQSxDQUFDLHFKQUFnQjtBQUMvRCxNQUFNTyxjQUFjZixnQkFBZ0JRLG1CQUFPQSxDQUFDLCtJQUFhO0FBQ3pESCxrQkFBZSxHQUFHO0lBQ2RZLFdBQVdWLFlBQVlTLE9BQU87SUFDOUJFLFFBQVFULFNBQVNPLE9BQU87SUFDeEJHLFNBQVNULFVBQVVNLE9BQU87SUFDMUJJLE1BQU1ULE9BQU9LLE9BQU87SUFDcEJLLFdBQVdULFlBQVlJLE9BQU87SUFDOUJNLGNBQWNULGVBQWVHLE9BQU87SUFDcENPLGNBQWNULGVBQWVFLE9BQU87SUFDcENRLFdBQVdULFlBQVlDLE9BQU87QUFDbEMsR0FDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29uc3VtZXQrZXh0ZW5zaW9uc0AxLjUuNC9ub2RlX21vZHVsZXMvQGNvbnN1bWV0L2V4dGVuc2lvbnMvZGlzdC9wcm92aWRlcnMvbW92aWVzL2luZGV4LmpzP2E3YTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBkcmFtYWNvb2xfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9kcmFtYWNvb2xcIikpO1xuY29uc3QgZmxpeGhxXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZmxpeGhxXCIpKTtcbmNvbnN0IGZtb3ZpZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9mbW92aWVzXCIpKTtcbmNvbnN0IGdva3VfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9nb2t1XCIpKTtcbmNvbnN0IGtpc3Nhc2lhbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2tpc3Nhc2lhblwiKSk7XG5jb25zdCBtb3ZpZGhkd2F0Y2hfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tb3ZpZGhkd2F0Y2hcIikpO1xuY29uc3Qgc21hc2h5c3RyZWFtXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc21hc2h5c3RyZWFtXCIpKTtcbmNvbnN0IHZpZXdBc2lhbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3ZpZXdBc2lhblwiKSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgRHJhbWFDb29sOiBkcmFtYWNvb2xfMS5kZWZhdWx0LFxuICAgIEZsaXhIUTogZmxpeGhxXzEuZGVmYXVsdCxcbiAgICBGbW92aWVzOiBmbW92aWVzXzEuZGVmYXVsdCxcbiAgICBHb2t1OiBnb2t1XzEuZGVmYXVsdCxcbiAgICBLaXNzQXNpYW46IGtpc3Nhc2lhbl8xLmRlZmF1bHQsXG4gICAgTW92aWVIZFdhdGNoOiBtb3ZpZGhkd2F0Y2hfMS5kZWZhdWx0LFxuICAgIFNtYXNoeVN0cmVhbTogc21hc2h5c3RyZWFtXzEuZGVmYXVsdCxcbiAgICBWaWV3QXNpYW46IHZpZXdBc2lhbl8xLmRlZmF1bHQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRyYW1hY29vbF8xIiwicmVxdWlyZSIsImZsaXhocV8xIiwiZm1vdmllc18xIiwiZ29rdV8xIiwia2lzc2FzaWFuXzEiLCJtb3ZpZGhkd2F0Y2hfMSIsInNtYXNoeXN0cmVhbV8xIiwidmlld0FzaWFuXzEiLCJkZWZhdWx0IiwiRHJhbWFDb29sIiwiRmxpeEhRIiwiRm1vdmllcyIsIkdva3UiLCJLaXNzQXNpYW4iLCJNb3ZpZUhkV2F0Y2giLCJTbWFzaHlTdHJlYW0iLCJWaWV3QXNpYW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/kissasian.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/kissasian.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst extractors_1 = __webpack_require__(/*! ../../extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nclass KissAsian extends models_1.MovieParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"KissAsian\";\n        this.baseUrl = \"https://kissasian.mx\";\n        this.logo = \"https://kissasian.mx/Content/images/logo.png\";\n        this.classPath = \"MOVIES.KissAsian\";\n        this.supportedTypes = new Set([\n            models_1.TvType.MOVIE,\n            models_1.TvType.TVSERIES\n        ]);\n        this.search = async (query, page = 1)=>{\n            try {\n                const searchResult = {\n                    currentPage: page,\n                    hasNextPage: false,\n                    results: []\n                };\n                const response = await this.client.post(`${this.baseUrl}/Search/Drama`, `keyword=${query.replace(/[\\W_]+/g, \"-\")}`, {\n                    headers: {\n                        \"Content-Type\": \"application/x-www-form-urlencoded\"\n                    }\n                });\n                const $ = (0, cheerio_1.load)(response.data);\n                $(\"div.item-list > div.list\").each((i, el)=>{\n                    var _a;\n                    searchResult.results.push({\n                        id: (_a = $(el).find(\"div.info > p > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1),\n                        title: $(el).find(\"div.info > p > a\").text().trim(),\n                        url: `${this.baseUrl}${$(el).find(\"div.info > p > a\").attr(\"href\")}`,\n                        image: `${this.baseUrl}${$(el).find(\"div.cover > a > img\").attr(\"src\")}`\n                    });\n                });\n                if (searchResult.results.length === 0) {\n                    searchResult.results.push({\n                        id: response.request.res.responseUrl.replace(/https?:\\/\\/[^\\/]*\\/?/i, \"\"),\n                        title: $(\"div.content\").first().find(\"div.heading > h3\").text().trim(),\n                        url: response.request.res.responseUrl,\n                        image: `${this.baseUrl}${$(\"div.content\").first().find(\"div.cover > img\").attr(\"src\")}`\n                    });\n                }\n                return searchResult;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchMediaInfo = async (mediaId)=>{\n            var _a, _b;\n            try {\n                const realMediaId = mediaId;\n                if (!mediaId.startsWith(this.baseUrl)) mediaId = `${this.baseUrl}/${mediaId}`;\n                const mediaInfo = {\n                    id: \"\",\n                    title: \"\"\n                };\n                const { data } = await this.client.post(mediaId, {\n                    headers: {\n                        \"Content-Type\": \"application/x-www-form-urlencoded\"\n                    }\n                });\n                const $ = (0, cheerio_1.load)(data);\n                mediaInfo.id = realMediaId;\n                mediaInfo.title = $(\"div.content\").first().find(\"div.heading > h3\").text().trim();\n                mediaInfo.image = `${this.baseUrl}${$(\"div.content\").first().find(\"div.cover > img\").attr(\"src\")}`;\n                mediaInfo.otherNames = $(\"span:contains(Other name:)\").siblings().map((i, el)=>$(el).text().trim()).get();\n                mediaInfo.description = $(\"div.summary1 > p\").text().trim();\n                mediaInfo.releaseDate = (_a = $(\"span:contains(Date aired:)\").parent().text().split(\"Date aired:\").pop()) === null || _a === void 0 ? void 0 : _a.replace(/\\t/g, \"\").replace(/\\n/g, \"\").trim();\n                mediaInfo.genre = $(\"span:contains(Genres:)\").siblings(\"a\").map((i, el)=>$(el).text().trim()).get();\n                mediaInfo.country = $(\"span:contains(Country:)\").siblings(\"a\").text().trim();\n                switch((_b = $(\"span:contains(Status:)\").parent().text().split(\"Status:\").pop()) === null || _b === void 0 ? void 0 : _b.trim()){\n                    case \"Ongoing\":\n                        mediaInfo.status = models_1.MediaStatus.ONGOING;\n                        break;\n                    case \"Completed\":\n                        mediaInfo.status = models_1.MediaStatus.COMPLETED;\n                        break;\n                    case \"Cancelled\":\n                        mediaInfo.status = models_1.MediaStatus.CANCELLED;\n                        break;\n                    case \"Unknown\":\n                        mediaInfo.status = models_1.MediaStatus.UNKNOWN;\n                        break;\n                    default:\n                        mediaInfo.status = models_1.MediaStatus.UNKNOWN;\n                        break;\n                }\n                mediaInfo.episodes = [];\n                $(\"ul.list li.episodeSub\").each((i, el)=>{\n                    var _a, _b, _c, _d;\n                    (_a = mediaInfo.episodes) === null || _a === void 0 ? void 0 : _a.push({\n                        id: (_b = $(el).find(\"a\").attr(\"href\")) === null || _b === void 0 ? void 0 : _b.slice(1),\n                        title: $(el).find(\"a\").text().trim(),\n                        episode: (_d = (_c = $(el).find(\"a\").text()) === null || _c === void 0 ? void 0 : _c.split(\"Episode\").pop()) === null || _d === void 0 ? void 0 : _d.trim(),\n                        url: `${this.baseUrl}${$(el).find(\"a\").attr(\"href\")}`\n                    });\n                });\n                mediaInfo.episodes.reverse();\n                return mediaInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchEpisodeSources = async (episodeId, server = models_1.StreamingServers.Mp4Upload)=>{\n            if (episodeId.startsWith(\"http\")) {\n                const serverUrl = new URL(episodeId);\n                switch(server){\n                    case models_1.StreamingServers.VidMoly:\n                        return {\n                            sources: await new extractors_1.VidMoly(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                    case models_1.StreamingServers.StreamWish:\n                        return {\n                            sources: await new extractors_1.StreamWish(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                    case models_1.StreamingServers.Mp4Upload:\n                        return {\n                            sources: await new extractors_1.Mp4Upload(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                    default:\n                        throw new Error(\"Server not supported\");\n                }\n            }\n            try {\n                const servers = await this.fetchEpisodeServers(episodeId);\n                const i = servers.findIndex((s)=>s.name.toLowerCase() === server.toLowerCase());\n                if (i === -1) {\n                    throw new Error(`Server ${server} not found`);\n                }\n                const serverUrl = new URL(servers.filter((s)=>s.name.toLowerCase() === server.toLowerCase())[0].url);\n                return await this.fetchEpisodeSources(serverUrl.href, server);\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n    async fetchEpisodeServers(episodeId) {\n        try {\n            const episodeServers = [];\n            const { data } = await this.client.post(`${this.baseUrl}/${episodeId}`, {\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            });\n            const $ = (0, cheerio_1.load)(data);\n            episodeServers.push({\n                name: $(\"ul.mirrorTab > li > a.actived\").text().trim(),\n                url: $(\"iframe#mVideo\").attr(\"src\")\n            });\n            await Promise.all($(\"ul.mirrorTab > li > a.ign\").map(async (i, ele)=>{\n                const { data } = await this.client.post(`${this.baseUrl}${$(ele).attr(\"href\")}`, {\n                    headers: {\n                        \"Content-Type\": \"application/x-www-form-urlencoded\"\n                    }\n                });\n                const $$ = (0, cheerio_1.load)(data);\n                if ($$(\"ul.mirrorTab > li > a.actived\").text().trim()) {\n                    const url = $$(\"iframe#mVideo\").attr(\"src\");\n                    episodeServers.push({\n                        name: $$(\"ul.mirrorTab > li > a.actived\").text().trim(),\n                        url: url.startsWith(\"https\") ? url : url.replace(\"//\", \"https://\")\n                    });\n                }\n            }));\n            episodeServers.map((element)=>{\n                switch(element.name){\n                    case \"VM\":\n                        element.name = models_1.StreamingServers.VidMoly;\n                        break;\n                    case \"SW\":\n                        element.name = models_1.StreamingServers.StreamWish;\n                        break;\n                    case \"MP\":\n                        element.name = models_1.StreamingServers.Mp4Upload;\n                        break;\n                    default:\n                        break;\n                }\n            });\n            return episodeServers;\n        } catch (err) {\n            throw new Error(err.message);\n        }\n    }\n}\nexports[\"default\"] = KissAsian; //# sourceMappingURL=kissasian.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/kissasian.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/movidhdwatch.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/movidhdwatch.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst extractors_1 = __webpack_require__(/*! ../../extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nclass MovieHdWatch extends models_1.MovieParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"MovieHdWatch\";\n        this.baseUrl = \"https://movieshd.watch\";\n        this.logo = \"https://img.movieshd.watch/xxrz/400x400/100/ee/63/ee6317c38904ee048676164b0852207d/ee6317c38904ee048676164b0852207d.png\";\n        this.classPath = \"MOVIES.MovieHdWatch\";\n        this.supportedTypes = new Set([\n            models_1.TvType.MOVIE,\n            models_1.TvType.TVSERIES\n        ]);\n        /**\n         *\n         * @param query search query string\n         * @param page page number (default 1) (optional)\n         */ this.search = async (query, page = 1)=>{\n            const searchResult = {\n                currentPage: page,\n                hasNextPage: false,\n                results: []\n            };\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/search/${query.replace(/[\\W_]+/g, \"-\")}?page=${page}`);\n                const $ = (0, cheerio_1.load)(data);\n                const navSelector = \"div.pre-pagination:nth-child(3) > nav:nth-child(1) > ul:nth-child(1)\";\n                searchResult.hasNextPage = $(navSelector).length > 0 ? !$(navSelector).children().last().hasClass(\"active\") : false;\n                $(\".film_list-wrap > div.flw-item\").each((i, el)=>{\n                    var _a, _b, _c, _d;\n                    const releaseDate = $(el).find(\"div.film-detail > div.film-infor > span:nth-child(2)\").text();\n                    const duration = $(el).find(\"div.film-detail > div.film-infor > span:nth-child(4)\").text();\n                    searchResult.results.push({\n                        id: (_b = (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1)) !== null && _b !== void 0 ? _b : \"\",\n                        title: (_c = $(el).find(\"div.film-detail > h2 > a\").attr(\"title\")) !== null && _c !== void 0 ? _c : \"\",\n                        url: `${this.baseUrl}${$(el).find(\"div.film-poster > a\").attr(\"href\")}`,\n                        image: $(el).find(\"div.film-poster > img\").attr(\"data-src\"),\n                        releaseDate: isNaN(parseInt(releaseDate)) ? undefined : releaseDate,\n                        seasons: releaseDate.includes(\"SS\") ? parseInt(releaseDate.split(\"SS\")[1]) : undefined,\n                        duration: !duration.includes(\"EPS\") ? duration : undefined,\n                        type: ((_d = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _d === void 0 ? void 0 : _d.includes(\"tv/\")) ? models_1.TvType.TVSERIES : models_1.TvType.MOVIE\n                    });\n                });\n                return searchResult;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param mediaId media link or id\n         */ this.fetchMediaInfo = async (mediaId)=>{\n            var _a;\n            if (mediaId.startsWith(this.baseUrl)) {\n                mediaId = mediaId.replace(this.baseUrl + \"/\", \"\");\n            }\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/${mediaId}`);\n                const $ = (0, cheerio_1.load)(data);\n                const recommendationsArray = [];\n                const movieInfo = {\n                    id: mediaId,\n                    title: \"\",\n                    url: `${this.baseUrl}/${mediaId}`\n                };\n                const uid = $(\".detail_page-watch\").attr(\"data-id\");\n                movieInfo.cover = (_a = $(\"div.dp-w-cover\").attr(\"style\")) === null || _a === void 0 ? void 0 : _a.slice(22).replace(\")\", \"\").replace(\";\", \"\");\n                movieInfo.title = $(\".heading-name > a:nth-child(1)\").text();\n                movieInfo.image = $(\".film-poster > img\").attr(\"src\");\n                movieInfo.description = $(\".description\").text().replace(/(\\r\\n|\\n|\\r)/gm, \"\").trim();\n                movieInfo.type = movieInfo.id.split(\"/\")[0] === \"tv\" ? models_1.TvType.TVSERIES : models_1.TvType.MOVIE;\n                movieInfo.releaseDate = $(\"div.elements\").find(\"div.row-line\").first().text().replace(\"Released: \", \"\").trim();\n                movieInfo.genres = $(\"div.row-line:nth-child(2)\").first().find(\"a\").map((i, el)=>$(el).text().split(\"&\")).get().map((v)=>v.trim());\n                movieInfo.casts = $(\"div.row-line:nth-child(3)\").first().find(\"a\").map((i, el)=>$(el).attr(\"title\")).get();\n                movieInfo.production = $(\"div.row-line:nth-child(3)\").last().find(\"a\").map((i, el)=>$(el).attr(\"title\")).get().join();\n                movieInfo.country = $(\"div.row-line:nth-child(2)\").last().find(\"a\").map((i, el)=>$(el).attr(\"title\")).get();\n                movieInfo.duration = $(\"div.row-line:nth-child(1)\").last().text().replace(/(\\r\\n|\\n| |\\r)/gm, \"\").replace(\"Duration:\", \"\").trim();\n                movieInfo.rating = parseFloat($(\"div.dp-i-stats > span.item.mr-2\").text().replace(\"IMDB: \", \"\"));\n                $(\"div.film_list-wrap > div.flw-item\").each((i, el)=>{\n                    var _a, _b;\n                    const releaseDate = $(el).find(\"div.film-detail > div.film-infor > span:nth-child(2)\").text();\n                    const duration = $(el).find(\"div.film-detail > div.film-infor > span:nth-child(4)\").text();\n                    recommendationsArray.push({\n                        id: (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1),\n                        title: $(el).find(\"div.film-detail > h3.film-name > a\").text(),\n                        image: $(el).find(\"div.film-poster > img\").attr(\"data-src\"),\n                        releaseDate: isNaN(parseInt(releaseDate)) ? undefined : releaseDate,\n                        seasons: releaseDate.includes(\"SS\") ? parseInt(releaseDate.split(\"SS\")[1]) : undefined,\n                        duration: !duration.includes(\"EPS\") ? duration : undefined,\n                        type: ((_b = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _b === void 0 ? void 0 : _b.includes(\"tv/\")) ? models_1.TvType.TVSERIES : models_1.TvType.MOVIE\n                    });\n                });\n                movieInfo.recommendations = recommendationsArray;\n                const ajaxReqUrl = (id, type, isSeasons = false)=>`${this.baseUrl}/ajax/${type === \"movie\" ? type : `v2/${type}`}/${isSeasons ? \"seasons\" : \"episodes\"}/${id}`;\n                if (movieInfo.type === models_1.TvType.TVSERIES) {\n                    const { data } = await this.client.get(ajaxReqUrl(uid, \"tv\", true));\n                    const $$ = (0, cheerio_1.load)(data);\n                    const seasonsIds = $$(\".dropdown-menu > a\").map((i, el)=>$(el).attr(\"data-id\")).get();\n                    movieInfo.episodes = [];\n                    let season = 1;\n                    for (const id of seasonsIds){\n                        const { data } = await this.client.get(ajaxReqUrl(id, \"season\"));\n                        const $$$ = (0, cheerio_1.load)(data);\n                        $$$(\".nav > li\").map((i, el)=>{\n                            var _a;\n                            const episode = {\n                                id: $$$(el).find(\"a\").attr(\"id\").split(\"-\")[1],\n                                title: $$$(el).find(\"a\").attr(\"title\"),\n                                number: parseInt($$$(el).find(\"a\").attr(\"title\").split(\":\")[0].slice(3).trim()),\n                                season: season,\n                                url: `${this.baseUrl}/ajax/v2/episode/servers/${$$$(el).find(\"a\").attr(\"id\").split(\"-\")[1]}`\n                            };\n                            (_a = movieInfo.episodes) === null || _a === void 0 ? void 0 : _a.push(episode);\n                        }).get();\n                        season++;\n                    }\n                } else {\n                    movieInfo.episodes = [\n                        {\n                            id: uid,\n                            title: movieInfo.title,\n                            url: `${this.baseUrl}/ajax/movie/episodes/${uid}`\n                        }\n                    ];\n                }\n                return movieInfo;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param episodeId episode id\n         * @param mediaId media id\n         * @param server server type (default `VidCloud`) (optional)\n         */ this.fetchEpisodeSources = async (episodeId, mediaId, server = models_1.StreamingServers.UpCloud)=>{\n            if (episodeId.startsWith(\"http\")) {\n                const serverUrl = new URL(episodeId);\n                switch(server){\n                    case models_1.StreamingServers.MixDrop:\n                        return {\n                            headers: {\n                                Referer: serverUrl.href\n                            },\n                            sources: await new extractors_1.MixDrop(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                    case models_1.StreamingServers.VidCloud:\n                        return Object.assign({\n                            headers: {\n                                Referer: serverUrl.href\n                            }\n                        }, await new extractors_1.VidCloud(this.proxyConfig, this.adapter).extract(serverUrl, true));\n                    case models_1.StreamingServers.UpCloud:\n                        return Object.assign({\n                            headers: {\n                                Referer: serverUrl.href\n                            }\n                        }, await new extractors_1.VidCloud(this.proxyConfig, this.adapter).extract(serverUrl));\n                    default:\n                        return {\n                            headers: {\n                                Referer: serverUrl.href\n                            },\n                            sources: await new extractors_1.MixDrop(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                }\n            }\n            try {\n                const servers = await this.fetchEpisodeServers(episodeId, mediaId);\n                const i = servers.findIndex((s)=>s.name.toLowerCase() === server.toLowerCase());\n                if (i === -1) {\n                    throw new Error(`Server ${server} not found`);\n                }\n                const serverUrl = new URL(servers.filter((s)=>s.name.toLowerCase() === server.toLowerCase())[0].url);\n                return await this.fetchEpisodeSources(serverUrl.href, mediaId, server);\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        /**\n         *\n         * @param episodeId takes episode link or movie id\n         * @param mediaId takes movie link or id (found on movie info object)\n         */ this.fetchEpisodeServers = async (episodeId, mediaId)=>{\n            if (!episodeId.startsWith(this.baseUrl + \"/ajax\") && !mediaId.includes(\"movie\")) episodeId = `${this.baseUrl}/ajax/v2/episode/servers/${episodeId}`;\n            else episodeId = `${this.baseUrl}/ajax/movie/episodes/${episodeId}`;\n            try {\n                const { data } = await this.client.get(episodeId);\n                const $ = (0, cheerio_1.load)(data);\n                const servers = [];\n                await Promise.all($(\".nav > li\").map(async (i, el)=>{\n                    const server = {\n                        name: $(el).find(\"a\").attr(\"title\").slice(6).trim(),\n                        url: `${this.baseUrl}/${mediaId}.${!mediaId.includes(\"movie\") ? $(el).find(\"a\").attr(\"data-id\") : $(el).find(\"a\").attr(\"data-linkid\")}`.replace(!mediaId.includes(\"movie\") ? /\\/tv\\// : /\\/movie\\//, !mediaId.includes(\"movie\") ? \"/watch-tv/\" : \"/watch-movie/\")\n                    };\n                    const { data } = await this.client.get(`${this.baseUrl}/ajax/get_link/${server.url.split(\".\").slice(-1).shift()}`);\n                    const serverUrl = new URL(data.link);\n                    server.url = serverUrl.href;\n                    servers.push(server);\n                }));\n                return servers;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchRecentMovies = async ()=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/home`);\n                const $ = (0, cheerio_1.load)(data);\n                const movies = $(\".section-id-02\").find(\"div.flw-item\").map((i, el)=>{\n                    var _a, _b, _c, _d;\n                    const releaseDate = $(el).find(\"div.film-detail > div.film-infor > span:nth-child(2)\").text();\n                    const duration = $(el).find(\"div.film-detail > div.film-infor > span:nth-child(4)\").text();\n                    const movie = {\n                        id: (_b = (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1)) !== null && _b !== void 0 ? _b : \"\",\n                        title: (_c = $(el).find(\"div.film-detail > h3.film-name > a\").attr(\"title\")) !== null && _c !== void 0 ? _c : \"\",\n                        url: `${this.baseUrl}${$(el).find(\"div.film-poster > a\").attr(\"href\")}`,\n                        image: $(el).find(\"div.film-poster > img\").attr(\"data-src\"),\n                        releaseDate: isNaN(parseInt(releaseDate)) ? undefined : releaseDate,\n                        duration: !duration.includes(\"EPS\") ? duration : undefined,\n                        type: ((_d = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _d === void 0 ? void 0 : _d.includes(\"movie/\")) ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES\n                    };\n                    return movie;\n                }).get();\n                return movies;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchRecentTvShows = async ()=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/home`);\n                const $ = (0, cheerio_1.load)(data);\n                const tvshows = $(\".section-id-03\").find(\"div.flw-item\").map((i, el)=>{\n                    var _a, _b, _c, _d;\n                    const season = $(el).find(\"div.film-detail > div.film-infor > span:nth-child(2)\").text();\n                    const episode = $(el).find(\"div.film-detail > div.film-infor > span:nth-child(4)\").text();\n                    const tvshow = {\n                        id: (_b = (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1)) !== null && _b !== void 0 ? _b : \"\",\n                        title: (_c = $(el).find(\"div.film-detail > h3.film-name > a\").attr(\"title\")) !== null && _c !== void 0 ? _c : \"\",\n                        url: `${this.baseUrl}${$(el).find(\"div.film-poster > a\").attr(\"href\")}`,\n                        image: $(el).find(\"div.film-poster > img\").attr(\"data-src\"),\n                        season: season.includes(\"SS\") ? parseInt(season.split(\"SS\")[1]) : undefined,\n                        latestEpisode: episode.includes(\"EPS\") ? parseInt(episode.split(\"EPS\")[1]) : undefined,\n                        type: ((_d = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _d === void 0 ? void 0 : _d.includes(\"tv/\")) ? models_1.TvType.TVSERIES : models_1.TvType.MOVIE\n                    };\n                    return tvshow;\n                }).get();\n                return tvshows;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchTrendingMovies = async ()=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/home`);\n                const $ = (0, cheerio_1.load)(data);\n                const movies = $(\"#trending-movies\").find(\"div.flw-item\").map((i, el)=>{\n                    var _a, _b, _c, _d;\n                    const releaseDate = $(el).find(\"div.film-detail > div.film-infor > span:nth-child(2)\").text();\n                    const duration = $(el).find(\"div.film-detail > div.film-infor > span:nth-child(4)\").text();\n                    const movie = {\n                        id: (_b = (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1)) !== null && _b !== void 0 ? _b : \"\",\n                        title: (_c = $(el).find(\"div.film-detail > h3.film-name > a\").attr(\"title\")) !== null && _c !== void 0 ? _c : \"\",\n                        url: `${this.baseUrl}${$(el).find(\"div.film-poster > a\").attr(\"href\")}`,\n                        image: $(el).find(\"div.film-poster > img\").attr(\"data-src\"),\n                        releaseDate: isNaN(parseInt(releaseDate)) ? undefined : releaseDate,\n                        duration: !duration.includes(\"EPS\") ? duration : undefined,\n                        type: ((_d = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _d === void 0 ? void 0 : _d.includes(\"movie/\")) ? models_1.TvType.MOVIE : models_1.TvType.TVSERIES\n                    };\n                    return movie;\n                }).get();\n                return movies;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchTrendingTvShows = async ()=>{\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/home`);\n                const $ = (0, cheerio_1.load)(data);\n                const tvshows = $(\"#trending-tv\").find(\"div.flw-item\").map((i, el)=>{\n                    var _a, _b, _c, _d;\n                    const season = $(el).find(\"div.film-detail > div.film-infor > span:nth-child(2)\").text();\n                    const episode = $(el).find(\"div.film-detail > div.film-infor > span:nth-child(4)\").text();\n                    const tvshow = {\n                        id: (_b = (_a = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1)) !== null && _b !== void 0 ? _b : \"\",\n                        title: (_c = $(el).find(\"div.film-detail > h3.film-name > a\").attr(\"title\")) !== null && _c !== void 0 ? _c : \"\",\n                        url: `${this.baseUrl}${$(el).find(\"div.film-poster > a\").attr(\"href\")}`,\n                        image: $(el).find(\"div.film-poster > img\").attr(\"data-src\"),\n                        season: season.includes(\"SS\") ? parseInt(season.split(\"SS\")[1]) : undefined,\n                        latestEpisode: episode.includes(\"EPS\") ? parseInt(episode.split(\"EPS\")[1]) : undefined,\n                        type: ((_d = $(el).find(\"div.film-poster > a\").attr(\"href\")) === null || _d === void 0 ? void 0 : _d.includes(\"tv/\")) ? models_1.TvType.TVSERIES : models_1.TvType.MOVIE\n                    };\n                    return tvshow;\n                }).get();\n                return tvshows;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = MovieHdWatch; //# sourceMappingURL=movidhdwatch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/movidhdwatch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/smashystream.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/smashystream.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst extractors_1 = __webpack_require__(/*! ../../extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nclass SmashyStream extends models_1.MovieParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"Smashystream\";\n        this.baseUrl = \"https://embed.smashystream.com\";\n        this.logo = \"https://smashystream.xyz/logo.png\";\n        this.classPath = \"MOVIES.SmashyStream\";\n        this.supportedTypes = new Set([\n            models_1.TvType.MOVIE,\n            models_1.TvType.TVSERIES\n        ]);\n        this.search = async ()=>{\n            throw new Error(\"Method not implemented.\");\n        };\n        this.fetchMediaInfo = async ()=>{\n            throw new Error(\"Method not implemented.\");\n        };\n        this.fetchEpisodeServers = async (tmdbId, season, episode)=>{\n            try {\n                const epsiodeServers = [];\n                let url = `${this.baseUrl}/playere.php?tmdb=${tmdbId}`;\n                if (season) {\n                    url = `${this.baseUrl}/playere.php?tmdb=${tmdbId}&season=${season}&episode=${episode}`;\n                }\n                const { data } = await this.client.get(url);\n                const $ = (0, cheerio_1.load)(data);\n                await Promise.all($(\"div#_default-servers a.server\").map(async (i, el)=>{\n                    var _a;\n                    const streamLink = (_a = $(el).attr(\"data-id\")) !== null && _a !== void 0 ? _a : \"\";\n                    epsiodeServers.push({\n                        name: $(el).text().replace(/  +/g, \" \").trim(),\n                        url: streamLink\n                    });\n                }).get());\n                return epsiodeServers;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchEpisodeSources = async (tmdbId, season, episode, server)=>{\n            try {\n                const servers = await this.fetchEpisodeServers(tmdbId, season, episode);\n                const selectedServer = servers.find((s)=>s.name.toLowerCase() === (server === null || server === void 0 ? void 0 : server.toLowerCase()));\n                if (!selectedServer) {\n                    let url = `${this.baseUrl}/playere.php?tmdb=${tmdbId}`;\n                    if (season) {\n                        url = `${this.baseUrl}/playere.php?tmdb=${tmdbId}&season=${season}&episode=${episode}`;\n                    }\n                    return Object.assign({\n                        headers: {\n                            Referer: this.baseUrl\n                        }\n                    }, await new extractors_1.SmashyStream(this.proxyConfig, this.adapter).extract(new URL(url)));\n                }\n                if (selectedServer.url.includes(\"/ffix\")) {\n                    return Object.assign({\n                        headers: {\n                            Referer: this.baseUrl\n                        }\n                    }, await new extractors_1.SmashyStream(this.proxyConfig, this.adapter).extractSmashyFfix(selectedServer.url));\n                }\n                if (selectedServer.url.includes(\"/watchx\")) {\n                    return Object.assign({\n                        headers: {\n                            Referer: this.baseUrl\n                        }\n                    }, await new extractors_1.SmashyStream(this.proxyConfig, this.adapter).extractSmashyWatchX(selectedServer.url));\n                }\n                if (selectedServer.url.includes(\"/nflim\")) {\n                    return Object.assign({\n                        headers: {\n                            Referer: this.baseUrl\n                        }\n                    }, await new extractors_1.SmashyStream(this.proxyConfig, this.adapter).extractSmashyNFlim(selectedServer.url));\n                }\n                if (selectedServer.url.includes(\"/fx\")) {\n                    return Object.assign({\n                        headers: {\n                            Referer: this.baseUrl\n                        }\n                    }, await new extractors_1.SmashyStream(this.proxyConfig, this.adapter).extractSmashyFX(selectedServer.url));\n                }\n                if (selectedServer.url.includes(\"/cf\")) {\n                    return Object.assign({\n                        headers: {\n                            Referer: this.baseUrl\n                        }\n                    }, await new extractors_1.SmashyStream(this.proxyConfig, this.adapter).extractSmashyCF(selectedServer.url));\n                }\n                if (selectedServer.url.includes(\"/eemovie\")) {\n                    return Object.assign({\n                        headers: {\n                            Referer: this.baseUrl\n                        }\n                    }, await new extractors_1.SmashyStream(this.proxyConfig, this.adapter).extractSmashyEEMovie(selectedServer.url));\n                }\n                return await this.fetchEpisodeSources(selectedServer.url, season, episode, server);\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n    }\n}\nexports[\"default\"] = SmashyStream; //# sourceMappingURL=smashystream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/smashystream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/viewAsian.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/viewAsian.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nconst extractors_1 = __webpack_require__(/*! ../../extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nclass ViewAsian extends models_1.MovieParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"ViewAsian\";\n        this.baseUrl = \"https://viewasian.co\";\n        this.logo = \"https://viewasian.co/images/logo.png\";\n        this.classPath = \"MOVIES.ViewAsian\";\n        this.supportedTypes = new Set([\n            models_1.TvType.MOVIE,\n            models_1.TvType.TVSERIES\n        ]);\n        this.search = async (query, page = 1)=>{\n            const searchResult = {\n                currentPage: page,\n                hasNextPage: false,\n                results: []\n            };\n            try {\n                const { data } = await this.client.get(`${this.baseUrl}/movie/search/${query.replace(/[\\W_]+/g, \"-\")}?page=${page}`);\n                const $ = (0, cheerio_1.load)(data);\n                const navSelector = \"div#pagination > nav:nth-child(1) > ul:nth-child(1)\";\n                searchResult.hasNextPage = $(navSelector).length > 0 ? !$(navSelector).children().last().hasClass(\"active\") : false;\n                $(\".movies-list-full > div.ml-item\").each((i, el)=>{\n                    var _a;\n                    const releaseDate = $(el).find(\"div.ml-item > div.mli-info > span:nth-child(1)\").text();\n                    searchResult.results.push({\n                        id: (_a = $(el).find(\"a\").attr(\"href\")) === null || _a === void 0 ? void 0 : _a.slice(1),\n                        title: $(el).find(\"a\").attr(\"title\"),\n                        url: `${this.baseUrl}${$(el).find(\"a\").attr(\"href\")}`,\n                        image: $(el).find(\"a > img\").attr(\"data-original\"),\n                        releaseDate: isNaN(parseInt(releaseDate)) ? undefined : releaseDate\n                    });\n                });\n                return searchResult;\n            } catch (err) {\n                throw new Error(err.message);\n            }\n        };\n        this.fetchMediaInfo = async (mediaId)=>{\n            const realMediaId = mediaId;\n            if (!mediaId.startsWith(this.baseUrl)) mediaId = `${this.baseUrl}/watch/${mediaId.split(\"/\").slice(1)}/watching.html`;\n            const mediaInfo = {\n                id: \"\",\n                title: \"\"\n            };\n            try {\n                const { data } = await this.client.get(mediaId);\n                const $ = (0, cheerio_1.load)(data);\n                mediaInfo.id = realMediaId;\n                mediaInfo.title = $(\".detail-mod h3\").text();\n                mediaInfo.banner = $(\".detail-mod > dm-thumb > img\").attr(\"src\");\n                mediaInfo.otherNames = $(\".other-name a\").map((i, el)=>$(el).attr(\"title\").trim()).get();\n                mediaInfo.description = $(\".desc\").text().trim();\n                mediaInfo.genre = $(\".mvic-info p:contains(Genre) > a\").map((i, el)=>$(el).text().split(\",\").join(\"\").trim()).get();\n                mediaInfo.description = $(\".desc\").text().trim();\n                //   mediaInfo.status = $('.mvic-info p:contains(Status)').text().replace('Status: ', '').trim();\n                mediaInfo.director = $(\".mvic-info p:contains(Director)\").text().replace(\"Director: \", \"\").trim();\n                mediaInfo.country = $(\".mvic-info p:contains(Country) a\").text().trim();\n                mediaInfo.releaseDate = $(\".mvic-info p:contains(Release)\").text().replace(\"Release: \", \"\").trim();\n                mediaInfo.episodes = [];\n                $(\"ul#episodes-sv-1 li\").each((i, el)=>{\n                    var _a;\n                    (_a = mediaInfo.episodes) === null || _a === void 0 ? void 0 : _a.push({\n                        id: $(el).find(\"a\").attr(\"href\").replace(\"?ep=\", \"$episode$\"),\n                        title: $(el).find(\"a\").attr(\"title\").trim(),\n                        episode: $(el).find(\"a\").attr(\"episode-data\"),\n                        url: `${this.baseUrl}${$(el).find(\"a\").attr(\"href\")}`\n                    });\n                });\n                return mediaInfo;\n            } catch (err) {\n                throw err;\n            }\n        };\n        this.fetchEpisodeSources = async (episodeId, server = models_1.StreamingServers.AsianLoad)=>{\n            if (episodeId.startsWith(\"http\")) {\n                const serverUrl = new URL(episodeId);\n                switch(server){\n                    case models_1.StreamingServers.AsianLoad:\n                        return Object.assign({}, await new extractors_1.AsianLoad(this.proxyConfig, this.adapter).extract(serverUrl));\n                    case models_1.StreamingServers.MixDrop:\n                        return {\n                            sources: await new extractors_1.MixDrop(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                    case models_1.StreamingServers.StreamTape:\n                        return {\n                            sources: await new extractors_1.StreamTape(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                    case models_1.StreamingServers.StreamSB:\n                        return {\n                            sources: await new extractors_1.StreamSB(this.proxyConfig, this.adapter).extract(serverUrl)\n                        };\n                    default:\n                        throw new Error(\"Server not supported\");\n                }\n            }\n            if (!episodeId.includes(\"$episode$\")) throw new Error(\"Invalid episode id\");\n            episodeId = `${episodeId.replace(\"$episode$\", \"?ep=\")}`;\n            // return episodeId;\n            try {\n                if (!episodeId.startsWith(this.baseUrl)) episodeId = `${this.baseUrl}/${episodeId}`;\n                const { data } = await this.client.get(episodeId);\n                const $ = (0, cheerio_1.load)(data);\n                let serverUrl = \"\";\n                switch(server){\n                    // asianload is the same as the standard server\n                    case models_1.StreamingServers.AsianLoad:\n                        serverUrl = `https:${$(\".anime:contains(Asianload)\").attr(\"data-video\")}`;\n                        if (!serverUrl.includes(\"draplay2\")) throw new Error(\"Try another server\");\n                        break;\n                    case models_1.StreamingServers.MixDrop:\n                        serverUrl = $(\".mixdrop\").attr(\"data-video\");\n                        if (!serverUrl.includes(\"mixdrop\")) throw new Error(\"Try another server\");\n                        break;\n                    case models_1.StreamingServers.StreamTape:\n                        serverUrl = $(\".streamtape\").attr(\"data-video\");\n                        if (!serverUrl.includes(\"streamtape\")) throw new Error(\"Try another server\");\n                        break;\n                    case models_1.StreamingServers.StreamSB:\n                        serverUrl = $(\".streamsb\").attr(\"data-video\");\n                        if (!serverUrl.includes(\"stream\")) throw new Error(\"Try another server\");\n                        break;\n                }\n                return await this.fetchEpisodeSources(serverUrl, server);\n            } catch (err) {\n                throw err;\n            }\n        };\n    }\n    fetchEpisodeServers(episodeId, ...args) {\n        throw new Error(\"Method not implemented.\");\n    }\n}\nexports[\"default\"] = ViewAsian; //# sourceMappingURL=viewAsian.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/movies/viewAsian.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/news/animenewsnetwork.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/news/animenewsnetwork.js ***!
  \*********************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/.pnpm/axios@0.27.2/node_modules/axios/index.js\"));\nconst models_1 = __webpack_require__(/*! ../../models */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/models/index.js\");\nclass NewsFeed {\n    constructor(title, id, uploadedAt, topics, preview, thumbnail, url){\n        this.title = title;\n        this.id = id;\n        this.uploadedAt = uploadedAt;\n        this.topics = topics;\n        this.preview = preview;\n        this.thumbnail = thumbnail;\n        this.url = url;\n    }\n    async getInfo() {\n        return await scrapNewsInfo(this.url).catch((err)=>{\n            throw new Error(err.message);\n        });\n    }\n}\nasync function scrapNewsInfo(url) {\n    const { data } = await axios_1.default.get(url);\n    const $ = (0, cheerio_1.load)(data);\n    const title = $(\"#page_header\").text().replace(\"News\", \"\").trim();\n    const intro = $(\".intro\").first().text().trim();\n    const description = $(\".meat > p\").text().trim().split(\"\\n\\n\").join(\"\\n\");\n    const time = $(\"#page-title > small > time\").text().trim();\n    const thumbnailSlug = $(\".meat > figure.fright\").first().find(\"img\").attr(\"data-src\");\n    const thumbnail = thumbnailSlug ? `https://animenewsnetwork.com${thumbnailSlug}` : \"https://i.imgur.com/KkkVr1g.png\";\n    return {\n        id: url.split(\"news/\")[1],\n        title,\n        uploadedAt: time,\n        intro,\n        description,\n        thumbnail,\n        url\n    };\n}\nclass AnimeNewsNetwork extends models_1.NewsParser {\n    constructor(){\n        super(...arguments);\n        this.name = \"Anime News Network\";\n        this.baseUrl = \"https://www.animenewsnetwork.com\";\n        this.classPath = \"NEWS.ANN\";\n        this.logo = \"https://i.imgur.com/KkkVr1g.png\";\n        /**\n         * @param topic Topic for fetching the feeds\n         */ this.fetchNewsFeeds = async (topic)=>await axios_1.default.get(`${this.baseUrl}/news${topic && Object.values(models_1.Topics).includes(topic) ? `/?topic=${topic}` : \"\"}`).then(({ data })=>{\n                const $ = (0, cheerio_1.load)(data);\n                const feeds = [];\n                $(\".herald.box.news\").each((i, el)=>{\n                    const thumbnailSlug = $(el).find(\".thumbnail\").attr(\"data-src\");\n                    const thumbnail = thumbnailSlug ? `${this.baseUrl}${thumbnailSlug}` : this.logo;\n                    const title = $(el).find(\"h3\").text().trim();\n                    const slug = $(el).find(\"h3 > a\").attr(\"href\") || \"\";\n                    const url = `${this.baseUrl}${slug}`;\n                    const byline = $(el).find(\".byline\");\n                    const time = byline.find(\"time\").text().trim();\n                    const topics = [];\n                    byline.find(\".topics > a\").each((i, el)=>{\n                        topics.push($(el).text().trim());\n                    });\n                    const El = $(el).find(\".preview\");\n                    const preview = {\n                        intro: El.find(\".intro\").text().trim(),\n                        full: El.find(\".full\").text().replace(\"―\", \"\").trim()\n                    };\n                    feeds.push(new NewsFeed(title, slug.replace(\"/news/\", \"\"), time, topics, preview, thumbnail, url));\n                });\n                return feeds;\n            }).catch((err)=>{\n                throw new Error(err.message);\n            });\n        /**\n         * @param id ID of the news from Anime News Network\n         * @example\n         * fetchNewsInfo('2022-08-26/higurashi-no-naku-koro-ni-rei-oni-okoshi-hen-manga-ends/.188996') // --> https://www.animenewsnetwork.com/news/2022-08-26/higurashi-no-naku-koro-ni-rei-oni-okoshi-hen-manga-ends/.188996\n         */ this.fetchNewsInfo = async (id)=>{\n            if (!id || typeof id !== \"string\") throw new TypeError(`The type of parameter \"id\" should be of type \"string\", received type \"${typeof id}\" instead`);\n            return await scrapNewsInfo(`${this.baseUrl}/news/${id}`).catch((err)=>{\n                throw new Error(err.message);\n            });\n        };\n    }\n}\nexports[\"default\"] = AnimeNewsNetwork; //# sourceMappingURL=animenewsnetwork.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/news/animenewsnetwork.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/news/index.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/news/index.js ***!
  \**********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst animenewsnetwork_1 = __importDefault(__webpack_require__(/*! ./animenewsnetwork */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/news/animenewsnetwork.js\"));\nexports[\"default\"] = {\n    ANN: animenewsnetwork_1.default\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL25ld3MvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsSUFBSyxJQUFJLElBQUksQ0FBQ0EsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLHFCQUFxQlAsZ0JBQWdCUSxtQkFBT0EsQ0FBQywySkFBb0I7QUFDdkVILGtCQUFlLEdBQUc7SUFBRUssS0FBS0gsbUJBQW1CRSxPQUFPO0FBQUMsR0FDcEQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvcHJvdmlkZXJzL25ld3MvaW5kZXguanM/YjNjZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFuaW1lbmV3c25ldHdvcmtfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9hbmltZW5ld3NuZXR3b3JrXCIpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHsgQU5OOiBhbmltZW5ld3NuZXR3b3JrXzEuZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImFuaW1lbmV3c25ldHdvcmtfMSIsInJlcXVpcmUiLCJkZWZhdWx0IiwiQU5OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/news/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/getComics.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/getComics.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parsePostInfo = void 0;\nconst parsePostInfo = (post)=>{\n    let year = \"\";\n    let size = \"\";\n    let description = \"\";\n    let sizeDone = false;\n    for(let i = 0; i < post.length; i++){\n        if (i + 5 < post.length && post[i] == \"Y\" && post[i + 1] == \"e\" && post[i + 2] == \"a\" && post[i + 3] == \"r\" && post[i + 4] == \" \" && post[i + 5] == \":\") {\n            year = post[i + 7] + post[i + 8] + post[i + 9] + post[i + 10];\n            i += 9;\n        } else if (i + 5 < post.length && post[i] == \"S\" && post[i + 1] == \"i\" && post[i + 2] == \"z\" && post[i + 3] == \"e\" && post[i + 4] == \" \" && post[i + 5] == \":\") {\n            let j = i + 7;\n            const temp = j;\n            for(; j < temp + 4; j++){\n                if (!isNaN(Number(post[j]))) {\n                    size += post[j];\n                } else {\n                    break;\n                }\n            }\n            size += post[j] + post[j + 1];\n            i += j - i;\n            i += 2;\n            sizeDone = true;\n        }\n        if (sizeDone) {\n            description += post[i];\n        }\n    }\n    description = description.substring(0, description.length - 12);\n    return {\n        year,\n        size,\n        description\n    };\n};\nexports.parsePostInfo = parsePostInfo; //# sourceMappingURL=getComics.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvdXRpbHMvZ2V0Q29taWNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1FLGdCQUFnQixDQUFDQztJQUNuQixJQUFJQyxPQUFPO0lBQ1gsSUFBSUMsT0FBTztJQUNYLElBQUlDLGNBQWM7SUFDbEIsSUFBSUMsV0FBVztJQUNmLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxLQUFLTSxNQUFNLEVBQUVELElBQUs7UUFDbEMsSUFBSUEsSUFBSSxJQUFJTCxLQUFLTSxNQUFNLElBQ25CTixJQUFJLENBQUNLLEVBQUUsSUFBSSxPQUNYTCxJQUFJLENBQUNLLElBQUksRUFBRSxJQUFJLE9BQ2ZMLElBQUksQ0FBQ0ssSUFBSSxFQUFFLElBQUksT0FDZkwsSUFBSSxDQUFDSyxJQUFJLEVBQUUsSUFBSSxPQUNmTCxJQUFJLENBQUNLLElBQUksRUFBRSxJQUFJLE9BQ2ZMLElBQUksQ0FBQ0ssSUFBSSxFQUFFLElBQUksS0FBSztZQUNwQkosT0FBT0QsSUFBSSxDQUFDSyxJQUFJLEVBQUUsR0FBR0wsSUFBSSxDQUFDSyxJQUFJLEVBQUUsR0FBR0wsSUFBSSxDQUFDSyxJQUFJLEVBQUUsR0FBR0wsSUFBSSxDQUFDSyxJQUFJLEdBQUc7WUFDN0RBLEtBQUs7UUFDVCxPQUNLLElBQUlBLElBQUksSUFBSUwsS0FBS00sTUFBTSxJQUN4Qk4sSUFBSSxDQUFDSyxFQUFFLElBQUksT0FDWEwsSUFBSSxDQUFDSyxJQUFJLEVBQUUsSUFBSSxPQUNmTCxJQUFJLENBQUNLLElBQUksRUFBRSxJQUFJLE9BQ2ZMLElBQUksQ0FBQ0ssSUFBSSxFQUFFLElBQUksT0FDZkwsSUFBSSxDQUFDSyxJQUFJLEVBQUUsSUFBSSxPQUNmTCxJQUFJLENBQUNLLElBQUksRUFBRSxJQUFJLEtBQUs7WUFDcEIsSUFBSUUsSUFBSUYsSUFBSTtZQUNaLE1BQU1HLE9BQU9EO1lBQ2IsTUFBT0EsSUFBSUMsT0FBTyxHQUFHRCxJQUFLO2dCQUN0QixJQUFJLENBQUNFLE1BQU1DLE9BQU9WLElBQUksQ0FBQ08sRUFBRSxJQUFJO29CQUN6QkwsUUFBUUYsSUFBSSxDQUFDTyxFQUFFO2dCQUNuQixPQUNLO29CQUNEO2dCQUNKO1lBQ0o7WUFDQUwsUUFBUUYsSUFBSSxDQUFDTyxFQUFFLEdBQUdQLElBQUksQ0FBQ08sSUFBSSxFQUFFO1lBQzdCRixLQUFLRSxJQUFJRjtZQUNUQSxLQUFLO1lBQ0xELFdBQVc7UUFDZjtRQUNBLElBQUlBLFVBQVU7WUFDVkQsZUFBZUgsSUFBSSxDQUFDSyxFQUFFO1FBQzFCO0lBQ0o7SUFDQUYsY0FBY0EsWUFBWVEsU0FBUyxDQUFDLEdBQUdSLFlBQVlHLE1BQU0sR0FBRztJQUM1RCxPQUFPO1FBQUVMO1FBQU1DO1FBQU1DO0lBQVk7QUFDckM7QUFDQU4scUJBQXFCLEdBQUdFLGVBQ3hCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3doYXRldmVyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25zdW1ldCtleHRlbnNpb25zQDEuNS40L25vZGVfbW9kdWxlcy9AY29uc3VtZXQvZXh0ZW5zaW9ucy9kaXN0L3V0aWxzL2dldENvbWljcy5qcz9iN2Y4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZVBvc3RJbmZvID0gdm9pZCAwO1xuY29uc3QgcGFyc2VQb3N0SW5mbyA9IChwb3N0KSA9PiB7XG4gICAgbGV0IHllYXIgPSAnJztcbiAgICBsZXQgc2l6ZSA9ICcnO1xuICAgIGxldCBkZXNjcmlwdGlvbiA9ICcnO1xuICAgIGxldCBzaXplRG9uZSA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSArIDUgPCBwb3N0Lmxlbmd0aCAmJlxuICAgICAgICAgICAgcG9zdFtpXSA9PSAnWScgJiZcbiAgICAgICAgICAgIHBvc3RbaSArIDFdID09ICdlJyAmJlxuICAgICAgICAgICAgcG9zdFtpICsgMl0gPT0gJ2EnICYmXG4gICAgICAgICAgICBwb3N0W2kgKyAzXSA9PSAncicgJiZcbiAgICAgICAgICAgIHBvc3RbaSArIDRdID09ICcgJyAmJlxuICAgICAgICAgICAgcG9zdFtpICsgNV0gPT0gJzonKSB7XG4gICAgICAgICAgICB5ZWFyID0gcG9zdFtpICsgN10gKyBwb3N0W2kgKyA4XSArIHBvc3RbaSArIDldICsgcG9zdFtpICsgMTBdO1xuICAgICAgICAgICAgaSArPSA5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGkgKyA1IDwgcG9zdC5sZW5ndGggJiZcbiAgICAgICAgICAgIHBvc3RbaV0gPT0gJ1MnICYmXG4gICAgICAgICAgICBwb3N0W2kgKyAxXSA9PSAnaScgJiZcbiAgICAgICAgICAgIHBvc3RbaSArIDJdID09ICd6JyAmJlxuICAgICAgICAgICAgcG9zdFtpICsgM10gPT0gJ2UnICYmXG4gICAgICAgICAgICBwb3N0W2kgKyA0XSA9PSAnICcgJiZcbiAgICAgICAgICAgIHBvc3RbaSArIDVdID09ICc6Jykge1xuICAgICAgICAgICAgbGV0IGogPSBpICsgNztcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBqO1xuICAgICAgICAgICAgZm9yICg7IGogPCB0ZW1wICsgNDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihOdW1iZXIocG9zdFtqXSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNpemUgKz0gcG9zdFtqXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpemUgKz0gcG9zdFtqXSArIHBvc3RbaiArIDFdO1xuICAgICAgICAgICAgaSArPSBqIC0gaTtcbiAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgIHNpemVEb25lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2l6ZURvbmUpIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uICs9IHBvc3RbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbi5zdWJzdHJpbmcoMCwgZGVzY3JpcHRpb24ubGVuZ3RoIC0gMTIpO1xuICAgIHJldHVybiB7IHllYXIsIHNpemUsIGRlc2NyaXB0aW9uIH07XG59O1xuZXhwb3J0cy5wYXJzZVBvc3RJbmZvID0gcGFyc2VQb3N0SW5mbztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldENvbWljcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZVBvc3RJbmZvIiwicG9zdCIsInllYXIiLCJzaXplIiwiZGVzY3JpcHRpb24iLCJzaXplRG9uZSIsImkiLCJsZW5ndGgiLCJqIiwidGVtcCIsImlzTmFOIiwiTnVtYmVyIiwic3Vic3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/getComics.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.VidMoly = exports.compareTwoStrings = exports.substringBefore = exports.substringAfter = exports.AsianLoad = exports.BilibiliExtractor = exports.convertDuration = exports.isJson = exports.days = exports.getDays = exports.anilistCharacterQuery = exports.Filemoon = exports.anilistSiteStatisticsQuery = exports.anilistAdvancedQuery = exports.anilistGenresQuery = exports.anilistAiringScheduleQuery = exports.anilistPopularQuery = exports.anilistTrendingQuery = exports.VizCloud = exports.StreamTape = exports.RapidCloud = exports.range = exports.kitsuSearchQuery = exports.anilistMediaDetailQuery = exports.anilistSearchQuery = exports.Kwik = exports.MixDrop = exports.VidCloud = exports.capitalizeFirstLetter = exports.genElement = exports.parsePostInfo = exports.formatTitle = exports.floorID = exports.splitAuthor = exports.StreamHub = exports.SmashyStream = exports.StreamSB = exports.GogoCDN = exports.USER_AGENT = void 0;\nconst extractors_1 = __webpack_require__(/*! ../extractors */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/extractors/index.js\");\nObject.defineProperty(exports, \"GogoCDN\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.GogoCDN;\n    }\n}));\nObject.defineProperty(exports, \"StreamSB\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.StreamSB;\n    }\n}));\nObject.defineProperty(exports, \"VidCloud\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.VidCloud;\n    }\n}));\nObject.defineProperty(exports, \"MixDrop\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.MixDrop;\n    }\n}));\nObject.defineProperty(exports, \"Kwik\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.Kwik;\n    }\n}));\nObject.defineProperty(exports, \"RapidCloud\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.RapidCloud;\n    }\n}));\nObject.defineProperty(exports, \"StreamTape\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.StreamTape;\n    }\n}));\nObject.defineProperty(exports, \"VizCloud\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.VizCloud;\n    }\n}));\nObject.defineProperty(exports, \"Filemoon\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.Filemoon;\n    }\n}));\nObject.defineProperty(exports, \"BilibiliExtractor\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.BilibiliExtractor;\n    }\n}));\nObject.defineProperty(exports, \"AsianLoad\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.AsianLoad;\n    }\n}));\nObject.defineProperty(exports, \"SmashyStream\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.SmashyStream;\n    }\n}));\nObject.defineProperty(exports, \"StreamHub\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.StreamHub;\n    }\n}));\nObject.defineProperty(exports, \"VidMoly\", ({\n    enumerable: true,\n    get: function() {\n        return extractors_1.VidMoly;\n    }\n}));\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/utils.js\");\nObject.defineProperty(exports, \"USER_AGENT\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.USER_AGENT;\n    }\n}));\nObject.defineProperty(exports, \"splitAuthor\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.splitAuthor;\n    }\n}));\nObject.defineProperty(exports, \"floorID\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.floorID;\n    }\n}));\nObject.defineProperty(exports, \"formatTitle\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.formatTitle;\n    }\n}));\nObject.defineProperty(exports, \"genElement\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.genElement;\n    }\n}));\nObject.defineProperty(exports, \"capitalizeFirstLetter\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.capitalizeFirstLetter;\n    }\n}));\nObject.defineProperty(exports, \"range\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.range;\n    }\n}));\nObject.defineProperty(exports, \"getDays\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.getDays;\n    }\n}));\nObject.defineProperty(exports, \"days\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.days;\n    }\n}));\nObject.defineProperty(exports, \"isJson\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.isJson;\n    }\n}));\nObject.defineProperty(exports, \"convertDuration\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.convertDuration;\n    }\n}));\nObject.defineProperty(exports, \"substringAfter\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.substringAfter;\n    }\n}));\nObject.defineProperty(exports, \"substringBefore\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.substringBefore;\n    }\n}));\nObject.defineProperty(exports, \"compareTwoStrings\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.compareTwoStrings;\n    }\n}));\nconst queries_1 = __webpack_require__(/*! ./queries */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/queries.js\");\nObject.defineProperty(exports, \"anilistSearchQuery\", ({\n    enumerable: true,\n    get: function() {\n        return queries_1.anilistSearchQuery;\n    }\n}));\nObject.defineProperty(exports, \"anilistMediaDetailQuery\", ({\n    enumerable: true,\n    get: function() {\n        return queries_1.anilistMediaDetailQuery;\n    }\n}));\nObject.defineProperty(exports, \"kitsuSearchQuery\", ({\n    enumerable: true,\n    get: function() {\n        return queries_1.kitsuSearchQuery;\n    }\n}));\nObject.defineProperty(exports, \"anilistTrendingQuery\", ({\n    enumerable: true,\n    get: function() {\n        return queries_1.anilistTrendingQuery;\n    }\n}));\nObject.defineProperty(exports, \"anilistPopularQuery\", ({\n    enumerable: true,\n    get: function() {\n        return queries_1.anilistPopularQuery;\n    }\n}));\nObject.defineProperty(exports, \"anilistAiringScheduleQuery\", ({\n    enumerable: true,\n    get: function() {\n        return queries_1.anilistAiringScheduleQuery;\n    }\n}));\nObject.defineProperty(exports, \"anilistGenresQuery\", ({\n    enumerable: true,\n    get: function() {\n        return queries_1.anilistGenresQuery;\n    }\n}));\nObject.defineProperty(exports, \"anilistAdvancedQuery\", ({\n    enumerable: true,\n    get: function() {\n        return queries_1.anilistAdvancedQuery;\n    }\n}));\nObject.defineProperty(exports, \"anilistSiteStatisticsQuery\", ({\n    enumerable: true,\n    get: function() {\n        return queries_1.anilistSiteStatisticsQuery;\n    }\n}));\nObject.defineProperty(exports, \"anilistCharacterQuery\", ({\n    enumerable: true,\n    get: function() {\n        return queries_1.anilistCharacterQuery;\n    }\n}));\nconst getComics_1 = __webpack_require__(/*! ./getComics */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/getComics.js\");\nObject.defineProperty(exports, \"parsePostInfo\", ({\n    enumerable: true,\n    get: function() {\n        return getComics_1.parsePostInfo;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/providers-list.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/providers-list.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PROVIDERS_LIST = void 0;\nconst providers_1 = __webpack_require__(/*! ../providers */ \"(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/providers/index.js\");\n/**\n * List of providers\n *\n * add new providers here (order does not matter)\n */ exports.PROVIDERS_LIST = {\n    ANIME: [\n        new providers_1.ANIME.NineAnime(),\n        new providers_1.ANIME.AnimeFox(),\n        new providers_1.ANIME.AnimePahe(),\n        new providers_1.ANIME.Bilibili(),\n        new providers_1.ANIME.Crunchyroll(),\n        new providers_1.ANIME.Anify(),\n        new providers_1.ANIME.Gogoanime(),\n        new providers_1.ANIME.Zoro(),\n        new providers_1.ANIME.Marin()\n    ],\n    MANGA: [\n        new providers_1.MANGA.MangaDex(),\n        new providers_1.MANGA.MangaHere(),\n        new providers_1.MANGA.MangaKakalot(),\n        new providers_1.MANGA.Mangapark(),\n        new providers_1.MANGA.MangaPill(),\n        new providers_1.MANGA.MangaReader(),\n        new providers_1.MANGA.Mangasee123(),\n        new providers_1.MANGA.ComicK(),\n        new providers_1.MANGA.FlameScans(),\n        new providers_1.MANGA.MangaHost(),\n        new providers_1.MANGA.BRMangas()\n    ],\n    BOOKS: [\n        new providers_1.BOOKS.Libgen()\n    ],\n    COMICS: [\n        new providers_1.COMICS.GetComics()\n    ],\n    LIGHT_NOVELS: [\n        new providers_1.LIGHT_NOVELS.ReadLightNovels()\n    ],\n    MOVIES: [\n        new providers_1.MOVIES.DramaCool(),\n        new providers_1.MOVIES.FlixHQ(),\n        new providers_1.MOVIES.Fmovies(),\n        new providers_1.MOVIES.Goku(),\n        new providers_1.MOVIES.KissAsian(),\n        new providers_1.MOVIES.MovieHdWatch(),\n        new providers_1.MOVIES.ViewAsian()\n    ],\n    NEWS: [\n        new providers_1.NEWS.ANN()\n    ],\n    META: [\n        new providers_1.META.Anilist(),\n        new providers_1.META.TMDB(),\n        new providers_1.META.Myanimelist()\n    ],\n    OTHERS: []\n}; //# sourceMappingURL=providers-list.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbnN1bWV0K2V4dGVuc2lvbnNAMS41LjQvbm9kZV9tb2R1bGVzL0Bjb25zdW1ldC9leHRlbnNpb25zL2Rpc3QvdXRpbHMvcHJvdmlkZXJzLWxpc3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHLEtBQUs7QUFDOUIsTUFBTUcsY0FBY0MsbUJBQU9BLENBQUMscUlBQWM7QUFDMUM7Ozs7Q0FJQyxHQUNESixzQkFBc0IsR0FBRztJQUNyQkssT0FBTztRQUNILElBQUlGLFlBQVlFLEtBQUssQ0FBQ0MsU0FBUztRQUMvQixJQUFJSCxZQUFZRSxLQUFLLENBQUNFLFFBQVE7UUFDOUIsSUFBSUosWUFBWUUsS0FBSyxDQUFDRyxTQUFTO1FBQy9CLElBQUlMLFlBQVlFLEtBQUssQ0FBQ0ksUUFBUTtRQUM5QixJQUFJTixZQUFZRSxLQUFLLENBQUNLLFdBQVc7UUFDakMsSUFBSVAsWUFBWUUsS0FBSyxDQUFDTSxLQUFLO1FBQzNCLElBQUlSLFlBQVlFLEtBQUssQ0FBQ08sU0FBUztRQUMvQixJQUFJVCxZQUFZRSxLQUFLLENBQUNRLElBQUk7UUFDMUIsSUFBSVYsWUFBWUUsS0FBSyxDQUFDUyxLQUFLO0tBQzlCO0lBQ0RDLE9BQU87UUFDSCxJQUFJWixZQUFZWSxLQUFLLENBQUNDLFFBQVE7UUFDOUIsSUFBSWIsWUFBWVksS0FBSyxDQUFDRSxTQUFTO1FBQy9CLElBQUlkLFlBQVlZLEtBQUssQ0FBQ0csWUFBWTtRQUNsQyxJQUFJZixZQUFZWSxLQUFLLENBQUNJLFNBQVM7UUFDL0IsSUFBSWhCLFlBQVlZLEtBQUssQ0FBQ0ssU0FBUztRQUMvQixJQUFJakIsWUFBWVksS0FBSyxDQUFDTSxXQUFXO1FBQ2pDLElBQUlsQixZQUFZWSxLQUFLLENBQUNPLFdBQVc7UUFDakMsSUFBSW5CLFlBQVlZLEtBQUssQ0FBQ1EsTUFBTTtRQUM1QixJQUFJcEIsWUFBWVksS0FBSyxDQUFDUyxVQUFVO1FBQ2hDLElBQUlyQixZQUFZWSxLQUFLLENBQUNVLFNBQVM7UUFDL0IsSUFBSXRCLFlBQVlZLEtBQUssQ0FBQ1csUUFBUTtLQUNqQztJQUNEQyxPQUFPO1FBQUMsSUFBSXhCLFlBQVl3QixLQUFLLENBQUNDLE1BQU07S0FBRztJQUN2Q0MsUUFBUTtRQUFDLElBQUkxQixZQUFZMEIsTUFBTSxDQUFDQyxTQUFTO0tBQUc7SUFDNUNDLGNBQWM7UUFBQyxJQUFJNUIsWUFBWTRCLFlBQVksQ0FBQ0MsZUFBZTtLQUFHO0lBQzlEQyxRQUFRO1FBQ0osSUFBSTlCLFlBQVk4QixNQUFNLENBQUNDLFNBQVM7UUFDaEMsSUFBSS9CLFlBQVk4QixNQUFNLENBQUNFLE1BQU07UUFDN0IsSUFBSWhDLFlBQVk4QixNQUFNLENBQUNHLE9BQU87UUFDOUIsSUFBSWpDLFlBQVk4QixNQUFNLENBQUNJLElBQUk7UUFDM0IsSUFBSWxDLFlBQVk4QixNQUFNLENBQUNLLFNBQVM7UUFDaEMsSUFBSW5DLFlBQVk4QixNQUFNLENBQUNNLFlBQVk7UUFDbkMsSUFBSXBDLFlBQVk4QixNQUFNLENBQUNPLFNBQVM7S0FDbkM7SUFDREMsTUFBTTtRQUFDLElBQUl0QyxZQUFZc0MsSUFBSSxDQUFDQyxHQUFHO0tBQUc7SUFDbENDLE1BQU07UUFBQyxJQUFJeEMsWUFBWXdDLElBQUksQ0FBQ0MsT0FBTztRQUFJLElBQUl6QyxZQUFZd0MsSUFBSSxDQUFDRSxJQUFJO1FBQUksSUFBSTFDLFlBQVl3QyxJQUFJLENBQUNHLFdBQVc7S0FBRztJQUN2R0MsUUFBUSxFQUFFO0FBQ2QsR0FDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29uc3VtZXQrZXh0ZW5zaW9uc0AxLjUuNC9ub2RlX21vZHVsZXMvQGNvbnN1bWV0L2V4dGVuc2lvbnMvZGlzdC91dGlscy9wcm92aWRlcnMtbGlzdC5qcz8wMTAxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QUk9WSURFUlNfTElTVCA9IHZvaWQgMDtcbmNvbnN0IHByb3ZpZGVyc18xID0gcmVxdWlyZShcIi4uL3Byb3ZpZGVyc1wiKTtcbi8qKlxuICogTGlzdCBvZiBwcm92aWRlcnNcbiAqXG4gKiBhZGQgbmV3IHByb3ZpZGVycyBoZXJlIChvcmRlciBkb2VzIG5vdCBtYXR0ZXIpXG4gKi9cbmV4cG9ydHMuUFJPVklERVJTX0xJU1QgPSB7XG4gICAgQU5JTUU6IFtcbiAgICAgICAgbmV3IHByb3ZpZGVyc18xLkFOSU1FLk5pbmVBbmltZSgpLFxuICAgICAgICBuZXcgcHJvdmlkZXJzXzEuQU5JTUUuQW5pbWVGb3goKSxcbiAgICAgICAgbmV3IHByb3ZpZGVyc18xLkFOSU1FLkFuaW1lUGFoZSgpLFxuICAgICAgICBuZXcgcHJvdmlkZXJzXzEuQU5JTUUuQmlsaWJpbGkoKSxcbiAgICAgICAgbmV3IHByb3ZpZGVyc18xLkFOSU1FLkNydW5jaHlyb2xsKCksXG4gICAgICAgIG5ldyBwcm92aWRlcnNfMS5BTklNRS5BbmlmeSgpLFxuICAgICAgICBuZXcgcHJvdmlkZXJzXzEuQU5JTUUuR29nb2FuaW1lKCksXG4gICAgICAgIG5ldyBwcm92aWRlcnNfMS5BTklNRS5ab3JvKCksXG4gICAgICAgIG5ldyBwcm92aWRlcnNfMS5BTklNRS5NYXJpbigpLFxuICAgIF0sXG4gICAgTUFOR0E6IFtcbiAgICAgICAgbmV3IHByb3ZpZGVyc18xLk1BTkdBLk1hbmdhRGV4KCksXG4gICAgICAgIG5ldyBwcm92aWRlcnNfMS5NQU5HQS5NYW5nYUhlcmUoKSxcbiAgICAgICAgbmV3IHByb3ZpZGVyc18xLk1BTkdBLk1hbmdhS2FrYWxvdCgpLFxuICAgICAgICBuZXcgcHJvdmlkZXJzXzEuTUFOR0EuTWFuZ2FwYXJrKCksXG4gICAgICAgIG5ldyBwcm92aWRlcnNfMS5NQU5HQS5NYW5nYVBpbGwoKSxcbiAgICAgICAgbmV3IHByb3ZpZGVyc18xLk1BTkdBLk1hbmdhUmVhZGVyKCksXG4gICAgICAgIG5ldyBwcm92aWRlcnNfMS5NQU5HQS5NYW5nYXNlZTEyMygpLFxuICAgICAgICBuZXcgcHJvdmlkZXJzXzEuTUFOR0EuQ29taWNLKCksXG4gICAgICAgIG5ldyBwcm92aWRlcnNfMS5NQU5HQS5GbGFtZVNjYW5zKCksXG4gICAgICAgIG5ldyBwcm92aWRlcnNfMS5NQU5HQS5NYW5nYUhvc3QoKSxcbiAgICAgICAgbmV3IHByb3ZpZGVyc18xLk1BTkdBLkJSTWFuZ2FzKCksXG4gICAgXSxcbiAgICBCT09LUzogW25ldyBwcm92aWRlcnNfMS5CT09LUy5MaWJnZW4oKV0sXG4gICAgQ09NSUNTOiBbbmV3IHByb3ZpZGVyc18xLkNPTUlDUy5HZXRDb21pY3MoKV0sXG4gICAgTElHSFRfTk9WRUxTOiBbbmV3IHByb3ZpZGVyc18xLkxJR0hUX05PVkVMUy5SZWFkTGlnaHROb3ZlbHMoKV0sXG4gICAgTU9WSUVTOiBbXG4gICAgICAgIG5ldyBwcm92aWRlcnNfMS5NT1ZJRVMuRHJhbWFDb29sKCksXG4gICAgICAgIG5ldyBwcm92aWRlcnNfMS5NT1ZJRVMuRmxpeEhRKCksXG4gICAgICAgIG5ldyBwcm92aWRlcnNfMS5NT1ZJRVMuRm1vdmllcygpLFxuICAgICAgICBuZXcgcHJvdmlkZXJzXzEuTU9WSUVTLkdva3UoKSxcbiAgICAgICAgbmV3IHByb3ZpZGVyc18xLk1PVklFUy5LaXNzQXNpYW4oKSxcbiAgICAgICAgbmV3IHByb3ZpZGVyc18xLk1PVklFUy5Nb3ZpZUhkV2F0Y2goKSxcbiAgICAgICAgbmV3IHByb3ZpZGVyc18xLk1PVklFUy5WaWV3QXNpYW4oKSxcbiAgICBdLFxuICAgIE5FV1M6IFtuZXcgcHJvdmlkZXJzXzEuTkVXUy5BTk4oKV0sXG4gICAgTUVUQTogW25ldyBwcm92aWRlcnNfMS5NRVRBLkFuaWxpc3QoKSwgbmV3IHByb3ZpZGVyc18xLk1FVEEuVE1EQigpLCBuZXcgcHJvdmlkZXJzXzEuTUVUQS5NeWFuaW1lbGlzdCgpXSxcbiAgICBPVEhFUlM6IFtdLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVycy1saXN0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlBST1ZJREVSU19MSVNUIiwicHJvdmlkZXJzXzEiLCJyZXF1aXJlIiwiQU5JTUUiLCJOaW5lQW5pbWUiLCJBbmltZUZveCIsIkFuaW1lUGFoZSIsIkJpbGliaWxpIiwiQ3J1bmNoeXJvbGwiLCJBbmlmeSIsIkdvZ29hbmltZSIsIlpvcm8iLCJNYXJpbiIsIk1BTkdBIiwiTWFuZ2FEZXgiLCJNYW5nYUhlcmUiLCJNYW5nYUtha2Fsb3QiLCJNYW5nYXBhcmsiLCJNYW5nYVBpbGwiLCJNYW5nYVJlYWRlciIsIk1hbmdhc2VlMTIzIiwiQ29taWNLIiwiRmxhbWVTY2FucyIsIk1hbmdhSG9zdCIsIkJSTWFuZ2FzIiwiQk9PS1MiLCJMaWJnZW4iLCJDT01JQ1MiLCJHZXRDb21pY3MiLCJMSUdIVF9OT1ZFTFMiLCJSZWFkTGlnaHROb3ZlbHMiLCJNT1ZJRVMiLCJEcmFtYUNvb2wiLCJGbGl4SFEiLCJGbW92aWVzIiwiR29rdSIsIktpc3NBc2lhbiIsIk1vdmllSGRXYXRjaCIsIlZpZXdBc2lhbiIsIk5FV1MiLCJBTk4iLCJNRVRBIiwiQW5pbGlzdCIsIlRNREIiLCJNeWFuaW1lbGlzdCIsIk9USEVSUyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/providers-list.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/queries.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/queries.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.kitsuSearchQuery = exports.anilistStaffQuery = exports.anilistCharacterQuery = exports.anilistSiteStatisticsQuery = exports.anilistAiringScheduleQuery = exports.anilistGenresQuery = exports.anilistPopularQuery = exports.anilistTrendingQuery = exports.anilistMediaDetailQuery = exports.anilistSearchQuery = exports.anilistAdvancedQuery = void 0;\nconst anilistAdvancedQuery = ()=>`query ($page: Int, $id: Int, $type: MediaType, $isAdult: Boolean = false, $search: String, $format: [MediaFormat], $status: MediaStatus, $size: Int, $countryOfOrigin: CountryCode, $source: MediaSource, $season: MediaSeason, $seasonYear: Int, $year: String, $onList: Boolean, $yearLesser: FuzzyDateInt, $yearGreater: FuzzyDateInt, $episodeLesser: Int, $episodeGreater: Int, $durationLesser: Int, $durationGreater: Int, $chapterLesser: Int, $chapterGreater: Int, $volumeLesser: Int, $volumeGreater: Int, $licensedBy: [String], $isLicensed: Boolean, $genres: [String], $excludedGenres: [String], $tags: [String], $excludedTags: [String], $minimumTagRank: Int, $sort: [MediaSort] = [POPULARITY_DESC, SCORE_DESC]) { Page(page: $page, perPage: $size) { pageInfo { total perPage currentPage lastPage hasNextPage } media(id: $id, type: $type, season: $season, format_in: $format, status: $status, countryOfOrigin: $countryOfOrigin, source: $source, search: $search, onList: $onList, seasonYear: $seasonYear, startDate_like: $year, startDate_lesser: $yearLesser, startDate_greater: $yearGreater, episodes_lesser: $episodeLesser, episodes_greater: $episodeGreater, duration_lesser: $durationLesser, duration_greater: $durationGreater, chapters_lesser: $chapterLesser, chapters_greater: $chapterGreater, volumes_lesser: $volumeLesser, volumes_greater: $volumeGreater, licensedBy_in: $licensedBy, isLicensed: $isLicensed, genre_in: $genres, genre_not_in: $excludedGenres, tag_in: $tags, tag_not_in: $excludedTags, minimumTagRank: $minimumTagRank, sort: $sort, isAdult: $isAdult) {  id idMal status(version: 2) title { userPreferred romaji english native } bannerImage coverImage{ extraLarge large medium color } episodes season popularity description format seasonYear genres averageScore countryOfOrigin nextAiringEpisode { airingAt timeUntilAiring episode }  } } }`;\nexports.anilistAdvancedQuery = anilistAdvancedQuery;\nconst anilistSearchQuery = (query, page, perPage, type = \"ANIME\")=>`query ($page: Int = ${page}, $id: Int, $type: MediaType = ${type}, $search: String = \"${query}\", $isAdult: Boolean = false, $size: Int = ${perPage}) { Page(page: $page, perPage: $size) { pageInfo { total perPage currentPage lastPage hasNextPage } media(id: $id, type: $type, search: $search, isAdult: $isAdult) { id idMal status(version: 2) title { userPreferred romaji english native } bannerImage popularity coverImage{ extraLarge large medium color } episodes format season description seasonYear chapters volumes averageScore genres nextAiringEpisode { airingAt timeUntilAiring episode }  } } }`;\nexports.anilistSearchQuery = anilistSearchQuery;\nconst anilistMediaDetailQuery = (id)=>`query ($id: Int = ${id}) { Media(id: $id) { id idMal title { english native romaji } synonyms countryOfOrigin isLicensed isAdult externalLinks { url site type language } coverImage { extraLarge large color } startDate { year month day } endDate { year month day } bannerImage season seasonYear description type format status(version: 2) episodes duration chapters volumes trailer { id site thumbnail } genres source averageScore popularity meanScore nextAiringEpisode { airingAt timeUntilAiring episode } characters(sort: ROLE) { edges { role node { id name { first middle last full native userPreferred } image { large medium } } voiceActors(sort: LANGUAGE) { id languageV2 name { first middle last full native userPreferred } image { large medium } } } } recommendations { edges { node { id mediaRecommendation { id idMal title { romaji english native userPreferred } status episodes coverImage { extraLarge large medium color } bannerImage format chapters meanScore nextAiringEpisode { episode timeUntilAiring airingAt } } } } } relations { edges { id relationType node { id idMal status coverImage { extraLarge large medium color } bannerImage title { romaji english native userPreferred } episodes chapters format nextAiringEpisode { airingAt timeUntilAiring episode } meanScore } } } studios(isMain: true) { edges { isMain node { id name } } } } }`;\nexports.anilistMediaDetailQuery = anilistMediaDetailQuery;\nconst anilistTrendingQuery = (page = 1, perPage = 20, type = \"ANIME\")=>`query ($page: Int = ${page}, $id: Int, $type: MediaType = ${type}, $isAdult: Boolean = false, $size: Int = ${perPage}, $sort: [MediaSort] = [TRENDING_DESC, POPULARITY_DESC]) { Page(page: $page, perPage: $size) { pageInfo { total perPage currentPage lastPage hasNextPage } media(id: $id, type: $type, isAdult: $isAdult, sort: $sort) { id idMal status(version: 2) title { userPreferred romaji english native } genres trailer { id site thumbnail } description format bannerImage coverImage{ extraLarge large medium color } episodes meanScore duration season seasonYear averageScore nextAiringEpisode { airingAt timeUntilAiring episode }  } } }`;\nexports.anilistTrendingQuery = anilistTrendingQuery;\nconst anilistPopularQuery = (page = 1, perPage = 20, type = \"ANIME\")=>`query ($page: Int = ${page}, $id: Int, $type: MediaType = ${type}, $isAdult: Boolean = false, $size: Int = ${perPage}, $sort: [MediaSort] = [POPULARITY_DESC]) { Page(page: $page, perPage: $size) { pageInfo { total perPage currentPage lastPage hasNextPage } media(id: $id, type: $type, isAdult: $isAdult, sort: $sort) { id idMal status(version: 2) title { userPreferred romaji english native } trailer { id site thumbnail } format genres bannerImage description coverImage { extraLarge large medium color } episodes meanScore duration season seasonYear averageScore nextAiringEpisode { airingAt timeUntilAiring episode }  } } }`;\nexports.anilistPopularQuery = anilistPopularQuery;\nconst anilistGenresQuery = (genres, page = 1, perPage = 20)=>`query ($genres: [String] = ${JSON.stringify(genres)}, $page: Int = ${page}, $type: MediaType = ANIME, $isAdult: Boolean = false, $size: Int = ${perPage}) {Page(page: $page, perPage: $size) { pageInfo { total perPage currentPage lastPage hasNextPage } media(type: $type, isAdult: $isAdult, genre_in: $genres) { id idMal status(version: 2) title { userPreferred romaji english native } trailer { id site thumbnail } format bannerImage description coverImage { extraLarge large medium color } episodes meanScore duration season seasonYear averageScore nextAiringEpisode { airingAt timeUntilAiring episode }  } } }`;\nexports.anilistGenresQuery = anilistGenresQuery;\nconst anilistAiringScheduleQuery = (page = 1, perPage = 20, weekStart, weekEnd, notYetAired)=>`query { Page(page: ${page}, perPage: ${perPage}) { pageInfo { total perPage currentPage lastPage hasNextPage } airingSchedules( notYetAired: ${notYetAired}, airingAt_greater: ${weekStart}, airingAt_lesser: ${weekEnd}) { airingAt episode media { id description idMal title { romaji english userPreferred native } countryOfOrigin description popularity bannerImage coverImage { extraLarge large medium color } genres averageScore seasonYear format } } } }`;\nexports.anilistAiringScheduleQuery = anilistAiringScheduleQuery;\nconst anilistSiteStatisticsQuery = ()=>`query { SiteStatistics { anime { nodes { count } } } }`;\nexports.anilistSiteStatisticsQuery = anilistSiteStatisticsQuery;\nconst anilistCharacterQuery = ()=>`query character($id: Int) { Character(id: $id) { id name { first middle last full native userPreferred alternative alternativeSpoiler } image { large medium } description gender dateOfBirth { year month day } bloodType age favourites media { edges { characterRole node { id idMal title { romaji english native userPreferred } coverImage { extraLarge large medium color } averageScore startDate { year month day } episodes format status } } } } }`;\nexports.anilistCharacterQuery = anilistCharacterQuery;\nconst anilistStaffQuery = ()=>`query staff($id: Int, $sort: [MediaSort], $characterPage: Int, $staffPage: Int, $onList: Boolean, $type: MediaType, $withCharacterRoles: Boolean = false, $withStaffRoles: Boolean = false) { Staff(id: $id) { id name { first middle last full native userPreferred alternative } image { large } description favourites isFavourite isFavouriteBlocked age gender yearsActive homeTown bloodType primaryOccupations dateOfBirth { year month day } dateOfDeath { year month day } language: languageV2 characterMedia(page: $characterPage, sort: $sort, onList: $onList) @include(if: $withCharacterRoles) { pageInfo { total perPage currentPage lastPage hasNextPage } edges { characterRole characterName node { id type bannerImage isAdult title { userPreferred } coverImage { large } startDate { year } mediaListEntry { id status } } characters { id name { userPreferred } image { large } } } } staffMedia(page: $staffPage, type: $type, sort: $sort, onList: $onList) @include(if: $withStaffRoles) { pageInfo { total perPage currentPage lastPage hasNextPage } edges { staffRole node { id type isAdult title { userPreferred } coverImage { large } mediaListEntry { id status } } } } } }`;\nexports.anilistStaffQuery = anilistStaffQuery;\nconst kitsuSearchQuery = (query)=>`query{searchAnimeByTitle(first:5, title:\"${query}\"){ nodes {id season startDate titles { localized } episodes(first: 2000){ nodes { number createdAt titles { canonical } description thumbnail { original { url } } } } } } }`;\nexports.kitsuSearchQuery = kitsuSearchQuery; //# sourceMappingURL=queries.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/queries.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/utils.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/utils.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.substringBeforeLast = exports.substringAfterLast = exports.substringBefore = exports.substringAfter = exports.compareTwoStrings = exports.convertDuration = exports.isJson = exports.getDays = exports.capitalizeFirstLetter = exports.range = exports.genElement = exports.formatTitle = exports.floorID = exports.splitAuthor = exports.days = exports.USER_AGENT = void 0;\nconst cheerio_1 = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/index.js\");\nexports.USER_AGENT = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36\";\nexports.days = [\n    \"Saturday\",\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\"\n];\nconst splitAuthor = (authors)=>{\n    const res = [];\n    let eater = \"\";\n    for(let i = 0; i < authors.length; i++){\n        if (authors[i] == \" \" && (authors[i - 1] == \",\" || authors[i - 1] == \";\")) {\n            continue;\n        }\n        if (authors[i] == \",\" || authors[i] == \";\") {\n            res.push(eater.trim());\n            eater = \"\";\n            continue;\n        }\n        eater += authors[i];\n    }\n    res.push(eater);\n    return res;\n};\nexports.splitAuthor = splitAuthor;\nconst floorID = (id)=>{\n    let imp = \"\";\n    for(let i = 0; i < (id === null || id === void 0 ? void 0 : id.length) - 3; i++){\n        imp += id[i];\n    }\n    const idV = parseInt(imp);\n    return idV * 1000;\n};\nexports.floorID = floorID;\nconst formatTitle = (title)=>{\n    const result = title.replace(/[0-9]/g, \"\");\n    return result.trim();\n};\nexports.formatTitle = formatTitle;\nconst genElement = (s, e)=>{\n    if (s == \"\") return;\n    const $ = (0, cheerio_1.load)(e);\n    let i = 0;\n    let str = \"\";\n    let el = $();\n    for(; i < s.length; i++){\n        if (s[i] == \" \") {\n            el = $(str);\n            str = \"\";\n            i++;\n            break;\n        }\n        str += s[i];\n    }\n    for(; i < s.length; i++){\n        if (s[i] == \" \") {\n            el = $(el).children(str);\n            str = \"\";\n            continue;\n        }\n        str += s[i];\n    }\n    el = $(el).children(str);\n    return el;\n};\nexports.genElement = genElement;\nconst range = ({ from = 0, to = 0, step = 1, length = Math.ceil((to - from) / step) })=>Array.from({\n        length\n    }, (_, i)=>from + i * step);\nexports.range = range;\nconst capitalizeFirstLetter = (s)=>(s === null || s === void 0 ? void 0 : s.charAt(0).toUpperCase()) + s.slice(1);\nexports.capitalizeFirstLetter = capitalizeFirstLetter;\nconst getDays = (day1, day2)=>{\n    const day1Index = exports.days.indexOf((0, exports.capitalizeFirstLetter)(day1)) - 1;\n    const day2Index = exports.days.indexOf((0, exports.capitalizeFirstLetter)(day2)) - 1;\n    const now = new Date();\n    const day1Date = new Date();\n    const day2Date = new Date();\n    day1Date.setDate(now.getDate() + (day1Index + 7 - now.getDay()) % 7);\n    day2Date.setDate(now.getDate() + (day2Index + 7 - now.getDay()) % 7);\n    day1Date.setHours(0, 0, 0, 0);\n    day2Date.setHours(0, 0, 0, 0);\n    return [\n        day1Date.getTime() / 1000,\n        day2Date.getTime() / 1000\n    ];\n};\nexports.getDays = getDays;\nconst isJson = (str)=>{\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n};\nexports.isJson = isJson;\nfunction convertDuration(milliseconds) {\n    let seconds = Math.floor(milliseconds / 1000);\n    let minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    seconds = seconds % 60;\n    minutes = minutes % 60;\n    return `PT${hours}H${minutes}M${seconds}S`;\n}\nexports.convertDuration = convertDuration;\nconst compareTwoStrings = (first, second)=>{\n    first = first.replace(/\\s+/g, \"\");\n    second = second.replace(/\\s+/g, \"\");\n    if (first === second) return 1; // identical or empty\n    if (first.length < 2 || second.length < 2) return 0; // if either is a 0-letter or 1-letter string\n    const firstBigrams = new Map();\n    for(let i = 0; i < first.length - 1; i++){\n        const bigram = first.substring(i, i + 2);\n        const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) + 1 : 1;\n        firstBigrams.set(bigram, count);\n    }\n    let intersectionSize = 0;\n    for(let i = 0; i < second.length - 1; i++){\n        const bigram = second.substring(i, i + 2);\n        const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) : 0;\n        if (count > 0) {\n            firstBigrams.set(bigram, count - 1);\n            intersectionSize++;\n        }\n    }\n    return 2.0 * intersectionSize / (first.length + second.length - 2);\n};\nexports.compareTwoStrings = compareTwoStrings;\nconst substringAfter = (str, toFind)=>{\n    const index = str.indexOf(toFind);\n    return index == -1 ? \"\" : str.substring(index + toFind.length);\n};\nexports.substringAfter = substringAfter;\nconst substringBefore = (str, toFind)=>{\n    const index = str.indexOf(toFind);\n    return index == -1 ? \"\" : str.substring(0, index);\n};\nexports.substringBefore = substringBefore;\nconst substringAfterLast = (str, toFind)=>{\n    const index = str.lastIndexOf(toFind);\n    return index == -1 ? \"\" : str.substring(index + toFind.length);\n};\nexports.substringAfterLast = substringAfterLast;\nconst substringBeforeLast = (str, toFind)=>{\n    const index = str.lastIndexOf(toFind);\n    return index == -1 ? \"\" : str.substring(0, index);\n};\nexports.substringBeforeLast = substringBeforeLast; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@consumet+extensions@1.5.4/node_modules/@consumet/extensions/dist/utils/utils.js\n");

/***/ })

};
;