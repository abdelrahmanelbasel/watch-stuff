"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/parse5@7.1.2";
exports.ids = ["vendor-chunks/parse5@7.1.2"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/doctype.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/doctype.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getDocumentMode = exports.isConforming = void 0;\nconst html_js_1 = __webpack_require__(/*! ./html.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/html.js\");\n//Const\nconst VALID_DOCTYPE_NAME = \"html\";\nconst VALID_SYSTEM_ID = \"about:legacy-compat\";\nconst QUIRKS_MODE_SYSTEM_ID = \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\";\nconst QUIRKS_MODE_PUBLIC_ID_PREFIXES = [\n    \"+//silmaril//dtd html pro v0r11 19970101//\",\n    \"-//as//dtd html 3.0 aswedit + extensions//\",\n    \"-//advasoft ltd//dtd html 3.0 aswedit + extensions//\",\n    \"-//ietf//dtd html 2.0 level 1//\",\n    \"-//ietf//dtd html 2.0 level 2//\",\n    \"-//ietf//dtd html 2.0 strict level 1//\",\n    \"-//ietf//dtd html 2.0 strict level 2//\",\n    \"-//ietf//dtd html 2.0 strict//\",\n    \"-//ietf//dtd html 2.0//\",\n    \"-//ietf//dtd html 2.1e//\",\n    \"-//ietf//dtd html 3.0//\",\n    \"-//ietf//dtd html 3.2 final//\",\n    \"-//ietf//dtd html 3.2//\",\n    \"-//ietf//dtd html 3//\",\n    \"-//ietf//dtd html level 0//\",\n    \"-//ietf//dtd html level 1//\",\n    \"-//ietf//dtd html level 2//\",\n    \"-//ietf//dtd html level 3//\",\n    \"-//ietf//dtd html strict level 0//\",\n    \"-//ietf//dtd html strict level 1//\",\n    \"-//ietf//dtd html strict level 2//\",\n    \"-//ietf//dtd html strict level 3//\",\n    \"-//ietf//dtd html strict//\",\n    \"-//ietf//dtd html//\",\n    \"-//metrius//dtd metrius presentational//\",\n    \"-//microsoft//dtd internet explorer 2.0 html strict//\",\n    \"-//microsoft//dtd internet explorer 2.0 html//\",\n    \"-//microsoft//dtd internet explorer 2.0 tables//\",\n    \"-//microsoft//dtd internet explorer 3.0 html strict//\",\n    \"-//microsoft//dtd internet explorer 3.0 html//\",\n    \"-//microsoft//dtd internet explorer 3.0 tables//\",\n    \"-//netscape comm. corp.//dtd html//\",\n    \"-//netscape comm. corp.//dtd strict html//\",\n    \"-//o'reilly and associates//dtd html 2.0//\",\n    \"-//o'reilly and associates//dtd html extended 1.0//\",\n    \"-//o'reilly and associates//dtd html extended relaxed 1.0//\",\n    \"-//sq//dtd html 2.0 hotmetal + extensions//\",\n    \"-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//\",\n    \"-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//\",\n    \"-//spyglass//dtd html 2.0 extended//\",\n    \"-//sun microsystems corp.//dtd hotjava html//\",\n    \"-//sun microsystems corp.//dtd hotjava strict html//\",\n    \"-//w3c//dtd html 3 1995-03-24//\",\n    \"-//w3c//dtd html 3.2 draft//\",\n    \"-//w3c//dtd html 3.2 final//\",\n    \"-//w3c//dtd html 3.2//\",\n    \"-//w3c//dtd html 3.2s draft//\",\n    \"-//w3c//dtd html 4.0 frameset//\",\n    \"-//w3c//dtd html 4.0 transitional//\",\n    \"-//w3c//dtd html experimental 19960712//\",\n    \"-//w3c//dtd html experimental 970421//\",\n    \"-//w3c//dtd w3 html//\",\n    \"-//w3o//dtd w3 html 3.0//\",\n    \"-//webtechs//dtd mozilla html 2.0//\",\n    \"-//webtechs//dtd mozilla html//\"\n];\nconst QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [\n    ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,\n    \"-//w3c//dtd html 4.01 frameset//\",\n    \"-//w3c//dtd html 4.01 transitional//\"\n];\nconst QUIRKS_MODE_PUBLIC_IDS = new Set([\n    \"-//w3o//dtd w3 html strict 3.0//en//\",\n    \"-/w3c/dtd html 4.0 transitional/en\",\n    \"html\"\n]);\nconst LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = [\n    \"-//w3c//dtd xhtml 1.0 frameset//\",\n    \"-//w3c//dtd xhtml 1.0 transitional//\"\n];\nconst LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [\n    ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,\n    \"-//w3c//dtd html 4.01 frameset//\",\n    \"-//w3c//dtd html 4.01 transitional//\"\n];\n//Utils\nfunction hasPrefix(publicId, prefixes) {\n    return prefixes.some((prefix)=>publicId.startsWith(prefix));\n}\n//API\nfunction isConforming(token) {\n    return token.name === VALID_DOCTYPE_NAME && token.publicId === null && (token.systemId === null || token.systemId === VALID_SYSTEM_ID);\n}\nexports.isConforming = isConforming;\nfunction getDocumentMode(token) {\n    if (token.name !== VALID_DOCTYPE_NAME) {\n        return html_js_1.DOCUMENT_MODE.QUIRKS;\n    }\n    const { systemId } = token;\n    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {\n        return html_js_1.DOCUMENT_MODE.QUIRKS;\n    }\n    let { publicId } = token;\n    if (publicId !== null) {\n        publicId = publicId.toLowerCase();\n        if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {\n            return html_js_1.DOCUMENT_MODE.QUIRKS;\n        }\n        let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;\n        if (hasPrefix(publicId, prefixes)) {\n            return html_js_1.DOCUMENT_MODE.QUIRKS;\n        }\n        prefixes = systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;\n        if (hasPrefix(publicId, prefixes)) {\n            return html_js_1.DOCUMENT_MODE.LIMITED_QUIRKS;\n        }\n    }\n    return html_js_1.DOCUMENT_MODE.NO_QUIRKS;\n}\nexports.getDocumentMode = getDocumentMode; //# sourceMappingURL=doctype.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vcGFyc2U1QDcuMS4yL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvY29tbW9uL2RvY3R5cGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHQSxvQkFBb0IsR0FBRyxLQUFLO0FBQ3RELE1BQU1JLFlBQVlDLG1CQUFPQSxDQUFDLHNHQUFXO0FBQ3JDLE9BQU87QUFDUCxNQUFNQyxxQkFBcUI7QUFDM0IsTUFBTUMsa0JBQWtCO0FBQ3hCLE1BQU1DLHdCQUF3QjtBQUM5QixNQUFNQyxpQ0FBaUM7SUFDbkM7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSDtBQUNELE1BQU1DLDhDQUE4QztPQUM3Q0Q7SUFDSDtJQUNBO0NBQ0g7QUFDRCxNQUFNRSx5QkFBeUIsSUFBSUMsSUFBSTtJQUNuQztJQUNBO0lBQ0E7Q0FDSDtBQUNELE1BQU1DLG9DQUFvQztJQUFDO0lBQW9DO0NBQXVDO0FBQ3RILE1BQU1DLG1EQUFtRDtPQUNsREQ7SUFDSDtJQUNBO0NBQ0g7QUFDRCxPQUFPO0FBQ1AsU0FBU0UsVUFBVUMsUUFBUSxFQUFFQyxRQUFRO0lBQ2pDLE9BQU9BLFNBQVNDLElBQUksQ0FBQyxDQUFDQyxTQUFXSCxTQUFTSSxVQUFVLENBQUNEO0FBQ3pEO0FBQ0EsS0FBSztBQUNMLFNBQVNoQixhQUFha0IsS0FBSztJQUN2QixPQUFRQSxNQUFNQyxJQUFJLEtBQUtoQixzQkFDbkJlLE1BQU1MLFFBQVEsS0FBSyxRQUNsQkssQ0FBQUEsTUFBTUUsUUFBUSxLQUFLLFFBQVFGLE1BQU1FLFFBQVEsS0FBS2hCLGVBQWM7QUFDckU7QUFDQVAsb0JBQW9CLEdBQUdHO0FBQ3ZCLFNBQVNELGdCQUFnQm1CLEtBQUs7SUFDMUIsSUFBSUEsTUFBTUMsSUFBSSxLQUFLaEIsb0JBQW9CO1FBQ25DLE9BQU9GLFVBQVVvQixhQUFhLENBQUNDLE1BQU07SUFDekM7SUFDQSxNQUFNLEVBQUVGLFFBQVEsRUFBRSxHQUFHRjtJQUNyQixJQUFJRSxZQUFZQSxTQUFTRyxXQUFXLE9BQU9sQix1QkFBdUI7UUFDOUQsT0FBT0osVUFBVW9CLGFBQWEsQ0FBQ0MsTUFBTTtJQUN6QztJQUNBLElBQUksRUFBRVQsUUFBUSxFQUFFLEdBQUdLO0lBQ25CLElBQUlMLGFBQWEsTUFBTTtRQUNuQkEsV0FBV0EsU0FBU1UsV0FBVztRQUMvQixJQUFJZix1QkFBdUJnQixHQUFHLENBQUNYLFdBQVc7WUFDdEMsT0FBT1osVUFBVW9CLGFBQWEsQ0FBQ0MsTUFBTTtRQUN6QztRQUNBLElBQUlSLFdBQVdNLGFBQWEsT0FBT2IsOENBQThDRDtRQUNqRixJQUFJTSxVQUFVQyxVQUFVQyxXQUFXO1lBQy9CLE9BQU9iLFVBQVVvQixhQUFhLENBQUNDLE1BQU07UUFDekM7UUFDQVIsV0FDSU0sYUFBYSxPQUFPVixvQ0FBb0NDO1FBQzVELElBQUlDLFVBQVVDLFVBQVVDLFdBQVc7WUFDL0IsT0FBT2IsVUFBVW9CLGFBQWEsQ0FBQ0ksY0FBYztRQUNqRDtJQUNKO0lBQ0EsT0FBT3hCLFVBQVVvQixhQUFhLENBQUNLLFNBQVM7QUFDNUM7QUFDQTdCLHVCQUF1QixHQUFHRSxpQkFDMUIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhdGV2ZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vcGFyc2U1QDcuMS4yL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvY29tbW9uL2RvY3R5cGUuanM/NmI1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0RG9jdW1lbnRNb2RlID0gZXhwb3J0cy5pc0NvbmZvcm1pbmcgPSB2b2lkIDA7XG5jb25zdCBodG1sX2pzXzEgPSByZXF1aXJlKFwiLi9odG1sLmpzXCIpO1xuLy9Db25zdFxuY29uc3QgVkFMSURfRE9DVFlQRV9OQU1FID0gJ2h0bWwnO1xuY29uc3QgVkFMSURfU1lTVEVNX0lEID0gJ2Fib3V0OmxlZ2FjeS1jb21wYXQnO1xuY29uc3QgUVVJUktTX01PREVfU1lTVEVNX0lEID0gJ2h0dHA6Ly93d3cuaWJtLmNvbS9kYXRhL2R0ZC92MTEvaWJteGh0bWwxLXRyYW5zaXRpb25hbC5kdGQnO1xuY29uc3QgUVVJUktTX01PREVfUFVCTElDX0lEX1BSRUZJWEVTID0gW1xuICAgICcrLy9zaWxtYXJpbC8vZHRkIGh0bWwgcHJvIHYwcjExIDE5OTcwMTAxLy8nLFxuICAgICctLy9hcy8vZHRkIGh0bWwgMy4wIGFzd2VkaXQgKyBleHRlbnNpb25zLy8nLFxuICAgICctLy9hZHZhc29mdCBsdGQvL2R0ZCBodG1sIDMuMCBhc3dlZGl0ICsgZXh0ZW5zaW9ucy8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgMi4wIGxldmVsIDEvLycsXG4gICAgJy0vL2lldGYvL2R0ZCBodG1sIDIuMCBsZXZlbCAyLy8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbCAyLjAgc3RyaWN0IGxldmVsIDEvLycsXG4gICAgJy0vL2lldGYvL2R0ZCBodG1sIDIuMCBzdHJpY3QgbGV2ZWwgMi8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgMi4wIHN0cmljdC8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgMi4wLy8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbCAyLjFlLy8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbCAzLjAvLycsXG4gICAgJy0vL2lldGYvL2R0ZCBodG1sIDMuMiBmaW5hbC8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgMy4yLy8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbCAzLy8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbCBsZXZlbCAwLy8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbCBsZXZlbCAxLy8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbCBsZXZlbCAyLy8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbCBsZXZlbCAzLy8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbCBzdHJpY3QgbGV2ZWwgMC8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgc3RyaWN0IGxldmVsIDEvLycsXG4gICAgJy0vL2lldGYvL2R0ZCBodG1sIHN0cmljdCBsZXZlbCAyLy8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbCBzdHJpY3QgbGV2ZWwgMy8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgc3RyaWN0Ly8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbC8vJyxcbiAgICAnLS8vbWV0cml1cy8vZHRkIG1ldHJpdXMgcHJlc2VudGF0aW9uYWwvLycsXG4gICAgJy0vL21pY3Jvc29mdC8vZHRkIGludGVybmV0IGV4cGxvcmVyIDIuMCBodG1sIHN0cmljdC8vJyxcbiAgICAnLS8vbWljcm9zb2Z0Ly9kdGQgaW50ZXJuZXQgZXhwbG9yZXIgMi4wIGh0bWwvLycsXG4gICAgJy0vL21pY3Jvc29mdC8vZHRkIGludGVybmV0IGV4cGxvcmVyIDIuMCB0YWJsZXMvLycsXG4gICAgJy0vL21pY3Jvc29mdC8vZHRkIGludGVybmV0IGV4cGxvcmVyIDMuMCBodG1sIHN0cmljdC8vJyxcbiAgICAnLS8vbWljcm9zb2Z0Ly9kdGQgaW50ZXJuZXQgZXhwbG9yZXIgMy4wIGh0bWwvLycsXG4gICAgJy0vL21pY3Jvc29mdC8vZHRkIGludGVybmV0IGV4cGxvcmVyIDMuMCB0YWJsZXMvLycsXG4gICAgJy0vL25ldHNjYXBlIGNvbW0uIGNvcnAuLy9kdGQgaHRtbC8vJyxcbiAgICAnLS8vbmV0c2NhcGUgY29tbS4gY29ycC4vL2R0ZCBzdHJpY3QgaHRtbC8vJyxcbiAgICBcIi0vL28ncmVpbGx5IGFuZCBhc3NvY2lhdGVzLy9kdGQgaHRtbCAyLjAvL1wiLFxuICAgIFwiLS8vbydyZWlsbHkgYW5kIGFzc29jaWF0ZXMvL2R0ZCBodG1sIGV4dGVuZGVkIDEuMC8vXCIsXG4gICAgXCItLy9vJ3JlaWxseSBhbmQgYXNzb2NpYXRlcy8vZHRkIGh0bWwgZXh0ZW5kZWQgcmVsYXhlZCAxLjAvL1wiLFxuICAgICctLy9zcS8vZHRkIGh0bWwgMi4wIGhvdG1ldGFsICsgZXh0ZW5zaW9ucy8vJyxcbiAgICAnLS8vc29mdHF1YWQgc29mdHdhcmUvL2R0ZCBob3RtZXRhbCBwcm8gNi4wOjoxOTk5MDYwMTo6ZXh0ZW5zaW9ucyB0byBodG1sIDQuMC8vJyxcbiAgICAnLS8vc29mdHF1YWQvL2R0ZCBob3RtZXRhbCBwcm8gNC4wOjoxOTk3MTAxMDo6ZXh0ZW5zaW9ucyB0byBodG1sIDQuMC8vJyxcbiAgICAnLS8vc3B5Z2xhc3MvL2R0ZCBodG1sIDIuMCBleHRlbmRlZC8vJyxcbiAgICAnLS8vc3VuIG1pY3Jvc3lzdGVtcyBjb3JwLi8vZHRkIGhvdGphdmEgaHRtbC8vJyxcbiAgICAnLS8vc3VuIG1pY3Jvc3lzdGVtcyBjb3JwLi8vZHRkIGhvdGphdmEgc3RyaWN0IGh0bWwvLycsXG4gICAgJy0vL3czYy8vZHRkIGh0bWwgMyAxOTk1LTAzLTI0Ly8nLFxuICAgICctLy93M2MvL2R0ZCBodG1sIDMuMiBkcmFmdC8vJyxcbiAgICAnLS8vdzNjLy9kdGQgaHRtbCAzLjIgZmluYWwvLycsXG4gICAgJy0vL3czYy8vZHRkIGh0bWwgMy4yLy8nLFxuICAgICctLy93M2MvL2R0ZCBodG1sIDMuMnMgZHJhZnQvLycsXG4gICAgJy0vL3czYy8vZHRkIGh0bWwgNC4wIGZyYW1lc2V0Ly8nLFxuICAgICctLy93M2MvL2R0ZCBodG1sIDQuMCB0cmFuc2l0aW9uYWwvLycsXG4gICAgJy0vL3czYy8vZHRkIGh0bWwgZXhwZXJpbWVudGFsIDE5OTYwNzEyLy8nLFxuICAgICctLy93M2MvL2R0ZCBodG1sIGV4cGVyaW1lbnRhbCA5NzA0MjEvLycsXG4gICAgJy0vL3czYy8vZHRkIHczIGh0bWwvLycsXG4gICAgJy0vL3czby8vZHRkIHczIGh0bWwgMy4wLy8nLFxuICAgICctLy93ZWJ0ZWNocy8vZHRkIG1vemlsbGEgaHRtbCAyLjAvLycsXG4gICAgJy0vL3dlYnRlY2hzLy9kdGQgbW96aWxsYSBodG1sLy8nLFxuXTtcbmNvbnN0IFFVSVJLU19NT0RFX05PX1NZU1RFTV9JRF9QVUJMSUNfSURfUFJFRklYRVMgPSBbXG4gICAgLi4uUVVJUktTX01PREVfUFVCTElDX0lEX1BSRUZJWEVTLFxuICAgICctLy93M2MvL2R0ZCBodG1sIDQuMDEgZnJhbWVzZXQvLycsXG4gICAgJy0vL3czYy8vZHRkIGh0bWwgNC4wMSB0cmFuc2l0aW9uYWwvLycsXG5dO1xuY29uc3QgUVVJUktTX01PREVfUFVCTElDX0lEUyA9IG5ldyBTZXQoW1xuICAgICctLy93M28vL2R0ZCB3MyBodG1sIHN0cmljdCAzLjAvL2VuLy8nLFxuICAgICctL3czYy9kdGQgaHRtbCA0LjAgdHJhbnNpdGlvbmFsL2VuJyxcbiAgICAnaHRtbCcsXG5dKTtcbmNvbnN0IExJTUlURURfUVVJUktTX1BVQkxJQ19JRF9QUkVGSVhFUyA9IFsnLS8vdzNjLy9kdGQgeGh0bWwgMS4wIGZyYW1lc2V0Ly8nLCAnLS8vdzNjLy9kdGQgeGh0bWwgMS4wIHRyYW5zaXRpb25hbC8vJ107XG5jb25zdCBMSU1JVEVEX1FVSVJLU19XSVRIX1NZU1RFTV9JRF9QVUJMSUNfSURfUFJFRklYRVMgPSBbXG4gICAgLi4uTElNSVRFRF9RVUlSS1NfUFVCTElDX0lEX1BSRUZJWEVTLFxuICAgICctLy93M2MvL2R0ZCBodG1sIDQuMDEgZnJhbWVzZXQvLycsXG4gICAgJy0vL3czYy8vZHRkIGh0bWwgNC4wMSB0cmFuc2l0aW9uYWwvLycsXG5dO1xuLy9VdGlsc1xuZnVuY3Rpb24gaGFzUHJlZml4KHB1YmxpY0lkLCBwcmVmaXhlcykge1xuICAgIHJldHVybiBwcmVmaXhlcy5zb21lKChwcmVmaXgpID0+IHB1YmxpY0lkLnN0YXJ0c1dpdGgocHJlZml4KSk7XG59XG4vL0FQSVxuZnVuY3Rpb24gaXNDb25mb3JtaW5nKHRva2VuKSB7XG4gICAgcmV0dXJuICh0b2tlbi5uYW1lID09PSBWQUxJRF9ET0NUWVBFX05BTUUgJiZcbiAgICAgICAgdG9rZW4ucHVibGljSWQgPT09IG51bGwgJiZcbiAgICAgICAgKHRva2VuLnN5c3RlbUlkID09PSBudWxsIHx8IHRva2VuLnN5c3RlbUlkID09PSBWQUxJRF9TWVNURU1fSUQpKTtcbn1cbmV4cG9ydHMuaXNDb25mb3JtaW5nID0gaXNDb25mb3JtaW5nO1xuZnVuY3Rpb24gZ2V0RG9jdW1lbnRNb2RlKHRva2VuKSB7XG4gICAgaWYgKHRva2VuLm5hbWUgIT09IFZBTElEX0RPQ1RZUEVfTkFNRSkge1xuICAgICAgICByZXR1cm4gaHRtbF9qc18xLkRPQ1VNRU5UX01PREUuUVVJUktTO1xuICAgIH1cbiAgICBjb25zdCB7IHN5c3RlbUlkIH0gPSB0b2tlbjtcbiAgICBpZiAoc3lzdGVtSWQgJiYgc3lzdGVtSWQudG9Mb3dlckNhc2UoKSA9PT0gUVVJUktTX01PREVfU1lTVEVNX0lEKSB7XG4gICAgICAgIHJldHVybiBodG1sX2pzXzEuRE9DVU1FTlRfTU9ERS5RVUlSS1M7XG4gICAgfVxuICAgIGxldCB7IHB1YmxpY0lkIH0gPSB0b2tlbjtcbiAgICBpZiAocHVibGljSWQgIT09IG51bGwpIHtcbiAgICAgICAgcHVibGljSWQgPSBwdWJsaWNJZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoUVVJUktTX01PREVfUFVCTElDX0lEUy5oYXMocHVibGljSWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gaHRtbF9qc18xLkRPQ1VNRU5UX01PREUuUVVJUktTO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwcmVmaXhlcyA9IHN5c3RlbUlkID09PSBudWxsID8gUVVJUktTX01PREVfTk9fU1lTVEVNX0lEX1BVQkxJQ19JRF9QUkVGSVhFUyA6IFFVSVJLU19NT0RFX1BVQkxJQ19JRF9QUkVGSVhFUztcbiAgICAgICAgaWYgKGhhc1ByZWZpeChwdWJsaWNJZCwgcHJlZml4ZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gaHRtbF9qc18xLkRPQ1VNRU5UX01PREUuUVVJUktTO1xuICAgICAgICB9XG4gICAgICAgIHByZWZpeGVzID1cbiAgICAgICAgICAgIHN5c3RlbUlkID09PSBudWxsID8gTElNSVRFRF9RVUlSS1NfUFVCTElDX0lEX1BSRUZJWEVTIDogTElNSVRFRF9RVUlSS1NfV0lUSF9TWVNURU1fSURfUFVCTElDX0lEX1BSRUZJWEVTO1xuICAgICAgICBpZiAoaGFzUHJlZml4KHB1YmxpY0lkLCBwcmVmaXhlcykpIHtcbiAgICAgICAgICAgIHJldHVybiBodG1sX2pzXzEuRE9DVU1FTlRfTU9ERS5MSU1JVEVEX1FVSVJLUztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaHRtbF9qc18xLkRPQ1VNRU5UX01PREUuTk9fUVVJUktTO1xufVxuZXhwb3J0cy5nZXREb2N1bWVudE1vZGUgPSBnZXREb2N1bWVudE1vZGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb2N0eXBlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldERvY3VtZW50TW9kZSIsImlzQ29uZm9ybWluZyIsImh0bWxfanNfMSIsInJlcXVpcmUiLCJWQUxJRF9ET0NUWVBFX05BTUUiLCJWQUxJRF9TWVNURU1fSUQiLCJRVUlSS1NfTU9ERV9TWVNURU1fSUQiLCJRVUlSS1NfTU9ERV9QVUJMSUNfSURfUFJFRklYRVMiLCJRVUlSS1NfTU9ERV9OT19TWVNURU1fSURfUFVCTElDX0lEX1BSRUZJWEVTIiwiUVVJUktTX01PREVfUFVCTElDX0lEUyIsIlNldCIsIkxJTUlURURfUVVJUktTX1BVQkxJQ19JRF9QUkVGSVhFUyIsIkxJTUlURURfUVVJUktTX1dJVEhfU1lTVEVNX0lEX1BVQkxJQ19JRF9QUkVGSVhFUyIsImhhc1ByZWZpeCIsInB1YmxpY0lkIiwicHJlZml4ZXMiLCJzb21lIiwicHJlZml4Iiwic3RhcnRzV2l0aCIsInRva2VuIiwibmFtZSIsInN5c3RlbUlkIiwiRE9DVU1FTlRfTU9ERSIsIlFVSVJLUyIsInRvTG93ZXJDYXNlIiwiaGFzIiwiTElNSVRFRF9RVUlSS1MiLCJOT19RVUlSS1MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/doctype.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/error-codes.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/error-codes.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ERR = void 0;\nvar ERR;\n(function(ERR) {\n    ERR[\"controlCharacterInInputStream\"] = \"control-character-in-input-stream\";\n    ERR[\"noncharacterInInputStream\"] = \"noncharacter-in-input-stream\";\n    ERR[\"surrogateInInputStream\"] = \"surrogate-in-input-stream\";\n    ERR[\"nonVoidHtmlElementStartTagWithTrailingSolidus\"] = \"non-void-html-element-start-tag-with-trailing-solidus\";\n    ERR[\"endTagWithAttributes\"] = \"end-tag-with-attributes\";\n    ERR[\"endTagWithTrailingSolidus\"] = \"end-tag-with-trailing-solidus\";\n    ERR[\"unexpectedSolidusInTag\"] = \"unexpected-solidus-in-tag\";\n    ERR[\"unexpectedNullCharacter\"] = \"unexpected-null-character\";\n    ERR[\"unexpectedQuestionMarkInsteadOfTagName\"] = \"unexpected-question-mark-instead-of-tag-name\";\n    ERR[\"invalidFirstCharacterOfTagName\"] = \"invalid-first-character-of-tag-name\";\n    ERR[\"unexpectedEqualsSignBeforeAttributeName\"] = \"unexpected-equals-sign-before-attribute-name\";\n    ERR[\"missingEndTagName\"] = \"missing-end-tag-name\";\n    ERR[\"unexpectedCharacterInAttributeName\"] = \"unexpected-character-in-attribute-name\";\n    ERR[\"unknownNamedCharacterReference\"] = \"unknown-named-character-reference\";\n    ERR[\"missingSemicolonAfterCharacterReference\"] = \"missing-semicolon-after-character-reference\";\n    ERR[\"unexpectedCharacterAfterDoctypeSystemIdentifier\"] = \"unexpected-character-after-doctype-system-identifier\";\n    ERR[\"unexpectedCharacterInUnquotedAttributeValue\"] = \"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n    ERR[\"missingWhitespaceBetweenAttributes\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdentifier\"] = \"missing-doctype-public-identifier\";\n    ERR[\"missingDoctypeSystemIdentifier\"] = \"missing-doctype-system-identifier\";\n    ERR[\"abruptDoctypePublicIdentifier\"] = \"abrupt-doctype-public-identifier\";\n    ERR[\"abruptDoctypeSystemIdentifier\"] = \"abrupt-doctype-system-identifier\";\n    ERR[\"cdataInHtmlContent\"] = \"cdata-in-html-content\";\n    ERR[\"incorrectlyOpenedComment\"] = \"incorrectly-opened-comment\";\n    ERR[\"eofInScriptHtmlCommentLikeText\"] = \"eof-in-script-html-comment-like-text\";\n    ERR[\"eofInDoctype\"] = \"eof-in-doctype\";\n    ERR[\"nestedComment\"] = \"nested-comment\";\n    ERR[\"abruptClosingOfEmptyComment\"] = \"abrupt-closing-of-empty-comment\";\n    ERR[\"eofInComment\"] = \"eof-in-comment\";\n    ERR[\"incorrectlyClosedComment\"] = \"incorrectly-closed-comment\";\n    ERR[\"eofInCdata\"] = \"eof-in-cdata\";\n    ERR[\"absenceOfDigitsInNumericCharacterReference\"] = \"absence-of-digits-in-numeric-character-reference\";\n    ERR[\"nullCharacterReference\"] = \"null-character-reference\";\n    ERR[\"surrogateCharacterReference\"] = \"surrogate-character-reference\";\n    ERR[\"characterReferenceOutsideUnicodeRange\"] = \"character-reference-outside-unicode-range\";\n    ERR[\"controlCharacterReference\"] = \"control-character-reference\";\n    ERR[\"noncharacterCharacterReference\"] = \"noncharacter-character-reference\";\n    ERR[\"missingWhitespaceBeforeDoctypeName\"] = \"missing-whitespace-before-doctype-name\";\n    ERR[\"missingDoctypeName\"] = \"missing-doctype-name\";\n    ERR[\"invalidCharacterSequenceAfterDoctypeName\"] = \"invalid-character-sequence-after-doctype-name\";\n    ERR[\"duplicateAttribute\"] = \"duplicate-attribute\";\n    ERR[\"nonConformingDoctype\"] = \"non-conforming-doctype\";\n    ERR[\"missingDoctype\"] = \"missing-doctype\";\n    ERR[\"misplacedDoctype\"] = \"misplaced-doctype\";\n    ERR[\"endTagWithoutMatchingOpenElement\"] = \"end-tag-without-matching-open-element\";\n    ERR[\"closingOfElementWithOpenChildElements\"] = \"closing-of-element-with-open-child-elements\";\n    ERR[\"disallowedContentInNoscriptInHead\"] = \"disallowed-content-in-noscript-in-head\";\n    ERR[\"openElementsLeftAfterEof\"] = \"open-elements-left-after-eof\";\n    ERR[\"abandonedHeadElementChild\"] = \"abandoned-head-element-child\";\n    ERR[\"misplacedStartTagForHeadElement\"] = \"misplaced-start-tag-for-head-element\";\n    ERR[\"nestedNoscriptInHead\"] = \"nested-noscript-in-head\";\n    ERR[\"eofInElementThatCanContainOnlyText\"] = \"eof-in-element-that-can-contain-only-text\";\n})(ERR = exports.ERR || (exports.ERR = {})); //# sourceMappingURL=error-codes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/error-codes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/foreign-content.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/foreign-content.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isIntegrationPoint = exports.adjustTokenSVGTagName = exports.adjustTokenXMLAttrs = exports.adjustTokenSVGAttrs = exports.adjustTokenMathMLAttrs = exports.causesExit = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = void 0;\nconst html_js_1 = __webpack_require__(/*! ./html.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/html.js\");\n//MIME types\nconst MIME_TYPES = {\n    TEXT_HTML: \"text/html\",\n    APPLICATION_XML: \"application/xhtml+xml\"\n};\n//Attributes\nconst DEFINITION_URL_ATTR = \"definitionurl\";\nconst ADJUSTED_DEFINITION_URL_ATTR = \"definitionURL\";\nconst SVG_ATTRS_ADJUSTMENT_MAP = new Map([\n    \"attributeName\",\n    \"attributeType\",\n    \"baseFrequency\",\n    \"baseProfile\",\n    \"calcMode\",\n    \"clipPathUnits\",\n    \"diffuseConstant\",\n    \"edgeMode\",\n    \"filterUnits\",\n    \"glyphRef\",\n    \"gradientTransform\",\n    \"gradientUnits\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keyPoints\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"lengthAdjust\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerUnits\",\n    \"markerWidth\",\n    \"maskContentUnits\",\n    \"maskUnits\",\n    \"numOctaves\",\n    \"pathLength\",\n    \"patternContentUnits\",\n    \"patternTransform\",\n    \"patternUnits\",\n    \"pointsAtX\",\n    \"pointsAtY\",\n    \"pointsAtZ\",\n    \"preserveAlpha\",\n    \"preserveAspectRatio\",\n    \"primitiveUnits\",\n    \"refX\",\n    \"refY\",\n    \"repeatCount\",\n    \"repeatDur\",\n    \"requiredExtensions\",\n    \"requiredFeatures\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"spreadMethod\",\n    \"startOffset\",\n    \"stdDeviation\",\n    \"stitchTiles\",\n    \"surfaceScale\",\n    \"systemLanguage\",\n    \"tableValues\",\n    \"targetX\",\n    \"targetY\",\n    \"textLength\",\n    \"viewBox\",\n    \"viewTarget\",\n    \"xChannelSelector\",\n    \"yChannelSelector\",\n    \"zoomAndPan\"\n].map((attr)=>[\n        attr.toLowerCase(),\n        attr\n    ]));\nconst XML_ATTRS_ADJUSTMENT_MAP = new Map([\n    [\n        \"xlink:actuate\",\n        {\n            prefix: \"xlink\",\n            name: \"actuate\",\n            namespace: html_js_1.NS.XLINK\n        }\n    ],\n    [\n        \"xlink:arcrole\",\n        {\n            prefix: \"xlink\",\n            name: \"arcrole\",\n            namespace: html_js_1.NS.XLINK\n        }\n    ],\n    [\n        \"xlink:href\",\n        {\n            prefix: \"xlink\",\n            name: \"href\",\n            namespace: html_js_1.NS.XLINK\n        }\n    ],\n    [\n        \"xlink:role\",\n        {\n            prefix: \"xlink\",\n            name: \"role\",\n            namespace: html_js_1.NS.XLINK\n        }\n    ],\n    [\n        \"xlink:show\",\n        {\n            prefix: \"xlink\",\n            name: \"show\",\n            namespace: html_js_1.NS.XLINK\n        }\n    ],\n    [\n        \"xlink:title\",\n        {\n            prefix: \"xlink\",\n            name: \"title\",\n            namespace: html_js_1.NS.XLINK\n        }\n    ],\n    [\n        \"xlink:type\",\n        {\n            prefix: \"xlink\",\n            name: \"type\",\n            namespace: html_js_1.NS.XLINK\n        }\n    ],\n    [\n        \"xml:base\",\n        {\n            prefix: \"xml\",\n            name: \"base\",\n            namespace: html_js_1.NS.XML\n        }\n    ],\n    [\n        \"xml:lang\",\n        {\n            prefix: \"xml\",\n            name: \"lang\",\n            namespace: html_js_1.NS.XML\n        }\n    ],\n    [\n        \"xml:space\",\n        {\n            prefix: \"xml\",\n            name: \"space\",\n            namespace: html_js_1.NS.XML\n        }\n    ],\n    [\n        \"xmlns\",\n        {\n            prefix: \"\",\n            name: \"xmlns\",\n            namespace: html_js_1.NS.XMLNS\n        }\n    ],\n    [\n        \"xmlns:xlink\",\n        {\n            prefix: \"xmlns\",\n            name: \"xlink\",\n            namespace: html_js_1.NS.XMLNS\n        }\n    ]\n]);\n//SVG tag names adjustment map\nexports.SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([\n    \"altGlyph\",\n    \"altGlyphDef\",\n    \"altGlyphItem\",\n    \"animateColor\",\n    \"animateMotion\",\n    \"animateTransform\",\n    \"clipPath\",\n    \"feBlend\",\n    \"feColorMatrix\",\n    \"feComponentTransfer\",\n    \"feComposite\",\n    \"feConvolveMatrix\",\n    \"feDiffuseLighting\",\n    \"feDisplacementMap\",\n    \"feDistantLight\",\n    \"feFlood\",\n    \"feFuncA\",\n    \"feFuncB\",\n    \"feFuncG\",\n    \"feFuncR\",\n    \"feGaussianBlur\",\n    \"feImage\",\n    \"feMerge\",\n    \"feMergeNode\",\n    \"feMorphology\",\n    \"feOffset\",\n    \"fePointLight\",\n    \"feSpecularLighting\",\n    \"feSpotLight\",\n    \"feTile\",\n    \"feTurbulence\",\n    \"foreignObject\",\n    \"glyphRef\",\n    \"linearGradient\",\n    \"radialGradient\",\n    \"textPath\"\n].map((tn)=>[\n        tn.toLowerCase(),\n        tn\n    ]));\n//Tags that causes exit from foreign content\nconst EXITS_FOREIGN_CONTENT = new Set([\n    html_js_1.TAG_ID.B,\n    html_js_1.TAG_ID.BIG,\n    html_js_1.TAG_ID.BLOCKQUOTE,\n    html_js_1.TAG_ID.BODY,\n    html_js_1.TAG_ID.BR,\n    html_js_1.TAG_ID.CENTER,\n    html_js_1.TAG_ID.CODE,\n    html_js_1.TAG_ID.DD,\n    html_js_1.TAG_ID.DIV,\n    html_js_1.TAG_ID.DL,\n    html_js_1.TAG_ID.DT,\n    html_js_1.TAG_ID.EM,\n    html_js_1.TAG_ID.EMBED,\n    html_js_1.TAG_ID.H1,\n    html_js_1.TAG_ID.H2,\n    html_js_1.TAG_ID.H3,\n    html_js_1.TAG_ID.H4,\n    html_js_1.TAG_ID.H5,\n    html_js_1.TAG_ID.H6,\n    html_js_1.TAG_ID.HEAD,\n    html_js_1.TAG_ID.HR,\n    html_js_1.TAG_ID.I,\n    html_js_1.TAG_ID.IMG,\n    html_js_1.TAG_ID.LI,\n    html_js_1.TAG_ID.LISTING,\n    html_js_1.TAG_ID.MENU,\n    html_js_1.TAG_ID.META,\n    html_js_1.TAG_ID.NOBR,\n    html_js_1.TAG_ID.OL,\n    html_js_1.TAG_ID.P,\n    html_js_1.TAG_ID.PRE,\n    html_js_1.TAG_ID.RUBY,\n    html_js_1.TAG_ID.S,\n    html_js_1.TAG_ID.SMALL,\n    html_js_1.TAG_ID.SPAN,\n    html_js_1.TAG_ID.STRONG,\n    html_js_1.TAG_ID.STRIKE,\n    html_js_1.TAG_ID.SUB,\n    html_js_1.TAG_ID.SUP,\n    html_js_1.TAG_ID.TABLE,\n    html_js_1.TAG_ID.TT,\n    html_js_1.TAG_ID.U,\n    html_js_1.TAG_ID.UL,\n    html_js_1.TAG_ID.VAR\n]);\n//Check exit from foreign content\nfunction causesExit(startTagToken) {\n    const tn = startTagToken.tagID;\n    const isFontWithAttrs = tn === html_js_1.TAG_ID.FONT && startTagToken.attrs.some(({ name })=>name === html_js_1.ATTRS.COLOR || name === html_js_1.ATTRS.SIZE || name === html_js_1.ATTRS.FACE);\n    return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);\n}\nexports.causesExit = causesExit;\n//Token adjustments\nfunction adjustTokenMathMLAttrs(token) {\n    for(let i = 0; i < token.attrs.length; i++){\n        if (token.attrs[i].name === DEFINITION_URL_ATTR) {\n            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;\n            break;\n        }\n    }\n}\nexports.adjustTokenMathMLAttrs = adjustTokenMathMLAttrs;\nfunction adjustTokenSVGAttrs(token) {\n    for(let i = 0; i < token.attrs.length; i++){\n        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrName != null) {\n            token.attrs[i].name = adjustedAttrName;\n        }\n    }\n}\nexports.adjustTokenSVGAttrs = adjustTokenSVGAttrs;\nfunction adjustTokenXMLAttrs(token) {\n    for(let i = 0; i < token.attrs.length; i++){\n        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrEntry) {\n            token.attrs[i].prefix = adjustedAttrEntry.prefix;\n            token.attrs[i].name = adjustedAttrEntry.name;\n            token.attrs[i].namespace = adjustedAttrEntry.namespace;\n        }\n    }\n}\nexports.adjustTokenXMLAttrs = adjustTokenXMLAttrs;\nfunction adjustTokenSVGTagName(token) {\n    const adjustedTagName = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);\n    if (adjustedTagName != null) {\n        token.tagName = adjustedTagName;\n        token.tagID = (0, html_js_1.getTagID)(token.tagName);\n    }\n}\nexports.adjustTokenSVGTagName = adjustTokenSVGTagName;\n//Integration points\nfunction isMathMLTextIntegrationPoint(tn, ns) {\n    return ns === html_js_1.NS.MATHML && (tn === html_js_1.TAG_ID.MI || tn === html_js_1.TAG_ID.MO || tn === html_js_1.TAG_ID.MN || tn === html_js_1.TAG_ID.MS || tn === html_js_1.TAG_ID.MTEXT);\n}\nfunction isHtmlIntegrationPoint(tn, ns, attrs) {\n    if (ns === html_js_1.NS.MATHML && tn === html_js_1.TAG_ID.ANNOTATION_XML) {\n        for(let i = 0; i < attrs.length; i++){\n            if (attrs[i].name === html_js_1.ATTRS.ENCODING) {\n                const value = attrs[i].value.toLowerCase();\n                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;\n            }\n        }\n    }\n    return ns === html_js_1.NS.SVG && (tn === html_js_1.TAG_ID.FOREIGN_OBJECT || tn === html_js_1.TAG_ID.DESC || tn === html_js_1.TAG_ID.TITLE);\n}\nfunction isIntegrationPoint(tn, ns, attrs, foreignNS) {\n    return (!foreignNS || foreignNS === html_js_1.NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs) || (!foreignNS || foreignNS === html_js_1.NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns);\n}\nexports.isIntegrationPoint = isIntegrationPoint; //# sourceMappingURL=foreign-content.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/foreign-content.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/html.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/html.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hasUnescapedText = exports.isNumberedHeader = exports.SPECIAL_ELEMENTS = exports.getTagID = exports.TAG_ID = exports.TAG_NAMES = exports.DOCUMENT_MODE = exports.ATTRS = exports.NS = void 0;\n/** All valid namespaces in HTML. */ var NS;\n(function(NS) {\n    NS[\"HTML\"] = \"http://www.w3.org/1999/xhtml\";\n    NS[\"MATHML\"] = \"http://www.w3.org/1998/Math/MathML\";\n    NS[\"SVG\"] = \"http://www.w3.org/2000/svg\";\n    NS[\"XLINK\"] = \"http://www.w3.org/1999/xlink\";\n    NS[\"XML\"] = \"http://www.w3.org/XML/1998/namespace\";\n    NS[\"XMLNS\"] = \"http://www.w3.org/2000/xmlns/\";\n})(NS = exports.NS || (exports.NS = {}));\nvar ATTRS;\n(function(ATTRS) {\n    ATTRS[\"TYPE\"] = \"type\";\n    ATTRS[\"ACTION\"] = \"action\";\n    ATTRS[\"ENCODING\"] = \"encoding\";\n    ATTRS[\"PROMPT\"] = \"prompt\";\n    ATTRS[\"NAME\"] = \"name\";\n    ATTRS[\"COLOR\"] = \"color\";\n    ATTRS[\"FACE\"] = \"face\";\n    ATTRS[\"SIZE\"] = \"size\";\n})(ATTRS = exports.ATTRS || (exports.ATTRS = {}));\n/**\n * The mode of the document.\n *\n * @see {@link https://dom.spec.whatwg.org/#concept-document-limited-quirks}\n */ var DOCUMENT_MODE;\n(function(DOCUMENT_MODE) {\n    DOCUMENT_MODE[\"NO_QUIRKS\"] = \"no-quirks\";\n    DOCUMENT_MODE[\"QUIRKS\"] = \"quirks\";\n    DOCUMENT_MODE[\"LIMITED_QUIRKS\"] = \"limited-quirks\";\n})(DOCUMENT_MODE = exports.DOCUMENT_MODE || (exports.DOCUMENT_MODE = {}));\nvar TAG_NAMES;\n(function(TAG_NAMES) {\n    TAG_NAMES[\"A\"] = \"a\";\n    TAG_NAMES[\"ADDRESS\"] = \"address\";\n    TAG_NAMES[\"ANNOTATION_XML\"] = \"annotation-xml\";\n    TAG_NAMES[\"APPLET\"] = \"applet\";\n    TAG_NAMES[\"AREA\"] = \"area\";\n    TAG_NAMES[\"ARTICLE\"] = \"article\";\n    TAG_NAMES[\"ASIDE\"] = \"aside\";\n    TAG_NAMES[\"B\"] = \"b\";\n    TAG_NAMES[\"BASE\"] = \"base\";\n    TAG_NAMES[\"BASEFONT\"] = \"basefont\";\n    TAG_NAMES[\"BGSOUND\"] = \"bgsound\";\n    TAG_NAMES[\"BIG\"] = \"big\";\n    TAG_NAMES[\"BLOCKQUOTE\"] = \"blockquote\";\n    TAG_NAMES[\"BODY\"] = \"body\";\n    TAG_NAMES[\"BR\"] = \"br\";\n    TAG_NAMES[\"BUTTON\"] = \"button\";\n    TAG_NAMES[\"CAPTION\"] = \"caption\";\n    TAG_NAMES[\"CENTER\"] = \"center\";\n    TAG_NAMES[\"CODE\"] = \"code\";\n    TAG_NAMES[\"COL\"] = \"col\";\n    TAG_NAMES[\"COLGROUP\"] = \"colgroup\";\n    TAG_NAMES[\"DD\"] = \"dd\";\n    TAG_NAMES[\"DESC\"] = \"desc\";\n    TAG_NAMES[\"DETAILS\"] = \"details\";\n    TAG_NAMES[\"DIALOG\"] = \"dialog\";\n    TAG_NAMES[\"DIR\"] = \"dir\";\n    TAG_NAMES[\"DIV\"] = \"div\";\n    TAG_NAMES[\"DL\"] = \"dl\";\n    TAG_NAMES[\"DT\"] = \"dt\";\n    TAG_NAMES[\"EM\"] = \"em\";\n    TAG_NAMES[\"EMBED\"] = \"embed\";\n    TAG_NAMES[\"FIELDSET\"] = \"fieldset\";\n    TAG_NAMES[\"FIGCAPTION\"] = \"figcaption\";\n    TAG_NAMES[\"FIGURE\"] = \"figure\";\n    TAG_NAMES[\"FONT\"] = \"font\";\n    TAG_NAMES[\"FOOTER\"] = \"footer\";\n    TAG_NAMES[\"FOREIGN_OBJECT\"] = \"foreignObject\";\n    TAG_NAMES[\"FORM\"] = \"form\";\n    TAG_NAMES[\"FRAME\"] = \"frame\";\n    TAG_NAMES[\"FRAMESET\"] = \"frameset\";\n    TAG_NAMES[\"H1\"] = \"h1\";\n    TAG_NAMES[\"H2\"] = \"h2\";\n    TAG_NAMES[\"H3\"] = \"h3\";\n    TAG_NAMES[\"H4\"] = \"h4\";\n    TAG_NAMES[\"H5\"] = \"h5\";\n    TAG_NAMES[\"H6\"] = \"h6\";\n    TAG_NAMES[\"HEAD\"] = \"head\";\n    TAG_NAMES[\"HEADER\"] = \"header\";\n    TAG_NAMES[\"HGROUP\"] = \"hgroup\";\n    TAG_NAMES[\"HR\"] = \"hr\";\n    TAG_NAMES[\"HTML\"] = \"html\";\n    TAG_NAMES[\"I\"] = \"i\";\n    TAG_NAMES[\"IMG\"] = \"img\";\n    TAG_NAMES[\"IMAGE\"] = \"image\";\n    TAG_NAMES[\"INPUT\"] = \"input\";\n    TAG_NAMES[\"IFRAME\"] = \"iframe\";\n    TAG_NAMES[\"KEYGEN\"] = \"keygen\";\n    TAG_NAMES[\"LABEL\"] = \"label\";\n    TAG_NAMES[\"LI\"] = \"li\";\n    TAG_NAMES[\"LINK\"] = \"link\";\n    TAG_NAMES[\"LISTING\"] = \"listing\";\n    TAG_NAMES[\"MAIN\"] = \"main\";\n    TAG_NAMES[\"MALIGNMARK\"] = \"malignmark\";\n    TAG_NAMES[\"MARQUEE\"] = \"marquee\";\n    TAG_NAMES[\"MATH\"] = \"math\";\n    TAG_NAMES[\"MENU\"] = \"menu\";\n    TAG_NAMES[\"META\"] = \"meta\";\n    TAG_NAMES[\"MGLYPH\"] = \"mglyph\";\n    TAG_NAMES[\"MI\"] = \"mi\";\n    TAG_NAMES[\"MO\"] = \"mo\";\n    TAG_NAMES[\"MN\"] = \"mn\";\n    TAG_NAMES[\"MS\"] = \"ms\";\n    TAG_NAMES[\"MTEXT\"] = \"mtext\";\n    TAG_NAMES[\"NAV\"] = \"nav\";\n    TAG_NAMES[\"NOBR\"] = \"nobr\";\n    TAG_NAMES[\"NOFRAMES\"] = \"noframes\";\n    TAG_NAMES[\"NOEMBED\"] = \"noembed\";\n    TAG_NAMES[\"NOSCRIPT\"] = \"noscript\";\n    TAG_NAMES[\"OBJECT\"] = \"object\";\n    TAG_NAMES[\"OL\"] = \"ol\";\n    TAG_NAMES[\"OPTGROUP\"] = \"optgroup\";\n    TAG_NAMES[\"OPTION\"] = \"option\";\n    TAG_NAMES[\"P\"] = \"p\";\n    TAG_NAMES[\"PARAM\"] = \"param\";\n    TAG_NAMES[\"PLAINTEXT\"] = \"plaintext\";\n    TAG_NAMES[\"PRE\"] = \"pre\";\n    TAG_NAMES[\"RB\"] = \"rb\";\n    TAG_NAMES[\"RP\"] = \"rp\";\n    TAG_NAMES[\"RT\"] = \"rt\";\n    TAG_NAMES[\"RTC\"] = \"rtc\";\n    TAG_NAMES[\"RUBY\"] = \"ruby\";\n    TAG_NAMES[\"S\"] = \"s\";\n    TAG_NAMES[\"SCRIPT\"] = \"script\";\n    TAG_NAMES[\"SECTION\"] = \"section\";\n    TAG_NAMES[\"SELECT\"] = \"select\";\n    TAG_NAMES[\"SOURCE\"] = \"source\";\n    TAG_NAMES[\"SMALL\"] = \"small\";\n    TAG_NAMES[\"SPAN\"] = \"span\";\n    TAG_NAMES[\"STRIKE\"] = \"strike\";\n    TAG_NAMES[\"STRONG\"] = \"strong\";\n    TAG_NAMES[\"STYLE\"] = \"style\";\n    TAG_NAMES[\"SUB\"] = \"sub\";\n    TAG_NAMES[\"SUMMARY\"] = \"summary\";\n    TAG_NAMES[\"SUP\"] = \"sup\";\n    TAG_NAMES[\"TABLE\"] = \"table\";\n    TAG_NAMES[\"TBODY\"] = \"tbody\";\n    TAG_NAMES[\"TEMPLATE\"] = \"template\";\n    TAG_NAMES[\"TEXTAREA\"] = \"textarea\";\n    TAG_NAMES[\"TFOOT\"] = \"tfoot\";\n    TAG_NAMES[\"TD\"] = \"td\";\n    TAG_NAMES[\"TH\"] = \"th\";\n    TAG_NAMES[\"THEAD\"] = \"thead\";\n    TAG_NAMES[\"TITLE\"] = \"title\";\n    TAG_NAMES[\"TR\"] = \"tr\";\n    TAG_NAMES[\"TRACK\"] = \"track\";\n    TAG_NAMES[\"TT\"] = \"tt\";\n    TAG_NAMES[\"U\"] = \"u\";\n    TAG_NAMES[\"UL\"] = \"ul\";\n    TAG_NAMES[\"SVG\"] = \"svg\";\n    TAG_NAMES[\"VAR\"] = \"var\";\n    TAG_NAMES[\"WBR\"] = \"wbr\";\n    TAG_NAMES[\"XMP\"] = \"xmp\";\n})(TAG_NAMES = exports.TAG_NAMES || (exports.TAG_NAMES = {}));\n/**\n * Tag IDs are numeric IDs for known tag names.\n *\n * We use tag IDs to improve the performance of tag name comparisons.\n */ var TAG_ID;\n(function(TAG_ID) {\n    TAG_ID[TAG_ID[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    TAG_ID[TAG_ID[\"A\"] = 1] = \"A\";\n    TAG_ID[TAG_ID[\"ADDRESS\"] = 2] = \"ADDRESS\";\n    TAG_ID[TAG_ID[\"ANNOTATION_XML\"] = 3] = \"ANNOTATION_XML\";\n    TAG_ID[TAG_ID[\"APPLET\"] = 4] = \"APPLET\";\n    TAG_ID[TAG_ID[\"AREA\"] = 5] = \"AREA\";\n    TAG_ID[TAG_ID[\"ARTICLE\"] = 6] = \"ARTICLE\";\n    TAG_ID[TAG_ID[\"ASIDE\"] = 7] = \"ASIDE\";\n    TAG_ID[TAG_ID[\"B\"] = 8] = \"B\";\n    TAG_ID[TAG_ID[\"BASE\"] = 9] = \"BASE\";\n    TAG_ID[TAG_ID[\"BASEFONT\"] = 10] = \"BASEFONT\";\n    TAG_ID[TAG_ID[\"BGSOUND\"] = 11] = \"BGSOUND\";\n    TAG_ID[TAG_ID[\"BIG\"] = 12] = \"BIG\";\n    TAG_ID[TAG_ID[\"BLOCKQUOTE\"] = 13] = \"BLOCKQUOTE\";\n    TAG_ID[TAG_ID[\"BODY\"] = 14] = \"BODY\";\n    TAG_ID[TAG_ID[\"BR\"] = 15] = \"BR\";\n    TAG_ID[TAG_ID[\"BUTTON\"] = 16] = \"BUTTON\";\n    TAG_ID[TAG_ID[\"CAPTION\"] = 17] = \"CAPTION\";\n    TAG_ID[TAG_ID[\"CENTER\"] = 18] = \"CENTER\";\n    TAG_ID[TAG_ID[\"CODE\"] = 19] = \"CODE\";\n    TAG_ID[TAG_ID[\"COL\"] = 20] = \"COL\";\n    TAG_ID[TAG_ID[\"COLGROUP\"] = 21] = \"COLGROUP\";\n    TAG_ID[TAG_ID[\"DD\"] = 22] = \"DD\";\n    TAG_ID[TAG_ID[\"DESC\"] = 23] = \"DESC\";\n    TAG_ID[TAG_ID[\"DETAILS\"] = 24] = \"DETAILS\";\n    TAG_ID[TAG_ID[\"DIALOG\"] = 25] = \"DIALOG\";\n    TAG_ID[TAG_ID[\"DIR\"] = 26] = \"DIR\";\n    TAG_ID[TAG_ID[\"DIV\"] = 27] = \"DIV\";\n    TAG_ID[TAG_ID[\"DL\"] = 28] = \"DL\";\n    TAG_ID[TAG_ID[\"DT\"] = 29] = \"DT\";\n    TAG_ID[TAG_ID[\"EM\"] = 30] = \"EM\";\n    TAG_ID[TAG_ID[\"EMBED\"] = 31] = \"EMBED\";\n    TAG_ID[TAG_ID[\"FIELDSET\"] = 32] = \"FIELDSET\";\n    TAG_ID[TAG_ID[\"FIGCAPTION\"] = 33] = \"FIGCAPTION\";\n    TAG_ID[TAG_ID[\"FIGURE\"] = 34] = \"FIGURE\";\n    TAG_ID[TAG_ID[\"FONT\"] = 35] = \"FONT\";\n    TAG_ID[TAG_ID[\"FOOTER\"] = 36] = \"FOOTER\";\n    TAG_ID[TAG_ID[\"FOREIGN_OBJECT\"] = 37] = \"FOREIGN_OBJECT\";\n    TAG_ID[TAG_ID[\"FORM\"] = 38] = \"FORM\";\n    TAG_ID[TAG_ID[\"FRAME\"] = 39] = \"FRAME\";\n    TAG_ID[TAG_ID[\"FRAMESET\"] = 40] = \"FRAMESET\";\n    TAG_ID[TAG_ID[\"H1\"] = 41] = \"H1\";\n    TAG_ID[TAG_ID[\"H2\"] = 42] = \"H2\";\n    TAG_ID[TAG_ID[\"H3\"] = 43] = \"H3\";\n    TAG_ID[TAG_ID[\"H4\"] = 44] = \"H4\";\n    TAG_ID[TAG_ID[\"H5\"] = 45] = \"H5\";\n    TAG_ID[TAG_ID[\"H6\"] = 46] = \"H6\";\n    TAG_ID[TAG_ID[\"HEAD\"] = 47] = \"HEAD\";\n    TAG_ID[TAG_ID[\"HEADER\"] = 48] = \"HEADER\";\n    TAG_ID[TAG_ID[\"HGROUP\"] = 49] = \"HGROUP\";\n    TAG_ID[TAG_ID[\"HR\"] = 50] = \"HR\";\n    TAG_ID[TAG_ID[\"HTML\"] = 51] = \"HTML\";\n    TAG_ID[TAG_ID[\"I\"] = 52] = \"I\";\n    TAG_ID[TAG_ID[\"IMG\"] = 53] = \"IMG\";\n    TAG_ID[TAG_ID[\"IMAGE\"] = 54] = \"IMAGE\";\n    TAG_ID[TAG_ID[\"INPUT\"] = 55] = \"INPUT\";\n    TAG_ID[TAG_ID[\"IFRAME\"] = 56] = \"IFRAME\";\n    TAG_ID[TAG_ID[\"KEYGEN\"] = 57] = \"KEYGEN\";\n    TAG_ID[TAG_ID[\"LABEL\"] = 58] = \"LABEL\";\n    TAG_ID[TAG_ID[\"LI\"] = 59] = \"LI\";\n    TAG_ID[TAG_ID[\"LINK\"] = 60] = \"LINK\";\n    TAG_ID[TAG_ID[\"LISTING\"] = 61] = \"LISTING\";\n    TAG_ID[TAG_ID[\"MAIN\"] = 62] = \"MAIN\";\n    TAG_ID[TAG_ID[\"MALIGNMARK\"] = 63] = \"MALIGNMARK\";\n    TAG_ID[TAG_ID[\"MARQUEE\"] = 64] = \"MARQUEE\";\n    TAG_ID[TAG_ID[\"MATH\"] = 65] = \"MATH\";\n    TAG_ID[TAG_ID[\"MENU\"] = 66] = \"MENU\";\n    TAG_ID[TAG_ID[\"META\"] = 67] = \"META\";\n    TAG_ID[TAG_ID[\"MGLYPH\"] = 68] = \"MGLYPH\";\n    TAG_ID[TAG_ID[\"MI\"] = 69] = \"MI\";\n    TAG_ID[TAG_ID[\"MO\"] = 70] = \"MO\";\n    TAG_ID[TAG_ID[\"MN\"] = 71] = \"MN\";\n    TAG_ID[TAG_ID[\"MS\"] = 72] = \"MS\";\n    TAG_ID[TAG_ID[\"MTEXT\"] = 73] = \"MTEXT\";\n    TAG_ID[TAG_ID[\"NAV\"] = 74] = \"NAV\";\n    TAG_ID[TAG_ID[\"NOBR\"] = 75] = \"NOBR\";\n    TAG_ID[TAG_ID[\"NOFRAMES\"] = 76] = \"NOFRAMES\";\n    TAG_ID[TAG_ID[\"NOEMBED\"] = 77] = \"NOEMBED\";\n    TAG_ID[TAG_ID[\"NOSCRIPT\"] = 78] = \"NOSCRIPT\";\n    TAG_ID[TAG_ID[\"OBJECT\"] = 79] = \"OBJECT\";\n    TAG_ID[TAG_ID[\"OL\"] = 80] = \"OL\";\n    TAG_ID[TAG_ID[\"OPTGROUP\"] = 81] = \"OPTGROUP\";\n    TAG_ID[TAG_ID[\"OPTION\"] = 82] = \"OPTION\";\n    TAG_ID[TAG_ID[\"P\"] = 83] = \"P\";\n    TAG_ID[TAG_ID[\"PARAM\"] = 84] = \"PARAM\";\n    TAG_ID[TAG_ID[\"PLAINTEXT\"] = 85] = \"PLAINTEXT\";\n    TAG_ID[TAG_ID[\"PRE\"] = 86] = \"PRE\";\n    TAG_ID[TAG_ID[\"RB\"] = 87] = \"RB\";\n    TAG_ID[TAG_ID[\"RP\"] = 88] = \"RP\";\n    TAG_ID[TAG_ID[\"RT\"] = 89] = \"RT\";\n    TAG_ID[TAG_ID[\"RTC\"] = 90] = \"RTC\";\n    TAG_ID[TAG_ID[\"RUBY\"] = 91] = \"RUBY\";\n    TAG_ID[TAG_ID[\"S\"] = 92] = \"S\";\n    TAG_ID[TAG_ID[\"SCRIPT\"] = 93] = \"SCRIPT\";\n    TAG_ID[TAG_ID[\"SECTION\"] = 94] = \"SECTION\";\n    TAG_ID[TAG_ID[\"SELECT\"] = 95] = \"SELECT\";\n    TAG_ID[TAG_ID[\"SOURCE\"] = 96] = \"SOURCE\";\n    TAG_ID[TAG_ID[\"SMALL\"] = 97] = \"SMALL\";\n    TAG_ID[TAG_ID[\"SPAN\"] = 98] = \"SPAN\";\n    TAG_ID[TAG_ID[\"STRIKE\"] = 99] = \"STRIKE\";\n    TAG_ID[TAG_ID[\"STRONG\"] = 100] = \"STRONG\";\n    TAG_ID[TAG_ID[\"STYLE\"] = 101] = \"STYLE\";\n    TAG_ID[TAG_ID[\"SUB\"] = 102] = \"SUB\";\n    TAG_ID[TAG_ID[\"SUMMARY\"] = 103] = \"SUMMARY\";\n    TAG_ID[TAG_ID[\"SUP\"] = 104] = \"SUP\";\n    TAG_ID[TAG_ID[\"TABLE\"] = 105] = \"TABLE\";\n    TAG_ID[TAG_ID[\"TBODY\"] = 106] = \"TBODY\";\n    TAG_ID[TAG_ID[\"TEMPLATE\"] = 107] = \"TEMPLATE\";\n    TAG_ID[TAG_ID[\"TEXTAREA\"] = 108] = \"TEXTAREA\";\n    TAG_ID[TAG_ID[\"TFOOT\"] = 109] = \"TFOOT\";\n    TAG_ID[TAG_ID[\"TD\"] = 110] = \"TD\";\n    TAG_ID[TAG_ID[\"TH\"] = 111] = \"TH\";\n    TAG_ID[TAG_ID[\"THEAD\"] = 112] = \"THEAD\";\n    TAG_ID[TAG_ID[\"TITLE\"] = 113] = \"TITLE\";\n    TAG_ID[TAG_ID[\"TR\"] = 114] = \"TR\";\n    TAG_ID[TAG_ID[\"TRACK\"] = 115] = \"TRACK\";\n    TAG_ID[TAG_ID[\"TT\"] = 116] = \"TT\";\n    TAG_ID[TAG_ID[\"U\"] = 117] = \"U\";\n    TAG_ID[TAG_ID[\"UL\"] = 118] = \"UL\";\n    TAG_ID[TAG_ID[\"SVG\"] = 119] = \"SVG\";\n    TAG_ID[TAG_ID[\"VAR\"] = 120] = \"VAR\";\n    TAG_ID[TAG_ID[\"WBR\"] = 121] = \"WBR\";\n    TAG_ID[TAG_ID[\"XMP\"] = 122] = \"XMP\";\n})(TAG_ID = exports.TAG_ID || (exports.TAG_ID = {}));\nconst TAG_NAME_TO_ID = new Map([\n    [\n        TAG_NAMES.A,\n        TAG_ID.A\n    ],\n    [\n        TAG_NAMES.ADDRESS,\n        TAG_ID.ADDRESS\n    ],\n    [\n        TAG_NAMES.ANNOTATION_XML,\n        TAG_ID.ANNOTATION_XML\n    ],\n    [\n        TAG_NAMES.APPLET,\n        TAG_ID.APPLET\n    ],\n    [\n        TAG_NAMES.AREA,\n        TAG_ID.AREA\n    ],\n    [\n        TAG_NAMES.ARTICLE,\n        TAG_ID.ARTICLE\n    ],\n    [\n        TAG_NAMES.ASIDE,\n        TAG_ID.ASIDE\n    ],\n    [\n        TAG_NAMES.B,\n        TAG_ID.B\n    ],\n    [\n        TAG_NAMES.BASE,\n        TAG_ID.BASE\n    ],\n    [\n        TAG_NAMES.BASEFONT,\n        TAG_ID.BASEFONT\n    ],\n    [\n        TAG_NAMES.BGSOUND,\n        TAG_ID.BGSOUND\n    ],\n    [\n        TAG_NAMES.BIG,\n        TAG_ID.BIG\n    ],\n    [\n        TAG_NAMES.BLOCKQUOTE,\n        TAG_ID.BLOCKQUOTE\n    ],\n    [\n        TAG_NAMES.BODY,\n        TAG_ID.BODY\n    ],\n    [\n        TAG_NAMES.BR,\n        TAG_ID.BR\n    ],\n    [\n        TAG_NAMES.BUTTON,\n        TAG_ID.BUTTON\n    ],\n    [\n        TAG_NAMES.CAPTION,\n        TAG_ID.CAPTION\n    ],\n    [\n        TAG_NAMES.CENTER,\n        TAG_ID.CENTER\n    ],\n    [\n        TAG_NAMES.CODE,\n        TAG_ID.CODE\n    ],\n    [\n        TAG_NAMES.COL,\n        TAG_ID.COL\n    ],\n    [\n        TAG_NAMES.COLGROUP,\n        TAG_ID.COLGROUP\n    ],\n    [\n        TAG_NAMES.DD,\n        TAG_ID.DD\n    ],\n    [\n        TAG_NAMES.DESC,\n        TAG_ID.DESC\n    ],\n    [\n        TAG_NAMES.DETAILS,\n        TAG_ID.DETAILS\n    ],\n    [\n        TAG_NAMES.DIALOG,\n        TAG_ID.DIALOG\n    ],\n    [\n        TAG_NAMES.DIR,\n        TAG_ID.DIR\n    ],\n    [\n        TAG_NAMES.DIV,\n        TAG_ID.DIV\n    ],\n    [\n        TAG_NAMES.DL,\n        TAG_ID.DL\n    ],\n    [\n        TAG_NAMES.DT,\n        TAG_ID.DT\n    ],\n    [\n        TAG_NAMES.EM,\n        TAG_ID.EM\n    ],\n    [\n        TAG_NAMES.EMBED,\n        TAG_ID.EMBED\n    ],\n    [\n        TAG_NAMES.FIELDSET,\n        TAG_ID.FIELDSET\n    ],\n    [\n        TAG_NAMES.FIGCAPTION,\n        TAG_ID.FIGCAPTION\n    ],\n    [\n        TAG_NAMES.FIGURE,\n        TAG_ID.FIGURE\n    ],\n    [\n        TAG_NAMES.FONT,\n        TAG_ID.FONT\n    ],\n    [\n        TAG_NAMES.FOOTER,\n        TAG_ID.FOOTER\n    ],\n    [\n        TAG_NAMES.FOREIGN_OBJECT,\n        TAG_ID.FOREIGN_OBJECT\n    ],\n    [\n        TAG_NAMES.FORM,\n        TAG_ID.FORM\n    ],\n    [\n        TAG_NAMES.FRAME,\n        TAG_ID.FRAME\n    ],\n    [\n        TAG_NAMES.FRAMESET,\n        TAG_ID.FRAMESET\n    ],\n    [\n        TAG_NAMES.H1,\n        TAG_ID.H1\n    ],\n    [\n        TAG_NAMES.H2,\n        TAG_ID.H2\n    ],\n    [\n        TAG_NAMES.H3,\n        TAG_ID.H3\n    ],\n    [\n        TAG_NAMES.H4,\n        TAG_ID.H4\n    ],\n    [\n        TAG_NAMES.H5,\n        TAG_ID.H5\n    ],\n    [\n        TAG_NAMES.H6,\n        TAG_ID.H6\n    ],\n    [\n        TAG_NAMES.HEAD,\n        TAG_ID.HEAD\n    ],\n    [\n        TAG_NAMES.HEADER,\n        TAG_ID.HEADER\n    ],\n    [\n        TAG_NAMES.HGROUP,\n        TAG_ID.HGROUP\n    ],\n    [\n        TAG_NAMES.HR,\n        TAG_ID.HR\n    ],\n    [\n        TAG_NAMES.HTML,\n        TAG_ID.HTML\n    ],\n    [\n        TAG_NAMES.I,\n        TAG_ID.I\n    ],\n    [\n        TAG_NAMES.IMG,\n        TAG_ID.IMG\n    ],\n    [\n        TAG_NAMES.IMAGE,\n        TAG_ID.IMAGE\n    ],\n    [\n        TAG_NAMES.INPUT,\n        TAG_ID.INPUT\n    ],\n    [\n        TAG_NAMES.IFRAME,\n        TAG_ID.IFRAME\n    ],\n    [\n        TAG_NAMES.KEYGEN,\n        TAG_ID.KEYGEN\n    ],\n    [\n        TAG_NAMES.LABEL,\n        TAG_ID.LABEL\n    ],\n    [\n        TAG_NAMES.LI,\n        TAG_ID.LI\n    ],\n    [\n        TAG_NAMES.LINK,\n        TAG_ID.LINK\n    ],\n    [\n        TAG_NAMES.LISTING,\n        TAG_ID.LISTING\n    ],\n    [\n        TAG_NAMES.MAIN,\n        TAG_ID.MAIN\n    ],\n    [\n        TAG_NAMES.MALIGNMARK,\n        TAG_ID.MALIGNMARK\n    ],\n    [\n        TAG_NAMES.MARQUEE,\n        TAG_ID.MARQUEE\n    ],\n    [\n        TAG_NAMES.MATH,\n        TAG_ID.MATH\n    ],\n    [\n        TAG_NAMES.MENU,\n        TAG_ID.MENU\n    ],\n    [\n        TAG_NAMES.META,\n        TAG_ID.META\n    ],\n    [\n        TAG_NAMES.MGLYPH,\n        TAG_ID.MGLYPH\n    ],\n    [\n        TAG_NAMES.MI,\n        TAG_ID.MI\n    ],\n    [\n        TAG_NAMES.MO,\n        TAG_ID.MO\n    ],\n    [\n        TAG_NAMES.MN,\n        TAG_ID.MN\n    ],\n    [\n        TAG_NAMES.MS,\n        TAG_ID.MS\n    ],\n    [\n        TAG_NAMES.MTEXT,\n        TAG_ID.MTEXT\n    ],\n    [\n        TAG_NAMES.NAV,\n        TAG_ID.NAV\n    ],\n    [\n        TAG_NAMES.NOBR,\n        TAG_ID.NOBR\n    ],\n    [\n        TAG_NAMES.NOFRAMES,\n        TAG_ID.NOFRAMES\n    ],\n    [\n        TAG_NAMES.NOEMBED,\n        TAG_ID.NOEMBED\n    ],\n    [\n        TAG_NAMES.NOSCRIPT,\n        TAG_ID.NOSCRIPT\n    ],\n    [\n        TAG_NAMES.OBJECT,\n        TAG_ID.OBJECT\n    ],\n    [\n        TAG_NAMES.OL,\n        TAG_ID.OL\n    ],\n    [\n        TAG_NAMES.OPTGROUP,\n        TAG_ID.OPTGROUP\n    ],\n    [\n        TAG_NAMES.OPTION,\n        TAG_ID.OPTION\n    ],\n    [\n        TAG_NAMES.P,\n        TAG_ID.P\n    ],\n    [\n        TAG_NAMES.PARAM,\n        TAG_ID.PARAM\n    ],\n    [\n        TAG_NAMES.PLAINTEXT,\n        TAG_ID.PLAINTEXT\n    ],\n    [\n        TAG_NAMES.PRE,\n        TAG_ID.PRE\n    ],\n    [\n        TAG_NAMES.RB,\n        TAG_ID.RB\n    ],\n    [\n        TAG_NAMES.RP,\n        TAG_ID.RP\n    ],\n    [\n        TAG_NAMES.RT,\n        TAG_ID.RT\n    ],\n    [\n        TAG_NAMES.RTC,\n        TAG_ID.RTC\n    ],\n    [\n        TAG_NAMES.RUBY,\n        TAG_ID.RUBY\n    ],\n    [\n        TAG_NAMES.S,\n        TAG_ID.S\n    ],\n    [\n        TAG_NAMES.SCRIPT,\n        TAG_ID.SCRIPT\n    ],\n    [\n        TAG_NAMES.SECTION,\n        TAG_ID.SECTION\n    ],\n    [\n        TAG_NAMES.SELECT,\n        TAG_ID.SELECT\n    ],\n    [\n        TAG_NAMES.SOURCE,\n        TAG_ID.SOURCE\n    ],\n    [\n        TAG_NAMES.SMALL,\n        TAG_ID.SMALL\n    ],\n    [\n        TAG_NAMES.SPAN,\n        TAG_ID.SPAN\n    ],\n    [\n        TAG_NAMES.STRIKE,\n        TAG_ID.STRIKE\n    ],\n    [\n        TAG_NAMES.STRONG,\n        TAG_ID.STRONG\n    ],\n    [\n        TAG_NAMES.STYLE,\n        TAG_ID.STYLE\n    ],\n    [\n        TAG_NAMES.SUB,\n        TAG_ID.SUB\n    ],\n    [\n        TAG_NAMES.SUMMARY,\n        TAG_ID.SUMMARY\n    ],\n    [\n        TAG_NAMES.SUP,\n        TAG_ID.SUP\n    ],\n    [\n        TAG_NAMES.TABLE,\n        TAG_ID.TABLE\n    ],\n    [\n        TAG_NAMES.TBODY,\n        TAG_ID.TBODY\n    ],\n    [\n        TAG_NAMES.TEMPLATE,\n        TAG_ID.TEMPLATE\n    ],\n    [\n        TAG_NAMES.TEXTAREA,\n        TAG_ID.TEXTAREA\n    ],\n    [\n        TAG_NAMES.TFOOT,\n        TAG_ID.TFOOT\n    ],\n    [\n        TAG_NAMES.TD,\n        TAG_ID.TD\n    ],\n    [\n        TAG_NAMES.TH,\n        TAG_ID.TH\n    ],\n    [\n        TAG_NAMES.THEAD,\n        TAG_ID.THEAD\n    ],\n    [\n        TAG_NAMES.TITLE,\n        TAG_ID.TITLE\n    ],\n    [\n        TAG_NAMES.TR,\n        TAG_ID.TR\n    ],\n    [\n        TAG_NAMES.TRACK,\n        TAG_ID.TRACK\n    ],\n    [\n        TAG_NAMES.TT,\n        TAG_ID.TT\n    ],\n    [\n        TAG_NAMES.U,\n        TAG_ID.U\n    ],\n    [\n        TAG_NAMES.UL,\n        TAG_ID.UL\n    ],\n    [\n        TAG_NAMES.SVG,\n        TAG_ID.SVG\n    ],\n    [\n        TAG_NAMES.VAR,\n        TAG_ID.VAR\n    ],\n    [\n        TAG_NAMES.WBR,\n        TAG_ID.WBR\n    ],\n    [\n        TAG_NAMES.XMP,\n        TAG_ID.XMP\n    ]\n]);\nfunction getTagID(tagName) {\n    var _a;\n    return (_a = TAG_NAME_TO_ID.get(tagName)) !== null && _a !== void 0 ? _a : TAG_ID.UNKNOWN;\n}\nexports.getTagID = getTagID;\nconst $ = TAG_ID;\nexports.SPECIAL_ELEMENTS = {\n    [NS.HTML]: new Set([\n        $.ADDRESS,\n        $.APPLET,\n        $.AREA,\n        $.ARTICLE,\n        $.ASIDE,\n        $.BASE,\n        $.BASEFONT,\n        $.BGSOUND,\n        $.BLOCKQUOTE,\n        $.BODY,\n        $.BR,\n        $.BUTTON,\n        $.CAPTION,\n        $.CENTER,\n        $.COL,\n        $.COLGROUP,\n        $.DD,\n        $.DETAILS,\n        $.DIR,\n        $.DIV,\n        $.DL,\n        $.DT,\n        $.EMBED,\n        $.FIELDSET,\n        $.FIGCAPTION,\n        $.FIGURE,\n        $.FOOTER,\n        $.FORM,\n        $.FRAME,\n        $.FRAMESET,\n        $.H1,\n        $.H2,\n        $.H3,\n        $.H4,\n        $.H5,\n        $.H6,\n        $.HEAD,\n        $.HEADER,\n        $.HGROUP,\n        $.HR,\n        $.HTML,\n        $.IFRAME,\n        $.IMG,\n        $.INPUT,\n        $.LI,\n        $.LINK,\n        $.LISTING,\n        $.MAIN,\n        $.MARQUEE,\n        $.MENU,\n        $.META,\n        $.NAV,\n        $.NOEMBED,\n        $.NOFRAMES,\n        $.NOSCRIPT,\n        $.OBJECT,\n        $.OL,\n        $.P,\n        $.PARAM,\n        $.PLAINTEXT,\n        $.PRE,\n        $.SCRIPT,\n        $.SECTION,\n        $.SELECT,\n        $.SOURCE,\n        $.STYLE,\n        $.SUMMARY,\n        $.TABLE,\n        $.TBODY,\n        $.TD,\n        $.TEMPLATE,\n        $.TEXTAREA,\n        $.TFOOT,\n        $.TH,\n        $.THEAD,\n        $.TITLE,\n        $.TR,\n        $.TRACK,\n        $.UL,\n        $.WBR,\n        $.XMP\n    ]),\n    [NS.MATHML]: new Set([\n        $.MI,\n        $.MO,\n        $.MN,\n        $.MS,\n        $.MTEXT,\n        $.ANNOTATION_XML\n    ]),\n    [NS.SVG]: new Set([\n        $.TITLE,\n        $.FOREIGN_OBJECT,\n        $.DESC\n    ]),\n    [NS.XLINK]: new Set(),\n    [NS.XML]: new Set(),\n    [NS.XMLNS]: new Set()\n};\nfunction isNumberedHeader(tn) {\n    return tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6;\n}\nexports.isNumberedHeader = isNumberedHeader;\nconst UNESCAPED_TEXT = new Set([\n    TAG_NAMES.STYLE,\n    TAG_NAMES.SCRIPT,\n    TAG_NAMES.XMP,\n    TAG_NAMES.IFRAME,\n    TAG_NAMES.NOEMBED,\n    TAG_NAMES.NOFRAMES,\n    TAG_NAMES.PLAINTEXT\n]);\nfunction hasUnescapedText(tn, scriptingEnabled) {\n    return UNESCAPED_TEXT.has(tn) || scriptingEnabled && tn === TAG_NAMES.NOSCRIPT;\n}\nexports.hasUnescapedText = hasUnescapedText; //# sourceMappingURL=html.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/html.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/token.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/token.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getTokenAttr = exports.TokenType = void 0;\nvar TokenType;\n(function(TokenType) {\n    TokenType[TokenType[\"CHARACTER\"] = 0] = \"CHARACTER\";\n    TokenType[TokenType[\"NULL_CHARACTER\"] = 1] = \"NULL_CHARACTER\";\n    TokenType[TokenType[\"WHITESPACE_CHARACTER\"] = 2] = \"WHITESPACE_CHARACTER\";\n    TokenType[TokenType[\"START_TAG\"] = 3] = \"START_TAG\";\n    TokenType[TokenType[\"END_TAG\"] = 4] = \"END_TAG\";\n    TokenType[TokenType[\"COMMENT\"] = 5] = \"COMMENT\";\n    TokenType[TokenType[\"DOCTYPE\"] = 6] = \"DOCTYPE\";\n    TokenType[TokenType[\"EOF\"] = 7] = \"EOF\";\n    TokenType[TokenType[\"HIBERNATION\"] = 8] = \"HIBERNATION\";\n})(TokenType = exports.TokenType || (exports.TokenType = {}));\nfunction getTokenAttr(token, attrName) {\n    for(let i = token.attrs.length - 1; i >= 0; i--){\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n    return null;\n}\nexports.getTokenAttr = getTokenAttr; //# sourceMappingURL=token.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vcGFyc2U1QDcuMS4yL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvY29tbW9uL3Rva2VuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBR0EsaUJBQWlCLEdBQUcsS0FBSztBQUNoRCxJQUFJRztBQUNILFVBQVVBLFNBQVM7SUFDaEJBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLFlBQVksR0FBRyxFQUFFLEdBQUc7SUFDeENBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLGlCQUFpQixHQUFHLEVBQUUsR0FBRztJQUM3Q0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsdUJBQXVCLEdBQUcsRUFBRSxHQUFHO0lBQ25EQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxZQUFZLEdBQUcsRUFBRSxHQUFHO0lBQ3hDQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQ3RDQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQ3RDQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQ3RDQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHO0lBQ2xDQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxjQUFjLEdBQUcsRUFBRSxHQUFHO0FBQzlDLEdBQUdBLFlBQVlILFFBQVFHLFNBQVMsSUFBS0gsQ0FBQUEsaUJBQWlCLEdBQUcsQ0FBQztBQUMxRCxTQUFTRSxhQUFhRSxLQUFLLEVBQUVDLFFBQVE7SUFDakMsSUFBSyxJQUFJQyxJQUFJRixNQUFNRyxLQUFLLENBQUNDLE1BQU0sR0FBRyxHQUFHRixLQUFLLEdBQUdBLElBQUs7UUFDOUMsSUFBSUYsTUFBTUcsS0FBSyxDQUFDRCxFQUFFLENBQUNHLElBQUksS0FBS0osVUFBVTtZQUNsQyxPQUFPRCxNQUFNRyxLQUFLLENBQUNELEVBQUUsQ0FBQ0wsS0FBSztRQUMvQjtJQUNKO0lBQ0EsT0FBTztBQUNYO0FBQ0FELG9CQUFvQixHQUFHRSxjQUN2QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9wYXJzZTVANy4xLjIvbm9kZV9tb2R1bGVzL3BhcnNlNS9kaXN0L2Nqcy9jb21tb24vdG9rZW4uanM/OGIyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VG9rZW5BdHRyID0gZXhwb3J0cy5Ub2tlblR5cGUgPSB2b2lkIDA7XG52YXIgVG9rZW5UeXBlO1xuKGZ1bmN0aW9uIChUb2tlblR5cGUpIHtcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiQ0hBUkFDVEVSXCJdID0gMF0gPSBcIkNIQVJBQ1RFUlwiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJOVUxMX0NIQVJBQ1RFUlwiXSA9IDFdID0gXCJOVUxMX0NIQVJBQ1RFUlwiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJXSElURVNQQUNFX0NIQVJBQ1RFUlwiXSA9IDJdID0gXCJXSElURVNQQUNFX0NIQVJBQ1RFUlwiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJTVEFSVF9UQUdcIl0gPSAzXSA9IFwiU1RBUlRfVEFHXCI7XG4gICAgVG9rZW5UeXBlW1Rva2VuVHlwZVtcIkVORF9UQUdcIl0gPSA0XSA9IFwiRU5EX1RBR1wiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJDT01NRU5UXCJdID0gNV0gPSBcIkNPTU1FTlRcIjtcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiRE9DVFlQRVwiXSA9IDZdID0gXCJET0NUWVBFXCI7XG4gICAgVG9rZW5UeXBlW1Rva2VuVHlwZVtcIkVPRlwiXSA9IDddID0gXCJFT0ZcIjtcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiSElCRVJOQVRJT05cIl0gPSA4XSA9IFwiSElCRVJOQVRJT05cIjtcbn0pKFRva2VuVHlwZSA9IGV4cG9ydHMuVG9rZW5UeXBlIHx8IChleHBvcnRzLlRva2VuVHlwZSA9IHt9KSk7XG5mdW5jdGlvbiBnZXRUb2tlbkF0dHIodG9rZW4sIGF0dHJOYW1lKSB7XG4gICAgZm9yIChsZXQgaSA9IHRva2VuLmF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmICh0b2tlbi5hdHRyc1tpXS5uYW1lID09PSBhdHRyTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuLmF0dHJzW2ldLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5nZXRUb2tlbkF0dHIgPSBnZXRUb2tlbkF0dHI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2tlbi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRUb2tlbkF0dHIiLCJUb2tlblR5cGUiLCJ0b2tlbiIsImF0dHJOYW1lIiwiaSIsImF0dHJzIiwibGVuZ3RoIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/token.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/unicode.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/unicode.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isUndefinedCodePoint = exports.isControlCodePoint = exports.getSurrogatePairCodePoint = exports.isSurrogatePair = exports.isSurrogate = exports.SEQUENCES = exports.CODE_POINTS = exports.REPLACEMENT_CHARACTER = void 0;\nconst UNDEFINED_CODE_POINTS = new Set([\n    65534,\n    65535,\n    131070,\n    131071,\n    196606,\n    196607,\n    262142,\n    262143,\n    327678,\n    327679,\n    393214,\n    393215,\n    458750,\n    458751,\n    524286,\n    524287,\n    589822,\n    589823,\n    655358,\n    655359,\n    720894,\n    720895,\n    786430,\n    786431,\n    851966,\n    851967,\n    917502,\n    917503,\n    983038,\n    983039,\n    1048574,\n    1048575,\n    1114110,\n    1114111\n]);\nexports.REPLACEMENT_CHARACTER = \"�\";\nvar CODE_POINTS;\n(function(CODE_POINTS) {\n    CODE_POINTS[CODE_POINTS[\"EOF\"] = -1] = \"EOF\";\n    CODE_POINTS[CODE_POINTS[\"NULL\"] = 0] = \"NULL\";\n    CODE_POINTS[CODE_POINTS[\"TABULATION\"] = 9] = \"TABULATION\";\n    CODE_POINTS[CODE_POINTS[\"CARRIAGE_RETURN\"] = 13] = \"CARRIAGE_RETURN\";\n    CODE_POINTS[CODE_POINTS[\"LINE_FEED\"] = 10] = \"LINE_FEED\";\n    CODE_POINTS[CODE_POINTS[\"FORM_FEED\"] = 12] = \"FORM_FEED\";\n    CODE_POINTS[CODE_POINTS[\"SPACE\"] = 32] = \"SPACE\";\n    CODE_POINTS[CODE_POINTS[\"EXCLAMATION_MARK\"] = 33] = \"EXCLAMATION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"QUOTATION_MARK\"] = 34] = \"QUOTATION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"NUMBER_SIGN\"] = 35] = \"NUMBER_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\n    CODE_POINTS[CODE_POINTS[\"APOSTROPHE\"] = 39] = \"APOSTROPHE\";\n    CODE_POINTS[CODE_POINTS[\"HYPHEN_MINUS\"] = 45] = \"HYPHEN_MINUS\";\n    CODE_POINTS[CODE_POINTS[\"SOLIDUS\"] = 47] = \"SOLIDUS\";\n    CODE_POINTS[CODE_POINTS[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    CODE_POINTS[CODE_POINTS[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    CODE_POINTS[CODE_POINTS[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    CODE_POINTS[CODE_POINTS[\"LESS_THAN_SIGN\"] = 60] = \"LESS_THAN_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"EQUALS_SIGN\"] = 61] = \"EQUALS_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"GREATER_THAN_SIGN\"] = 62] = \"GREATER_THAN_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"QUESTION_MARK\"] = 63] = \"QUESTION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_A\"] = 65] = \"LATIN_CAPITAL_A\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_F\"] = 70] = \"LATIN_CAPITAL_F\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_X\"] = 88] = \"LATIN_CAPITAL_X\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_Z\"] = 90] = \"LATIN_CAPITAL_Z\";\n    CODE_POINTS[CODE_POINTS[\"RIGHT_SQUARE_BRACKET\"] = 93] = \"RIGHT_SQUARE_BRACKET\";\n    CODE_POINTS[CODE_POINTS[\"GRAVE_ACCENT\"] = 96] = \"GRAVE_ACCENT\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_A\"] = 97] = \"LATIN_SMALL_A\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_F\"] = 102] = \"LATIN_SMALL_F\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_X\"] = 120] = \"LATIN_SMALL_X\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_Z\"] = 122] = \"LATIN_SMALL_Z\";\n    CODE_POINTS[CODE_POINTS[\"REPLACEMENT_CHARACTER\"] = 65533] = \"REPLACEMENT_CHARACTER\";\n})(CODE_POINTS = exports.CODE_POINTS || (exports.CODE_POINTS = {}));\nexports.SEQUENCES = {\n    DASH_DASH: \"--\",\n    CDATA_START: \"[CDATA[\",\n    DOCTYPE: \"doctype\",\n    SCRIPT: \"script\",\n    PUBLIC: \"public\",\n    SYSTEM: \"system\"\n};\n//Surrogates\nfunction isSurrogate(cp) {\n    return cp >= 55296 && cp <= 57343;\n}\nexports.isSurrogate = isSurrogate;\nfunction isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n}\nexports.isSurrogatePair = isSurrogatePair;\nfunction getSurrogatePairCodePoint(cp1, cp2) {\n    return (cp1 - 55296) * 1024 + 9216 + cp2;\n}\nexports.getSurrogatePairCodePoint = getSurrogatePairCodePoint;\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f || cp >= 0x7f && cp <= 0x9f;\n}\nexports.isControlCodePoint = isControlCodePoint;\nfunction isUndefinedCodePoint(cp) {\n    return cp >= 64976 && cp <= 65007 || UNDEFINED_CODE_POINTS.has(cp);\n}\nexports.isUndefinedCodePoint = isUndefinedCodePoint; //# sourceMappingURL=unicode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/unicode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseFragment = exports.parse = exports.TokenizerMode = exports.Tokenizer = exports.Token = exports.html = exports.foreignContent = exports.ErrorCodes = exports.serializeOuter = exports.serialize = exports.Parser = exports.defaultTreeAdapter = void 0;\nconst index_js_1 = __webpack_require__(/*! ./parser/index.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/parser/index.js\");\nvar default_js_1 = __webpack_require__(/*! ./tree-adapters/default.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tree-adapters/default.js\");\nObject.defineProperty(exports, \"defaultTreeAdapter\", ({\n    enumerable: true,\n    get: function() {\n        return default_js_1.defaultTreeAdapter;\n    }\n}));\nvar index_js_2 = __webpack_require__(/*! ./parser/index.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/parser/index.js\");\nObject.defineProperty(exports, \"Parser\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_2.Parser;\n    }\n}));\nvar index_js_3 = __webpack_require__(/*! ./serializer/index.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/serializer/index.js\");\nObject.defineProperty(exports, \"serialize\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_3.serialize;\n    }\n}));\nObject.defineProperty(exports, \"serializeOuter\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_3.serializeOuter;\n    }\n}));\nvar error_codes_js_1 = __webpack_require__(/*! ./common/error-codes.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/error-codes.js\");\nObject.defineProperty(exports, \"ErrorCodes\", ({\n    enumerable: true,\n    get: function() {\n        return error_codes_js_1.ERR;\n    }\n}));\n/** @internal */ exports.foreignContent = __webpack_require__(/*! ./common/foreign-content.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/foreign-content.js\");\n/** @internal */ exports.html = __webpack_require__(/*! ./common/html.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/html.js\");\n/** @internal */ exports.Token = __webpack_require__(/*! ./common/token.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/token.js\");\n/** @internal */ var index_js_4 = __webpack_require__(/*! ./tokenizer/index.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tokenizer/index.js\");\nObject.defineProperty(exports, \"Tokenizer\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_4.Tokenizer;\n    }\n}));\nObject.defineProperty(exports, \"TokenizerMode\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_4.TokenizerMode;\n    }\n}));\n// Shorthands\n/**\n * Parses an HTML string.\n *\n * @param html Input HTML string.\n * @param options Parsing options.\n * @returns Document\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * console.log(document.childNodes[1].tagName); //> 'html'\n *```\n */ function parse(html, options) {\n    return index_js_1.Parser.parse(html, options);\n}\nexports.parse = parse;\nfunction parseFragment(fragmentContext, html, options) {\n    if (typeof fragmentContext === \"string\") {\n        options = html;\n        html = fragmentContext;\n        fragmentContext = null;\n    }\n    const parser = index_js_1.Parser.getFragmentParser(fragmentContext, options);\n    parser.tokenizer.write(html, true);\n    return parser.getFragment();\n}\nexports.parseFragment = parseFragment; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vcGFyc2U1QDcuMS4yL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHQSxhQUFhLEdBQUdBLHFCQUFxQixHQUFHQSxpQkFBaUIsR0FBR0EsYUFBYSxHQUFHQSxZQUFZLEdBQUdBLHNCQUFzQixHQUFHQSxrQkFBa0IsR0FBR0Esc0JBQXNCLEdBQUdBLGlCQUFpQixHQUFHQSxjQUFjLEdBQUdBLDBCQUEwQixHQUFHLEtBQUs7QUFDalEsTUFBTWMsYUFBYUMsbUJBQU9BLENBQUMsK0dBQW1CO0FBQzlDLElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLGlJQUE0QjtBQUN2RGpCLHNEQUFxRDtJQUFFbUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0YsYUFBYUgsa0JBQWtCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDeEksSUFBSU0sYUFBYUosbUJBQU9BLENBQUMsK0dBQW1CO0FBQzVDakIsMENBQXlDO0lBQUVtQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxXQUFXUCxNQUFNO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDOUcsSUFBSVEsYUFBYUwsbUJBQU9BLENBQUMsdUhBQXVCO0FBQ2hEakIsNkNBQTRDO0lBQUVtQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxXQUFXVCxTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDcEhiLGtEQUFpRDtJQUFFbUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsV0FBV1YsY0FBYztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzlILElBQUlXLG1CQUFtQk4sbUJBQU9BLENBQUMsMkhBQXlCO0FBQ3hEakIsOENBQTZDO0lBQUVtQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxpQkFBaUJDLEdBQUc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNySCxjQUFjLEdBQ2R0QixpTEFBK0Q7QUFDL0QsY0FBYyxHQUNkQSxpSkFBMEM7QUFDMUMsY0FBYyxHQUNkQSxvSkFBNEM7QUFDNUMsY0FBYyxHQUNkLElBQUl1QixhQUFhUixtQkFBT0EsQ0FBQyxxSEFBc0I7QUFDL0NqQiw2Q0FBNEM7SUFBRW1CLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9LLFdBQVdsQixTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDcEhQLGlEQUFnRDtJQUFFbUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0ssV0FBV25CLGFBQWE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM1SCxhQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQkMsR0FDRCxTQUFTRCxNQUFNSSxJQUFJLEVBQUVpQixPQUFPO0lBQ3hCLE9BQU9WLFdBQVdGLE1BQU0sQ0FBQ1QsS0FBSyxDQUFDSSxNQUFNaUI7QUFDekM7QUFDQXhCLGFBQWEsR0FBR0c7QUFDaEIsU0FBU0QsY0FBY3VCLGVBQWUsRUFBRWxCLElBQUksRUFBRWlCLE9BQU87SUFDakQsSUFBSSxPQUFPQyxvQkFBb0IsVUFBVTtRQUNyQ0QsVUFBVWpCO1FBQ1ZBLE9BQU9rQjtRQUNQQSxrQkFBa0I7SUFDdEI7SUFDQSxNQUFNQyxTQUFTWixXQUFXRixNQUFNLENBQUNlLGlCQUFpQixDQUFDRixpQkFBaUJEO0lBQ3BFRSxPQUFPRSxTQUFTLENBQUNDLEtBQUssQ0FBQ3RCLE1BQU07SUFDN0IsT0FBT21CLE9BQU9JLFdBQVc7QUFDN0I7QUFDQTlCLHFCQUFxQixHQUFHRSxlQUN4QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGF0ZXZlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9wYXJzZTVANy4xLjIvbm9kZV9tb2R1bGVzL3BhcnNlNS9kaXN0L2Nqcy9pbmRleC5qcz8zY2M0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZUZyYWdtZW50ID0gZXhwb3J0cy5wYXJzZSA9IGV4cG9ydHMuVG9rZW5pemVyTW9kZSA9IGV4cG9ydHMuVG9rZW5pemVyID0gZXhwb3J0cy5Ub2tlbiA9IGV4cG9ydHMuaHRtbCA9IGV4cG9ydHMuZm9yZWlnbkNvbnRlbnQgPSBleHBvcnRzLkVycm9yQ29kZXMgPSBleHBvcnRzLnNlcmlhbGl6ZU91dGVyID0gZXhwb3J0cy5zZXJpYWxpemUgPSBleHBvcnRzLlBhcnNlciA9IGV4cG9ydHMuZGVmYXVsdFRyZWVBZGFwdGVyID0gdm9pZCAwO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuL3BhcnNlci9pbmRleC5qc1wiKTtcbnZhciBkZWZhdWx0X2pzXzEgPSByZXF1aXJlKFwiLi90cmVlLWFkYXB0ZXJzL2RlZmF1bHQuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0VHJlZUFkYXB0ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlZmF1bHRfanNfMS5kZWZhdWx0VHJlZUFkYXB0ZXI7IH0gfSk7XG52YXIgaW5kZXhfanNfMiA9IHJlcXVpcmUoXCIuL3BhcnNlci9pbmRleC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBhcnNlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5kZXhfanNfMi5QYXJzZXI7IH0gfSk7XG52YXIgaW5kZXhfanNfMyA9IHJlcXVpcmUoXCIuL3NlcmlhbGl6ZXIvaW5kZXguanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXJpYWxpemVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluZGV4X2pzXzMuc2VyaWFsaXplOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2VyaWFsaXplT3V0ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluZGV4X2pzXzMuc2VyaWFsaXplT3V0ZXI7IH0gfSk7XG52YXIgZXJyb3JfY29kZXNfanNfMSA9IHJlcXVpcmUoXCIuL2NvbW1vbi9lcnJvci1jb2Rlcy5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVycm9yQ29kZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yX2NvZGVzX2pzXzEuRVJSOyB9IH0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5mb3JlaWduQ29udGVudCA9IHJlcXVpcmUoXCIuL2NvbW1vbi9mb3JlaWduLWNvbnRlbnQuanNcIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLmh0bWwgPSByZXF1aXJlKFwiLi9jb21tb24vaHRtbC5qc1wiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuVG9rZW4gPSByZXF1aXJlKFwiLi9jb21tb24vdG9rZW4uanNcIik7XG4vKiogQGludGVybmFsICovXG52YXIgaW5kZXhfanNfNCA9IHJlcXVpcmUoXCIuL3Rva2VuaXplci9pbmRleC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRva2VuaXplclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5kZXhfanNfNC5Ub2tlbml6ZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUb2tlbml6ZXJNb2RlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbmRleF9qc180LlRva2VuaXplck1vZGU7IH0gfSk7XG4vLyBTaG9ydGhhbmRzXG4vKipcbiAqIFBhcnNlcyBhbiBIVE1MIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gaHRtbCBJbnB1dCBIVE1MIHN0cmluZy5cbiAqIEBwYXJhbSBvcHRpb25zIFBhcnNpbmcgb3B0aW9ucy5cbiAqIEByZXR1cm5zIERvY3VtZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGFyc2U1ID0gcmVxdWlyZSgncGFyc2U1Jyk7XG4gKlxuICogY29uc3QgZG9jdW1lbnQgPSBwYXJzZTUucGFyc2UoJzwhRE9DVFlQRSBodG1sPjxodG1sPjxoZWFkPjwvaGVhZD48Ym9keT5IaSB0aGVyZSE8L2JvZHk+PC9odG1sPicpO1xuICpcbiAqIGNvbnNvbGUubG9nKGRvY3VtZW50LmNoaWxkTm9kZXNbMV0udGFnTmFtZSk7IC8vPiAnaHRtbCdcbiAqYGBgXG4gKi9cbmZ1bmN0aW9uIHBhcnNlKGh0bWwsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gaW5kZXhfanNfMS5QYXJzZXIucGFyc2UoaHRtbCwgb3B0aW9ucyk7XG59XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5mdW5jdGlvbiBwYXJzZUZyYWdtZW50KGZyYWdtZW50Q29udGV4dCwgaHRtbCwgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgZnJhZ21lbnRDb250ZXh0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBvcHRpb25zID0gaHRtbDtcbiAgICAgICAgaHRtbCA9IGZyYWdtZW50Q29udGV4dDtcbiAgICAgICAgZnJhZ21lbnRDb250ZXh0ID0gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcGFyc2VyID0gaW5kZXhfanNfMS5QYXJzZXIuZ2V0RnJhZ21lbnRQYXJzZXIoZnJhZ21lbnRDb250ZXh0LCBvcHRpb25zKTtcbiAgICBwYXJzZXIudG9rZW5pemVyLndyaXRlKGh0bWwsIHRydWUpO1xuICAgIHJldHVybiBwYXJzZXIuZ2V0RnJhZ21lbnQoKTtcbn1cbmV4cG9ydHMucGFyc2VGcmFnbWVudCA9IHBhcnNlRnJhZ21lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZUZyYWdtZW50IiwicGFyc2UiLCJUb2tlbml6ZXJNb2RlIiwiVG9rZW5pemVyIiwiVG9rZW4iLCJodG1sIiwiZm9yZWlnbkNvbnRlbnQiLCJFcnJvckNvZGVzIiwic2VyaWFsaXplT3V0ZXIiLCJzZXJpYWxpemUiLCJQYXJzZXIiLCJkZWZhdWx0VHJlZUFkYXB0ZXIiLCJpbmRleF9qc18xIiwicmVxdWlyZSIsImRlZmF1bHRfanNfMSIsImVudW1lcmFibGUiLCJnZXQiLCJpbmRleF9qc18yIiwiaW5kZXhfanNfMyIsImVycm9yX2NvZGVzX2pzXzEiLCJFUlIiLCJpbmRleF9qc180Iiwib3B0aW9ucyIsImZyYWdtZW50Q29udGV4dCIsInBhcnNlciIsImdldEZyYWdtZW50UGFyc2VyIiwidG9rZW5pemVyIiwid3JpdGUiLCJnZXRGcmFnbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/parser/formatting-element-list.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/parser/formatting-element-list.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FormattingElementList = exports.EntryType = void 0;\n//Const\nconst NOAH_ARK_CAPACITY = 3;\nvar EntryType;\n(function(EntryType) {\n    EntryType[EntryType[\"Marker\"] = 0] = \"Marker\";\n    EntryType[EntryType[\"Element\"] = 1] = \"Element\";\n})(EntryType = exports.EntryType || (exports.EntryType = {}));\nconst MARKER = {\n    type: EntryType.Marker\n};\n//List of formatting elements\nclass FormattingElementList {\n    constructor(treeAdapter){\n        this.treeAdapter = treeAdapter;\n        this.entries = [];\n        this.bookmark = null;\n    }\n    //Noah Ark's condition\n    //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n    //lightweight heuristics without thorough attributes check.\n    _getNoahArkConditionCandidates(newElement, neAttrs) {\n        const candidates = [];\n        const neAttrsLength = neAttrs.length;\n        const neTagName = this.treeAdapter.getTagName(newElement);\n        const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n        for(let i = 0; i < this.entries.length; i++){\n            const entry = this.entries[i];\n            if (entry.type === EntryType.Marker) {\n                break;\n            }\n            const { element } = entry;\n            if (this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {\n                const elementAttrs = this.treeAdapter.getAttrList(element);\n                if (elementAttrs.length === neAttrsLength) {\n                    candidates.push({\n                        idx: i,\n                        attrs: elementAttrs\n                    });\n                }\n            }\n        }\n        return candidates;\n    }\n    _ensureNoahArkCondition(newElement) {\n        if (this.entries.length < NOAH_ARK_CAPACITY) return;\n        const neAttrs = this.treeAdapter.getAttrList(newElement);\n        const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);\n        if (candidates.length < NOAH_ARK_CAPACITY) return;\n        //NOTE: build attrs map for the new element, so we can perform fast lookups\n        const neAttrsMap = new Map(neAttrs.map((neAttr)=>[\n                neAttr.name,\n                neAttr.value\n            ]));\n        let validCandidates = 0;\n        //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met\n        for(let i = 0; i < candidates.length; i++){\n            const candidate = candidates[i];\n            // We know that `candidate.attrs.length === neAttrs.length`\n            if (candidate.attrs.every((cAttr)=>neAttrsMap.get(cAttr.name) === cAttr.value)) {\n                validCandidates += 1;\n                if (validCandidates >= NOAH_ARK_CAPACITY) {\n                    this.entries.splice(candidate.idx, 1);\n                }\n            }\n        }\n    }\n    //Mutations\n    insertMarker() {\n        this.entries.unshift(MARKER);\n    }\n    pushElement(element, token) {\n        this._ensureNoahArkCondition(element);\n        this.entries.unshift({\n            type: EntryType.Element,\n            element,\n            token\n        });\n    }\n    insertElementAfterBookmark(element, token) {\n        const bookmarkIdx = this.entries.indexOf(this.bookmark);\n        this.entries.splice(bookmarkIdx, 0, {\n            type: EntryType.Element,\n            element,\n            token\n        });\n    }\n    removeEntry(entry) {\n        const entryIndex = this.entries.indexOf(entry);\n        if (entryIndex >= 0) {\n            this.entries.splice(entryIndex, 1);\n        }\n    }\n    /**\n     * Clears the list of formatting elements up to the last marker.\n     *\n     * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker\n     */ clearToLastMarker() {\n        const markerIdx = this.entries.indexOf(MARKER);\n        if (markerIdx >= 0) {\n            this.entries.splice(0, markerIdx + 1);\n        } else {\n            this.entries.length = 0;\n        }\n    }\n    //Search\n    getElementEntryInScopeWithTagName(tagName) {\n        const entry = this.entries.find((entry)=>entry.type === EntryType.Marker || this.treeAdapter.getTagName(entry.element) === tagName);\n        return entry && entry.type === EntryType.Element ? entry : null;\n    }\n    getElementEntry(element) {\n        return this.entries.find((entry)=>entry.type === EntryType.Element && entry.element === element);\n    }\n}\nexports.FormattingElementList = FormattingElementList; //# sourceMappingURL=formatting-element-list.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/parser/formatting-element-list.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/parser/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/parser/index.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Parser = void 0;\nconst index_js_1 = __webpack_require__(/*! ../tokenizer/index.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tokenizer/index.js\");\nconst open_element_stack_js_1 = __webpack_require__(/*! ./open-element-stack.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/parser/open-element-stack.js\");\nconst formatting_element_list_js_1 = __webpack_require__(/*! ./formatting-element-list.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/parser/formatting-element-list.js\");\nconst default_js_1 = __webpack_require__(/*! ../tree-adapters/default.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tree-adapters/default.js\");\nconst doctype = __webpack_require__(/*! ../common/doctype.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/doctype.js\");\nconst foreignContent = __webpack_require__(/*! ../common/foreign-content.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/foreign-content.js\");\nconst error_codes_js_1 = __webpack_require__(/*! ../common/error-codes.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/error-codes.js\");\nconst unicode = __webpack_require__(/*! ../common/unicode.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/unicode.js\");\nconst html_js_1 = __webpack_require__(/*! ../common/html.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/html.js\");\nconst token_js_1 = __webpack_require__(/*! ../common/token.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/token.js\");\n//Misc constants\nconst HIDDEN_INPUT_TYPE = \"hidden\";\n//Adoption agency loops iteration count\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3;\n//Insertion modes\nvar InsertionMode;\n(function(InsertionMode) {\n    InsertionMode[InsertionMode[\"INITIAL\"] = 0] = \"INITIAL\";\n    InsertionMode[InsertionMode[\"BEFORE_HTML\"] = 1] = \"BEFORE_HTML\";\n    InsertionMode[InsertionMode[\"BEFORE_HEAD\"] = 2] = \"BEFORE_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD\"] = 3] = \"IN_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD_NO_SCRIPT\"] = 4] = \"IN_HEAD_NO_SCRIPT\";\n    InsertionMode[InsertionMode[\"AFTER_HEAD\"] = 5] = \"AFTER_HEAD\";\n    InsertionMode[InsertionMode[\"IN_BODY\"] = 6] = \"IN_BODY\";\n    InsertionMode[InsertionMode[\"TEXT\"] = 7] = \"TEXT\";\n    InsertionMode[InsertionMode[\"IN_TABLE\"] = 8] = \"IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TABLE_TEXT\"] = 9] = \"IN_TABLE_TEXT\";\n    InsertionMode[InsertionMode[\"IN_CAPTION\"] = 10] = \"IN_CAPTION\";\n    InsertionMode[InsertionMode[\"IN_COLUMN_GROUP\"] = 11] = \"IN_COLUMN_GROUP\";\n    InsertionMode[InsertionMode[\"IN_TABLE_BODY\"] = 12] = \"IN_TABLE_BODY\";\n    InsertionMode[InsertionMode[\"IN_ROW\"] = 13] = \"IN_ROW\";\n    InsertionMode[InsertionMode[\"IN_CELL\"] = 14] = \"IN_CELL\";\n    InsertionMode[InsertionMode[\"IN_SELECT\"] = 15] = \"IN_SELECT\";\n    InsertionMode[InsertionMode[\"IN_SELECT_IN_TABLE\"] = 16] = \"IN_SELECT_IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TEMPLATE\"] = 17] = \"IN_TEMPLATE\";\n    InsertionMode[InsertionMode[\"AFTER_BODY\"] = 18] = \"AFTER_BODY\";\n    InsertionMode[InsertionMode[\"IN_FRAMESET\"] = 19] = \"IN_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_FRAMESET\"] = 20] = \"AFTER_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_BODY\"] = 21] = \"AFTER_AFTER_BODY\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_FRAMESET\"] = 22] = \"AFTER_AFTER_FRAMESET\";\n})(InsertionMode || (InsertionMode = {}));\nconst BASE_LOC = {\n    startLine: -1,\n    startCol: -1,\n    startOffset: -1,\n    endLine: -1,\n    endCol: -1,\n    endOffset: -1\n};\nconst TABLE_STRUCTURE_TAGS = new Set([\n    html_js_1.TAG_ID.TABLE,\n    html_js_1.TAG_ID.TBODY,\n    html_js_1.TAG_ID.TFOOT,\n    html_js_1.TAG_ID.THEAD,\n    html_js_1.TAG_ID.TR\n]);\nconst defaultParserOptions = {\n    scriptingEnabled: true,\n    sourceCodeLocationInfo: false,\n    treeAdapter: default_js_1.defaultTreeAdapter,\n    onParseError: null\n};\n//Parser\nclass Parser {\n    constructor(options, document, fragmentContext = null, scriptHandler = null){\n        this.fragmentContext = fragmentContext;\n        this.scriptHandler = scriptHandler;\n        this.currentToken = null;\n        this.stopped = false;\n        this.insertionMode = InsertionMode.INITIAL;\n        this.originalInsertionMode = InsertionMode.INITIAL;\n        this.headElement = null;\n        this.formElement = null;\n        /** Indicates that the current node is not an element in the HTML namespace */ this.currentNotInHTML = false;\n        /**\n         * The template insertion mode stack is maintained from the left.\n         * Ie. the topmost element will always have index 0.\n         */ this.tmplInsertionModeStack = [];\n        this.pendingCharacterTokens = [];\n        this.hasNonWhitespacePendingCharacterToken = false;\n        this.framesetOk = true;\n        this.skipNextNewLine = false;\n        this.fosterParentingEnabled = false;\n        this.options = Object.assign(Object.assign({}, defaultParserOptions), options);\n        this.treeAdapter = this.options.treeAdapter;\n        this.onParseError = this.options.onParseError;\n        // Always enable location info if we report parse errors.\n        if (this.onParseError) {\n            this.options.sourceCodeLocationInfo = true;\n        }\n        this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();\n        this.tokenizer = new index_js_1.Tokenizer(this.options, this);\n        this.activeFormattingElements = new formatting_element_list_js_1.FormattingElementList(this.treeAdapter);\n        this.fragmentContextID = fragmentContext ? (0, html_js_1.getTagID)(this.treeAdapter.getTagName(fragmentContext)) : html_js_1.TAG_ID.UNKNOWN;\n        this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);\n        this.openElements = new open_element_stack_js_1.OpenElementStack(this.document, this.treeAdapter, this);\n    }\n    // API\n    static parse(html, options) {\n        const parser = new this(options);\n        parser.tokenizer.write(html, true);\n        return parser.document;\n    }\n    static getFragmentParser(fragmentContext, options) {\n        const opts = Object.assign(Object.assign({}, defaultParserOptions), options);\n        //NOTE: use a <template> element as the fragment context if no context element was provided,\n        //so we will parse in a \"forgiving\" manner\n        fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : fragmentContext = opts.treeAdapter.createElement(html_js_1.TAG_NAMES.TEMPLATE, html_js_1.NS.HTML, []);\n        //NOTE: create a fake element which will be used as the `document` for fragment parsing.\n        //This is important for jsdom, where a new `document` cannot be created. This led to\n        //fragment parsing messing with the main `document`.\n        const documentMock = opts.treeAdapter.createElement(\"documentmock\", html_js_1.NS.HTML, []);\n        const parser = new this(opts, documentMock, fragmentContext);\n        if (parser.fragmentContextID === html_js_1.TAG_ID.TEMPLATE) {\n            parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n        }\n        parser._initTokenizerForFragmentParsing();\n        parser._insertFakeRootElement();\n        parser._resetInsertionMode();\n        parser._findFormInFragmentContext();\n        return parser;\n    }\n    getFragment() {\n        const rootElement = this.treeAdapter.getFirstChild(this.document);\n        const fragment = this.treeAdapter.createDocumentFragment();\n        this._adoptNodes(rootElement, fragment);\n        return fragment;\n    }\n    //Errors\n    _err(token, code, beforeToken) {\n        var _a;\n        if (!this.onParseError) return;\n        const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;\n        const err = {\n            code,\n            startLine: loc.startLine,\n            startCol: loc.startCol,\n            startOffset: loc.startOffset,\n            endLine: beforeToken ? loc.startLine : loc.endLine,\n            endCol: beforeToken ? loc.startCol : loc.endCol,\n            endOffset: beforeToken ? loc.startOffset : loc.endOffset\n        };\n        this.onParseError(err);\n    }\n    //Stack events\n    onItemPush(node, tid, isTop) {\n        var _a, _b;\n        (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n        if (isTop && this.openElements.stackTop > 0) this._setContextModes(node, tid);\n    }\n    onItemPop(node, isTop) {\n        var _a, _b;\n        if (this.options.sourceCodeLocationInfo) {\n            this._setEndLocation(node, this.currentToken);\n        }\n        (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);\n        if (isTop) {\n            let current;\n            let currentTagId;\n            if (this.openElements.stackTop === 0 && this.fragmentContext) {\n                current = this.fragmentContext;\n                currentTagId = this.fragmentContextID;\n            } else {\n                ({ current, currentTagId } = this.openElements);\n            }\n            this._setContextModes(current, currentTagId);\n        }\n    }\n    _setContextModes(current, tid) {\n        const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === html_js_1.NS.HTML;\n        this.currentNotInHTML = !isHTML;\n        this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);\n    }\n    _switchToTextParsing(currentToken, nextTokenizerState) {\n        this._insertElement(currentToken, html_js_1.NS.HTML);\n        this.tokenizer.state = nextTokenizerState;\n        this.originalInsertionMode = this.insertionMode;\n        this.insertionMode = InsertionMode.TEXT;\n    }\n    switchToPlaintextParsing() {\n        this.insertionMode = InsertionMode.TEXT;\n        this.originalInsertionMode = InsertionMode.IN_BODY;\n        this.tokenizer.state = index_js_1.TokenizerMode.PLAINTEXT;\n    }\n    //Fragment parsing\n    _getAdjustedCurrentElement() {\n        return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;\n    }\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n        while(node){\n            if (this.treeAdapter.getTagName(node) === html_js_1.TAG_NAMES.FORM) {\n                this.formElement = node;\n                break;\n            }\n            node = this.treeAdapter.getParentNode(node);\n        }\n    }\n    _initTokenizerForFragmentParsing() {\n        if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== html_js_1.NS.HTML) {\n            return;\n        }\n        switch(this.fragmentContextID){\n            case html_js_1.TAG_ID.TITLE:\n            case html_js_1.TAG_ID.TEXTAREA:\n                {\n                    this.tokenizer.state = index_js_1.TokenizerMode.RCDATA;\n                    break;\n                }\n            case html_js_1.TAG_ID.STYLE:\n            case html_js_1.TAG_ID.XMP:\n            case html_js_1.TAG_ID.IFRAME:\n            case html_js_1.TAG_ID.NOEMBED:\n            case html_js_1.TAG_ID.NOFRAMES:\n            case html_js_1.TAG_ID.NOSCRIPT:\n                {\n                    this.tokenizer.state = index_js_1.TokenizerMode.RAWTEXT;\n                    break;\n                }\n            case html_js_1.TAG_ID.SCRIPT:\n                {\n                    this.tokenizer.state = index_js_1.TokenizerMode.SCRIPT_DATA;\n                    break;\n                }\n            case html_js_1.TAG_ID.PLAINTEXT:\n                {\n                    this.tokenizer.state = index_js_1.TokenizerMode.PLAINTEXT;\n                    break;\n                }\n            default:\n        }\n    }\n    //Tree mutation\n    _setDocumentType(token) {\n        const name = token.name || \"\";\n        const publicId = token.publicId || \"\";\n        const systemId = token.systemId || \"\";\n        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n        if (token.location) {\n            const documentChildren = this.treeAdapter.getChildNodes(this.document);\n            const docTypeNode = documentChildren.find((node)=>this.treeAdapter.isDocumentTypeNode(node));\n            if (docTypeNode) {\n                this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);\n            }\n        }\n    }\n    _attachElementToTree(element, location) {\n        if (this.options.sourceCodeLocationInfo) {\n            const loc = location && Object.assign(Object.assign({}, location), {\n                startTag: location\n            });\n            this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n        }\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentElement(element);\n        } else {\n            const parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.appendChild(parent, element);\n        }\n    }\n    _appendElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n    }\n    _insertElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n        this.openElements.push(element, token.tagID);\n    }\n    _insertFakeElement(tagName, tagID) {\n        const element = this.treeAdapter.createElement(tagName, html_js_1.NS.HTML, []);\n        this._attachElementToTree(element, null);\n        this.openElements.push(element, tagID);\n    }\n    _insertTemplate(token) {\n        const tmpl = this.treeAdapter.createElement(token.tagName, html_js_1.NS.HTML, token.attrs);\n        const content = this.treeAdapter.createDocumentFragment();\n        this.treeAdapter.setTemplateContent(tmpl, content);\n        this._attachElementToTree(tmpl, token.location);\n        this.openElements.push(tmpl, token.tagID);\n        if (this.options.sourceCodeLocationInfo) this.treeAdapter.setNodeSourceCodeLocation(content, null);\n    }\n    _insertFakeRootElement() {\n        const element = this.treeAdapter.createElement(html_js_1.TAG_NAMES.HTML, html_js_1.NS.HTML, []);\n        if (this.options.sourceCodeLocationInfo) this.treeAdapter.setNodeSourceCodeLocation(element, null);\n        this.treeAdapter.appendChild(this.openElements.current, element);\n        this.openElements.push(element, html_js_1.TAG_ID.HTML);\n    }\n    _appendCommentNode(token, parent) {\n        const commentNode = this.treeAdapter.createCommentNode(token.data);\n        this.treeAdapter.appendChild(parent, commentNode);\n        if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n        }\n    }\n    _insertCharacters(token) {\n        let parent;\n        let beforeElement;\n        if (this._shouldFosterParentOnInsertion()) {\n            ({ parent, beforeElement } = this._findFosterParentingLocation());\n            if (beforeElement) {\n                this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);\n            } else {\n                this.treeAdapter.insertText(parent, token.chars);\n            }\n        } else {\n            parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.insertText(parent, token.chars);\n        }\n        if (!token.location) return;\n        const siblings = this.treeAdapter.getChildNodes(parent);\n        const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;\n        const textNode = siblings[textNodeIdx - 1];\n        //NOTE: if we have a location assigned by another token, then just update the end position\n        const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n        if (tnLoc) {\n            const { endLine, endCol, endOffset } = token.location;\n            this.treeAdapter.updateNodeSourceCodeLocation(textNode, {\n                endLine,\n                endCol,\n                endOffset\n            });\n        } else if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n        }\n    }\n    _adoptNodes(donor, recipient) {\n        for(let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)){\n            this.treeAdapter.detachNode(child);\n            this.treeAdapter.appendChild(recipient, child);\n        }\n    }\n    _setEndLocation(element, closingToken) {\n        if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {\n            const ctLoc = closingToken.location;\n            const tn = this.treeAdapter.getTagName(element);\n            const endLoc = // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n            // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n            closingToken.type === token_js_1.TokenType.END_TAG && tn === closingToken.tagName ? {\n                endTag: Object.assign({}, ctLoc),\n                endLine: ctLoc.endLine,\n                endCol: ctLoc.endCol,\n                endOffset: ctLoc.endOffset\n            } : {\n                endLine: ctLoc.startLine,\n                endCol: ctLoc.startCol,\n                endOffset: ctLoc.startOffset\n            };\n            this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n        }\n    }\n    //Token processing\n    shouldProcessStartTagTokenInForeignContent(token) {\n        // Check that neither current === document, or ns === NS.HTML\n        if (!this.currentNotInHTML) return false;\n        let current;\n        let currentTagId;\n        if (this.openElements.stackTop === 0 && this.fragmentContext) {\n            current = this.fragmentContext;\n            currentTagId = this.fragmentContextID;\n        } else {\n            ({ current, currentTagId } = this.openElements);\n        }\n        if (token.tagID === html_js_1.TAG_ID.SVG && this.treeAdapter.getTagName(current) === html_js_1.TAG_NAMES.ANNOTATION_XML && this.treeAdapter.getNamespaceURI(current) === html_js_1.NS.MATHML) {\n            return false;\n        }\n        return(// Check that `current` is not an integration point for HTML or MathML elements.\n        this.tokenizer.inForeignNode || // If it _is_ an integration point, then we might have to check that it is not an HTML\n        // integration point.\n        (token.tagID === html_js_1.TAG_ID.MGLYPH || token.tagID === html_js_1.TAG_ID.MALIGNMARK) && !this._isIntegrationPoint(currentTagId, current, html_js_1.NS.HTML));\n    }\n    _processToken(token) {\n        switch(token.type){\n            case token_js_1.TokenType.CHARACTER:\n                {\n                    this.onCharacter(token);\n                    break;\n                }\n            case token_js_1.TokenType.NULL_CHARACTER:\n                {\n                    this.onNullCharacter(token);\n                    break;\n                }\n            case token_js_1.TokenType.COMMENT:\n                {\n                    this.onComment(token);\n                    break;\n                }\n            case token_js_1.TokenType.DOCTYPE:\n                {\n                    this.onDoctype(token);\n                    break;\n                }\n            case token_js_1.TokenType.START_TAG:\n                {\n                    this._processStartTag(token);\n                    break;\n                }\n            case token_js_1.TokenType.END_TAG:\n                {\n                    this.onEndTag(token);\n                    break;\n                }\n            case token_js_1.TokenType.EOF:\n                {\n                    this.onEof(token);\n                    break;\n                }\n            case token_js_1.TokenType.WHITESPACE_CHARACTER:\n                {\n                    this.onWhitespaceCharacter(token);\n                    break;\n                }\n        }\n    }\n    //Integration points\n    _isIntegrationPoint(tid, element, foreignNS) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        const attrs = this.treeAdapter.getAttrList(element);\n        return foreignContent.isIntegrationPoint(tid, ns, attrs, foreignNS);\n    }\n    //Active formatting elements reconstruction\n    _reconstructActiveFormattingElements() {\n        const listLength = this.activeFormattingElements.entries.length;\n        if (listLength) {\n            const endIndex = this.activeFormattingElements.entries.findIndex((entry)=>entry.type === formatting_element_list_js_1.EntryType.Marker || this.openElements.contains(entry.element));\n            const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;\n            for(let i = unopenIdx; i >= 0; i--){\n                const entry = this.activeFormattingElements.entries[i];\n                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n                entry.element = this.openElements.current;\n            }\n        }\n    }\n    //Close elements\n    _closeTableCell() {\n        this.openElements.generateImpliedEndTags();\n        this.openElements.popUntilTableCellPopped();\n        this.activeFormattingElements.clearToLastMarker();\n        this.insertionMode = InsertionMode.IN_ROW;\n    }\n    _closePElement() {\n        this.openElements.generateImpliedEndTagsWithExclusion(html_js_1.TAG_ID.P);\n        this.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.P);\n    }\n    //Insertion modes\n    _resetInsertionMode() {\n        for(let i = this.openElements.stackTop; i >= 0; i--){\n            //Insertion mode reset map\n            switch(i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]){\n                case html_js_1.TAG_ID.TR:\n                    {\n                        this.insertionMode = InsertionMode.IN_ROW;\n                        return;\n                    }\n                case html_js_1.TAG_ID.TBODY:\n                case html_js_1.TAG_ID.THEAD:\n                case html_js_1.TAG_ID.TFOOT:\n                    {\n                        this.insertionMode = InsertionMode.IN_TABLE_BODY;\n                        return;\n                    }\n                case html_js_1.TAG_ID.CAPTION:\n                    {\n                        this.insertionMode = InsertionMode.IN_CAPTION;\n                        return;\n                    }\n                case html_js_1.TAG_ID.COLGROUP:\n                    {\n                        this.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n                        return;\n                    }\n                case html_js_1.TAG_ID.TABLE:\n                    {\n                        this.insertionMode = InsertionMode.IN_TABLE;\n                        return;\n                    }\n                case html_js_1.TAG_ID.BODY:\n                    {\n                        this.insertionMode = InsertionMode.IN_BODY;\n                        return;\n                    }\n                case html_js_1.TAG_ID.FRAMESET:\n                    {\n                        this.insertionMode = InsertionMode.IN_FRAMESET;\n                        return;\n                    }\n                case html_js_1.TAG_ID.SELECT:\n                    {\n                        this._resetInsertionModeForSelect(i);\n                        return;\n                    }\n                case html_js_1.TAG_ID.TEMPLATE:\n                    {\n                        this.insertionMode = this.tmplInsertionModeStack[0];\n                        return;\n                    }\n                case html_js_1.TAG_ID.HTML:\n                    {\n                        this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;\n                        return;\n                    }\n                case html_js_1.TAG_ID.TD:\n                case html_js_1.TAG_ID.TH:\n                    {\n                        if (i > 0) {\n                            this.insertionMode = InsertionMode.IN_CELL;\n                            return;\n                        }\n                        break;\n                    }\n                case html_js_1.TAG_ID.HEAD:\n                    {\n                        if (i > 0) {\n                            this.insertionMode = InsertionMode.IN_HEAD;\n                            return;\n                        }\n                        break;\n                    }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_BODY;\n    }\n    _resetInsertionModeForSelect(selectIdx) {\n        if (selectIdx > 0) {\n            for(let i = selectIdx - 1; i > 0; i--){\n                const tn = this.openElements.tagIDs[i];\n                if (tn === html_js_1.TAG_ID.TEMPLATE) {\n                    break;\n                } else if (tn === html_js_1.TAG_ID.TABLE) {\n                    this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;\n                    return;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_SELECT;\n    }\n    //Foster parenting\n    _isElementCausesFosterParenting(tn) {\n        return TABLE_STRUCTURE_TAGS.has(tn);\n    }\n    _shouldFosterParentOnInsertion() {\n        return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);\n    }\n    _findFosterParentingLocation() {\n        for(let i = this.openElements.stackTop; i >= 0; i--){\n            const openElement = this.openElements.items[i];\n            switch(this.openElements.tagIDs[i]){\n                case html_js_1.TAG_ID.TEMPLATE:\n                    {\n                        if (this.treeAdapter.getNamespaceURI(openElement) === html_js_1.NS.HTML) {\n                            return {\n                                parent: this.treeAdapter.getTemplateContent(openElement),\n                                beforeElement: null\n                            };\n                        }\n                        break;\n                    }\n                case html_js_1.TAG_ID.TABLE:\n                    {\n                        const parent = this.treeAdapter.getParentNode(openElement);\n                        if (parent) {\n                            return {\n                                parent,\n                                beforeElement: openElement\n                            };\n                        }\n                        return {\n                            parent: this.openElements.items[i - 1],\n                            beforeElement: null\n                        };\n                    }\n                default:\n            }\n        }\n        return {\n            parent: this.openElements.items[0],\n            beforeElement: null\n        };\n    }\n    _fosterParentElement(element) {\n        const location = this._findFosterParentingLocation();\n        if (location.beforeElement) {\n            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n        } else {\n            this.treeAdapter.appendChild(location.parent, element);\n        }\n    }\n    //Special elements\n    _isSpecialElement(element, id) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        return html_js_1.SPECIAL_ELEMENTS[ns].has(id);\n    }\n    onCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            characterInForeignContent(this, token);\n            return;\n        }\n        switch(this.insertionMode){\n            case InsertionMode.INITIAL:\n                {\n                    tokenInInitialMode(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HTML:\n                {\n                    tokenBeforeHtml(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HEAD:\n                {\n                    tokenBeforeHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD:\n                {\n                    tokenInHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n                {\n                    tokenInHeadNoScript(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_HEAD:\n                {\n                    tokenAfterHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE:\n                {\n                    characterInBody(this, token);\n                    break;\n                }\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n                {\n                    this._insertCharacters(token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n                {\n                    characterInTable(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_TEXT:\n                {\n                    characterInTableText(this, token);\n                    break;\n                }\n            case InsertionMode.IN_COLUMN_GROUP:\n                {\n                    tokenInColumnGroup(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_BODY:\n                {\n                    tokenAfterBody(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_AFTER_BODY:\n                {\n                    tokenAfterAfterBody(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    onNullCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            nullCharacterInForeignContent(this, token);\n            return;\n        }\n        switch(this.insertionMode){\n            case InsertionMode.INITIAL:\n                {\n                    tokenInInitialMode(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HTML:\n                {\n                    tokenBeforeHtml(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HEAD:\n                {\n                    tokenBeforeHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD:\n                {\n                    tokenInHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n                {\n                    tokenInHeadNoScript(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_HEAD:\n                {\n                    tokenAfterHead(this, token);\n                    break;\n                }\n            case InsertionMode.TEXT:\n                {\n                    this._insertCharacters(token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n                {\n                    characterInTable(this, token);\n                    break;\n                }\n            case InsertionMode.IN_COLUMN_GROUP:\n                {\n                    tokenInColumnGroup(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_BODY:\n                {\n                    tokenAfterBody(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_AFTER_BODY:\n                {\n                    tokenAfterAfterBody(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    onComment(token) {\n        this.skipNextNewLine = false;\n        if (this.currentNotInHTML) {\n            appendComment(this, token);\n            return;\n        }\n        switch(this.insertionMode){\n            case InsertionMode.INITIAL:\n            case InsertionMode.BEFORE_HTML:\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET:\n                {\n                    appendComment(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_TEXT:\n                {\n                    tokenInTableText(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_BODY:\n                {\n                    appendCommentToRootHtmlElement(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET:\n                {\n                    appendCommentToDocument(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    onDoctype(token) {\n        this.skipNextNewLine = false;\n        switch(this.insertionMode){\n            case InsertionMode.INITIAL:\n                {\n                    doctypeInInitialMode(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n                {\n                    this._err(token, error_codes_js_1.ERR.misplacedDoctype);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_TEXT:\n                {\n                    tokenInTableText(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    onStartTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        this._processStartTag(token);\n        if (token.selfClosing && !token.ackSelfClosing) {\n            this._err(token, error_codes_js_1.ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n        }\n    }\n    /**\n     * Processes a given start tag.\n     *\n     * `onStartTag` checks if a self-closing tag was recognized. When a token\n     * is moved inbetween multiple insertion modes, this check for self-closing\n     * could lead to false positives. To avoid this, `_processStartTag` is used\n     * for nested calls.\n     *\n     * @param token The token to process.\n     */ _processStartTag(token) {\n        if (this.shouldProcessStartTagTokenInForeignContent(token)) {\n            startTagInForeignContent(this, token);\n        } else {\n            this._startTagOutsideForeignContent(token);\n        }\n    }\n    _startTagOutsideForeignContent(token) {\n        switch(this.insertionMode){\n            case InsertionMode.INITIAL:\n                {\n                    tokenInInitialMode(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HTML:\n                {\n                    startTagBeforeHtml(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HEAD:\n                {\n                    startTagBeforeHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD:\n                {\n                    startTagInHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n                {\n                    startTagInHeadNoScript(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_HEAD:\n                {\n                    startTagAfterHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_BODY:\n                {\n                    startTagInBody(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE:\n                {\n                    startTagInTable(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_TEXT:\n                {\n                    tokenInTableText(this, token);\n                    break;\n                }\n            case InsertionMode.IN_CAPTION:\n                {\n                    startTagInCaption(this, token);\n                    break;\n                }\n            case InsertionMode.IN_COLUMN_GROUP:\n                {\n                    startTagInColumnGroup(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_BODY:\n                {\n                    startTagInTableBody(this, token);\n                    break;\n                }\n            case InsertionMode.IN_ROW:\n                {\n                    startTagInRow(this, token);\n                    break;\n                }\n            case InsertionMode.IN_CELL:\n                {\n                    startTagInCell(this, token);\n                    break;\n                }\n            case InsertionMode.IN_SELECT:\n                {\n                    startTagInSelect(this, token);\n                    break;\n                }\n            case InsertionMode.IN_SELECT_IN_TABLE:\n                {\n                    startTagInSelectInTable(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TEMPLATE:\n                {\n                    startTagInTemplate(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_BODY:\n                {\n                    startTagAfterBody(this, token);\n                    break;\n                }\n            case InsertionMode.IN_FRAMESET:\n                {\n                    startTagInFrameset(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_FRAMESET:\n                {\n                    startTagAfterFrameset(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_AFTER_BODY:\n                {\n                    startTagAfterAfterBody(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_AFTER_FRAMESET:\n                {\n                    startTagAfterAfterFrameset(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    onEndTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        if (this.currentNotInHTML) {\n            endTagInForeignContent(this, token);\n        } else {\n            this._endTagOutsideForeignContent(token);\n        }\n    }\n    _endTagOutsideForeignContent(token) {\n        switch(this.insertionMode){\n            case InsertionMode.INITIAL:\n                {\n                    tokenInInitialMode(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HTML:\n                {\n                    endTagBeforeHtml(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HEAD:\n                {\n                    endTagBeforeHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD:\n                {\n                    endTagInHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n                {\n                    endTagInHeadNoScript(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_HEAD:\n                {\n                    endTagAfterHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_BODY:\n                {\n                    endTagInBody(this, token);\n                    break;\n                }\n            case InsertionMode.TEXT:\n                {\n                    endTagInText(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE:\n                {\n                    endTagInTable(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_TEXT:\n                {\n                    tokenInTableText(this, token);\n                    break;\n                }\n            case InsertionMode.IN_CAPTION:\n                {\n                    endTagInCaption(this, token);\n                    break;\n                }\n            case InsertionMode.IN_COLUMN_GROUP:\n                {\n                    endTagInColumnGroup(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_BODY:\n                {\n                    endTagInTableBody(this, token);\n                    break;\n                }\n            case InsertionMode.IN_ROW:\n                {\n                    endTagInRow(this, token);\n                    break;\n                }\n            case InsertionMode.IN_CELL:\n                {\n                    endTagInCell(this, token);\n                    break;\n                }\n            case InsertionMode.IN_SELECT:\n                {\n                    endTagInSelect(this, token);\n                    break;\n                }\n            case InsertionMode.IN_SELECT_IN_TABLE:\n                {\n                    endTagInSelectInTable(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TEMPLATE:\n                {\n                    endTagInTemplate(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_BODY:\n                {\n                    endTagAfterBody(this, token);\n                    break;\n                }\n            case InsertionMode.IN_FRAMESET:\n                {\n                    endTagInFrameset(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_FRAMESET:\n                {\n                    endTagAfterFrameset(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_AFTER_BODY:\n                {\n                    tokenAfterAfterBody(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    onEof(token) {\n        switch(this.insertionMode){\n            case InsertionMode.INITIAL:\n                {\n                    tokenInInitialMode(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HTML:\n                {\n                    tokenBeforeHtml(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HEAD:\n                {\n                    tokenBeforeHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD:\n                {\n                    tokenInHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n                {\n                    tokenInHeadNoScript(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_HEAD:\n                {\n                    tokenAfterHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n                {\n                    eofInBody(this, token);\n                    break;\n                }\n            case InsertionMode.TEXT:\n                {\n                    eofInText(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_TEXT:\n                {\n                    tokenInTableText(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TEMPLATE:\n                {\n                    eofInTemplate(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET:\n                {\n                    stopParsing(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    onWhitespaceCharacter(token) {\n        if (this.skipNextNewLine) {\n            this.skipNextNewLine = false;\n            if (token.chars.charCodeAt(0) === unicode.CODE_POINTS.LINE_FEED) {\n                if (token.chars.length === 1) {\n                    return;\n                }\n                token.chars = token.chars.substr(1);\n            }\n        }\n        if (this.tokenizer.inForeignNode) {\n            this._insertCharacters(token);\n            return;\n        }\n        switch(this.insertionMode){\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET:\n                {\n                    this._insertCharacters(token);\n                    break;\n                }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET:\n                {\n                    whitespaceCharacterInBody(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n                {\n                    characterInTable(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_TEXT:\n                {\n                    whitespaceCharacterInTableText(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n}\nexports.Parser = Parser;\n//Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n//Steps 5-8 of the algorithm\nfunction aaObtainFormattingElementEntry(p, token) {\n    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n    if (formattingElementEntry) {\n        if (!p.openElements.contains(formattingElementEntry.element)) {\n            p.activeFormattingElements.removeEntry(formattingElementEntry);\n            formattingElementEntry = null;\n        } else if (!p.openElements.hasInScope(token.tagID)) {\n            formattingElementEntry = null;\n        }\n    } else {\n        genericEndTagInBody(p, token);\n    }\n    return formattingElementEntry;\n}\n//Steps 9 and 10 of the algorithm\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n    let furthestBlock = null;\n    let idx = p.openElements.stackTop;\n    for(; idx >= 0; idx--){\n        const element = p.openElements.items[idx];\n        if (element === formattingElementEntry.element) {\n            break;\n        }\n        if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {\n            furthestBlock = element;\n        }\n    }\n    if (!furthestBlock) {\n        p.openElements.shortenToLength(idx < 0 ? 0 : idx);\n        p.activeFormattingElements.removeEntry(formattingElementEntry);\n    }\n    return furthestBlock;\n}\n//Step 13 of the algorithm\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n    let lastElement = furthestBlock;\n    let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n    for(let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement){\n        //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n        nextElement = p.openElements.getCommonAncestor(element);\n        const elementEntry = p.activeFormattingElements.getElementEntry(element);\n        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n        if (shouldRemoveFromOpenElements) {\n            if (counterOverflow) {\n                p.activeFormattingElements.removeEntry(elementEntry);\n            }\n            p.openElements.remove(element);\n        } else {\n            element = aaRecreateElementFromEntry(p, elementEntry);\n            if (lastElement === furthestBlock) {\n                p.activeFormattingElements.bookmark = elementEntry;\n            }\n            p.treeAdapter.detachNode(lastElement);\n            p.treeAdapter.appendChild(element, lastElement);\n            lastElement = element;\n        }\n    }\n    return lastElement;\n}\n//Step 13.7 of the algorithm\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n    p.openElements.replace(elementEntry.element, newElement);\n    elementEntry.element = newElement;\n    return newElement;\n}\n//Step 14 of the algorithm\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n    const tn = p.treeAdapter.getTagName(commonAncestor);\n    const tid = (0, html_js_1.getTagID)(tn);\n    if (p._isElementCausesFosterParenting(tid)) {\n        p._fosterParentElement(lastElement);\n    } else {\n        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n        if (tid === html_js_1.TAG_ID.TEMPLATE && ns === html_js_1.NS.HTML) {\n            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n        }\n        p.treeAdapter.appendChild(commonAncestor, lastElement);\n    }\n}\n//Steps 15-19 of the algorithm\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n    const { token } = formattingElementEntry;\n    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n    p._adoptNodes(furthestBlock, newElement);\n    p.treeAdapter.appendChild(furthestBlock, newElement);\n    p.activeFormattingElements.insertElementAfterBookmark(newElement, token);\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n    p.openElements.remove(formattingElementEntry.element);\n    p.openElements.insertAfter(furthestBlock, newElement, token.tagID);\n}\n//Algorithm entry point\nfunction callAdoptionAgency(p, token) {\n    for(let i = 0; i < AA_OUTER_LOOP_ITER; i++){\n        const formattingElementEntry = aaObtainFormattingElementEntry(p, token);\n        if (!formattingElementEntry) {\n            break;\n        }\n        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n        if (!furthestBlock) {\n            break;\n        }\n        p.activeFormattingElements.bookmark = formattingElementEntry;\n        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n        p.treeAdapter.detachNode(lastElement);\n        if (commonAncestor) aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n    }\n}\n//Generic token handlers\n//------------------------------------------------------------------\nfunction appendComment(p, token) {\n    p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);\n}\nfunction appendCommentToRootHtmlElement(p, token) {\n    p._appendCommentNode(token, p.openElements.items[0]);\n}\nfunction appendCommentToDocument(p, token) {\n    p._appendCommentNode(token, p.document);\n}\nfunction stopParsing(p, token) {\n    p.stopped = true;\n    // NOTE: Set end locations for elements that remain on the open element stack.\n    if (token.location) {\n        // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.\n        // This is a problem, as we might overwrite their end position here.\n        const target = p.fragmentContext ? 0 : 2;\n        for(let i = p.openElements.stackTop; i >= target; i--){\n            p._setEndLocation(p.openElements.items[i], token);\n        }\n        // Handle `html` and `body`\n        if (!p.fragmentContext && p.openElements.stackTop >= 0) {\n            const htmlElement = p.openElements.items[0];\n            const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);\n            if (htmlLocation && !htmlLocation.endTag) {\n                p._setEndLocation(htmlElement, token);\n                if (p.openElements.stackTop >= 1) {\n                    const bodyElement = p.openElements.items[1];\n                    const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);\n                    if (bodyLocation && !bodyLocation.endTag) {\n                        p._setEndLocation(bodyElement, token);\n                    }\n                }\n            }\n        }\n    }\n}\n// The \"initial\" insertion mode\n//------------------------------------------------------------------\nfunction doctypeInInitialMode(p, token) {\n    p._setDocumentType(token);\n    const mode = token.forceQuirks ? html_js_1.DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n    if (!doctype.isConforming(token)) {\n        p._err(token, error_codes_js_1.ERR.nonConformingDoctype);\n    }\n    p.treeAdapter.setDocumentMode(p.document, mode);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n}\nfunction tokenInInitialMode(p, token) {\n    p._err(token, error_codes_js_1.ERR.missingDoctype, true);\n    p.treeAdapter.setDocumentMode(p.document, html_js_1.DOCUMENT_MODE.QUIRKS);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n    p._processToken(token);\n}\n// The \"before html\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHtml(p, token) {\n    if (token.tagID === html_js_1.TAG_ID.HTML) {\n        p._insertElement(token, html_js_1.NS.HTML);\n        p.insertionMode = InsertionMode.BEFORE_HEAD;\n    } else {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction endTagBeforeHtml(p, token) {\n    const tn = token.tagID;\n    if (tn === html_js_1.TAG_ID.HTML || tn === html_js_1.TAG_ID.HEAD || tn === html_js_1.TAG_ID.BODY || tn === html_js_1.TAG_ID.BR) {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction tokenBeforeHtml(p, token) {\n    p._insertFakeRootElement();\n    p.insertionMode = InsertionMode.BEFORE_HEAD;\n    p._processToken(token);\n}\n// The \"before head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHead(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.HEAD:\n            {\n                p._insertElement(token, html_js_1.NS.HTML);\n                p.headElement = p.openElements.current;\n                p.insertionMode = InsertionMode.IN_HEAD;\n                break;\n            }\n        default:\n            {\n                tokenBeforeHead(p, token);\n            }\n    }\n}\nfunction endTagBeforeHead(p, token) {\n    const tn = token.tagID;\n    if (tn === html_js_1.TAG_ID.HEAD || tn === html_js_1.TAG_ID.BODY || tn === html_js_1.TAG_ID.HTML || tn === html_js_1.TAG_ID.BR) {\n        tokenBeforeHead(p, token);\n    } else {\n        p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenBeforeHead(p, token) {\n    p._insertFakeElement(html_js_1.TAG_NAMES.HEAD, html_js_1.TAG_ID.HEAD);\n    p.headElement = p.openElements.current;\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"in head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHead(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BASE:\n        case html_js_1.TAG_ID.BASEFONT:\n        case html_js_1.TAG_ID.BGSOUND:\n        case html_js_1.TAG_ID.LINK:\n        case html_js_1.TAG_ID.META:\n            {\n                p._appendElement(token, html_js_1.NS.HTML);\n                token.ackSelfClosing = true;\n                break;\n            }\n        case html_js_1.TAG_ID.TITLE:\n            {\n                p._switchToTextParsing(token, index_js_1.TokenizerMode.RCDATA);\n                break;\n            }\n        case html_js_1.TAG_ID.NOSCRIPT:\n            {\n                if (p.options.scriptingEnabled) {\n                    p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n                } else {\n                    p._insertElement(token, html_js_1.NS.HTML);\n                    p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.NOFRAMES:\n        case html_js_1.TAG_ID.STYLE:\n            {\n                p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n                break;\n            }\n        case html_js_1.TAG_ID.SCRIPT:\n            {\n                p._switchToTextParsing(token, index_js_1.TokenizerMode.SCRIPT_DATA);\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                p._insertTemplate(token);\n                p.activeFormattingElements.insertMarker();\n                p.framesetOk = false;\n                p.insertionMode = InsertionMode.IN_TEMPLATE;\n                p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n                break;\n            }\n        case html_js_1.TAG_ID.HEAD:\n            {\n                p._err(token, error_codes_js_1.ERR.misplacedStartTagForHeadElement);\n                break;\n            }\n        default:\n            {\n                tokenInHead(p, token);\n            }\n    }\n}\nfunction endTagInHead(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HEAD:\n            {\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.AFTER_HEAD;\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n        case html_js_1.TAG_ID.BR:\n        case html_js_1.TAG_ID.HTML:\n            {\n                tokenInHead(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                templateEndTagInHead(p, token);\n                break;\n            }\n        default:\n            {\n                p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n            }\n    }\n}\nfunction templateEndTagInHead(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.generateImpliedEndTagsThoroughly();\n        if (p.openElements.currentTagId !== html_js_1.TAG_ID.TEMPLATE) {\n            p._err(token, error_codes_js_1.ERR.closingOfElementWithOpenChildElements);\n        }\n        p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n    } else {\n        p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenInHead(p, token) {\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.AFTER_HEAD;\n    p._processToken(token);\n}\n// The \"in head no script\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHeadNoScript(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BASEFONT:\n        case html_js_1.TAG_ID.BGSOUND:\n        case html_js_1.TAG_ID.HEAD:\n        case html_js_1.TAG_ID.LINK:\n        case html_js_1.TAG_ID.META:\n        case html_js_1.TAG_ID.NOFRAMES:\n        case html_js_1.TAG_ID.STYLE:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.NOSCRIPT:\n            {\n                p._err(token, error_codes_js_1.ERR.nestedNoscriptInHead);\n                break;\n            }\n        default:\n            {\n                tokenInHeadNoScript(p, token);\n            }\n    }\n}\nfunction endTagInHeadNoScript(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.NOSCRIPT:\n            {\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_HEAD;\n                break;\n            }\n        case html_js_1.TAG_ID.BR:\n            {\n                tokenInHeadNoScript(p, token);\n                break;\n            }\n        default:\n            {\n                p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n            }\n    }\n}\nfunction tokenInHeadNoScript(p, token) {\n    const errCode = token.type === token_js_1.TokenType.EOF ? error_codes_js_1.ERR.openElementsLeftAfterEof : error_codes_js_1.ERR.disallowedContentInNoscriptInHead;\n    p._err(token, errCode);\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"after head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterHead(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n            {\n                p._insertElement(token, html_js_1.NS.HTML);\n                p.framesetOk = false;\n                p.insertionMode = InsertionMode.IN_BODY;\n                break;\n            }\n        case html_js_1.TAG_ID.FRAMESET:\n            {\n                p._insertElement(token, html_js_1.NS.HTML);\n                p.insertionMode = InsertionMode.IN_FRAMESET;\n                break;\n            }\n        case html_js_1.TAG_ID.BASE:\n        case html_js_1.TAG_ID.BASEFONT:\n        case html_js_1.TAG_ID.BGSOUND:\n        case html_js_1.TAG_ID.LINK:\n        case html_js_1.TAG_ID.META:\n        case html_js_1.TAG_ID.NOFRAMES:\n        case html_js_1.TAG_ID.SCRIPT:\n        case html_js_1.TAG_ID.STYLE:\n        case html_js_1.TAG_ID.TEMPLATE:\n        case html_js_1.TAG_ID.TITLE:\n            {\n                p._err(token, error_codes_js_1.ERR.abandonedHeadElementChild);\n                p.openElements.push(p.headElement, html_js_1.TAG_ID.HEAD);\n                startTagInHead(p, token);\n                p.openElements.remove(p.headElement);\n                break;\n            }\n        case html_js_1.TAG_ID.HEAD:\n            {\n                p._err(token, error_codes_js_1.ERR.misplacedStartTagForHeadElement);\n                break;\n            }\n        default:\n            {\n                tokenAfterHead(p, token);\n            }\n    }\n}\nfunction endTagAfterHead(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.BODY:\n        case html_js_1.TAG_ID.HTML:\n        case html_js_1.TAG_ID.BR:\n            {\n                tokenAfterHead(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                templateEndTagInHead(p, token);\n                break;\n            }\n        default:\n            {\n                p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n            }\n    }\n}\nfunction tokenAfterHead(p, token) {\n    p._insertFakeElement(html_js_1.TAG_NAMES.BODY, html_js_1.TAG_ID.BODY);\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in body\" insertion mode\n//------------------------------------------------------------------\nfunction modeInBody(p, token) {\n    switch(token.type){\n        case token_js_1.TokenType.CHARACTER:\n            {\n                characterInBody(p, token);\n                break;\n            }\n        case token_js_1.TokenType.WHITESPACE_CHARACTER:\n            {\n                whitespaceCharacterInBody(p, token);\n                break;\n            }\n        case token_js_1.TokenType.COMMENT:\n            {\n                appendComment(p, token);\n                break;\n            }\n        case token_js_1.TokenType.START_TAG:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case token_js_1.TokenType.END_TAG:\n            {\n                endTagInBody(p, token);\n                break;\n            }\n        case token_js_1.TokenType.EOF:\n            {\n                eofInBody(p, token);\n                break;\n            }\n        default:\n    }\n}\nfunction whitespaceCharacterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n}\nfunction characterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction htmlStartTagInBody(p, token) {\n    if (p.openElements.tmplCount === 0) {\n        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n    }\n}\nfunction bodyStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (bodyElement && p.openElements.tmplCount === 0) {\n        p.framesetOk = false;\n        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n    }\n}\nfunction framesetStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (p.framesetOk && bodyElement) {\n        p.treeAdapter.detachNode(bodyElement);\n        p.openElements.popAllUpToHtmlElement();\n        p._insertElement(token, html_js_1.NS.HTML);\n        p.insertionMode = InsertionMode.IN_FRAMESET;\n    }\n}\nfunction addressStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction numberedHeaderStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    if ((0, html_js_1.isNumberedHeader)(p.openElements.currentTagId)) {\n        p.openElements.pop();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction preStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.framesetOk = false;\n}\nfunction formStartTagInBody(p, token) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    if (!p.formElement || inTemplate) {\n        if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n            p._closePElement();\n        }\n        p._insertElement(token, html_js_1.NS.HTML);\n        if (!inTemplate) {\n            p.formElement = p.openElements.current;\n        }\n    }\n}\nfunction listItemStartTagInBody(p, token) {\n    p.framesetOk = false;\n    const tn = token.tagID;\n    for(let i = p.openElements.stackTop; i >= 0; i--){\n        const elementId = p.openElements.tagIDs[i];\n        if (tn === html_js_1.TAG_ID.LI && elementId === html_js_1.TAG_ID.LI || (tn === html_js_1.TAG_ID.DD || tn === html_js_1.TAG_ID.DT) && (elementId === html_js_1.TAG_ID.DD || elementId === html_js_1.TAG_ID.DT)) {\n            p.openElements.generateImpliedEndTagsWithExclusion(elementId);\n            p.openElements.popUntilTagNamePopped(elementId);\n            break;\n        }\n        if (elementId !== html_js_1.TAG_ID.ADDRESS && elementId !== html_js_1.TAG_ID.DIV && elementId !== html_js_1.TAG_ID.P && p._isSpecialElement(p.openElements.items[i], elementId)) {\n            break;\n        }\n    }\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction plaintextStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.tokenizer.state = index_js_1.TokenizerMode.PLAINTEXT;\n}\nfunction buttonStartTagInBody(p, token) {\n    if (p.openElements.hasInScope(html_js_1.TAG_ID.BUTTON)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.BUTTON);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.framesetOk = false;\n}\nfunction aStartTagInBody(p, token) {\n    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(html_js_1.TAG_NAMES.A);\n    if (activeElementEntry) {\n        callAdoptionAgency(p, token);\n        p.openElements.remove(activeElementEntry.element);\n        p.activeFormattingElements.removeEntry(activeElementEntry);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction bStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction nobrStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    if (p.openElements.hasInScope(html_js_1.TAG_ID.NOBR)) {\n        callAdoptionAgency(p, token);\n        p._reconstructActiveFormattingElements();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction appletStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.activeFormattingElements.insertMarker();\n    p.framesetOk = false;\n}\nfunction tableStartTagInBody(p, token) {\n    if (p.treeAdapter.getDocumentMode(p.document) !== html_js_1.DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.IN_TABLE;\n}\nfunction areaStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, html_js_1.NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction isHiddenInput(token) {\n    const inputType = (0, token_js_1.getTokenAttr)(token, html_js_1.ATTRS.TYPE);\n    return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;\n}\nfunction inputStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, html_js_1.NS.HTML);\n    if (!isHiddenInput(token)) {\n        p.framesetOk = false;\n    }\n    token.ackSelfClosing = true;\n}\nfunction paramStartTagInBody(p, token) {\n    p._appendElement(token, html_js_1.NS.HTML);\n    token.ackSelfClosing = true;\n}\nfunction hrStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    p._appendElement(token, html_js_1.NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction imageStartTagInBody(p, token) {\n    token.tagName = html_js_1.TAG_NAMES.IMG;\n    token.tagID = html_js_1.TAG_ID.IMG;\n    areaStartTagInBody(p, token);\n}\nfunction textareaStartTagInBody(p, token) {\n    p._insertElement(token, html_js_1.NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.tokenizer.state = index_js_1.TokenizerMode.RCDATA;\n    p.originalInsertionMode = p.insertionMode;\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.TEXT;\n}\nfunction xmpStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    p._reconstructActiveFormattingElements();\n    p.framesetOk = false;\n    p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n}\nfunction iframeStartTagInBody(p, token) {\n    p.framesetOk = false;\n    p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n}\n//NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse\n//<noembed> as rawtext.\nfunction noembedStartTagInBody(p, token) {\n    p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n}\nfunction selectStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode = p.insertionMode === InsertionMode.IN_TABLE || p.insertionMode === InsertionMode.IN_CAPTION || p.insertionMode === InsertionMode.IN_TABLE_BODY || p.insertionMode === InsertionMode.IN_ROW || p.insertionMode === InsertionMode.IN_CELL ? InsertionMode.IN_SELECT_IN_TABLE : InsertionMode.IN_SELECT;\n}\nfunction optgroupStartTagInBody(p, token) {\n    if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTION) {\n        p.openElements.pop();\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction rbStartTagInBody(p, token) {\n    if (p.openElements.hasInScope(html_js_1.TAG_ID.RUBY)) {\n        p.openElements.generateImpliedEndTags();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction rtStartTagInBody(p, token) {\n    if (p.openElements.hasInScope(html_js_1.TAG_ID.RUBY)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(html_js_1.TAG_ID.RTC);\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction mathStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenMathMLAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, html_js_1.NS.MATHML);\n    } else {\n        p._insertElement(token, html_js_1.NS.MATHML);\n    }\n    token.ackSelfClosing = true;\n}\nfunction svgStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenSVGAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, html_js_1.NS.SVG);\n    } else {\n        p._insertElement(token, html_js_1.NS.SVG);\n    }\n    token.ackSelfClosing = true;\n}\nfunction genericStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction startTagInBody(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.I:\n        case html_js_1.TAG_ID.S:\n        case html_js_1.TAG_ID.B:\n        case html_js_1.TAG_ID.U:\n        case html_js_1.TAG_ID.EM:\n        case html_js_1.TAG_ID.TT:\n        case html_js_1.TAG_ID.BIG:\n        case html_js_1.TAG_ID.CODE:\n        case html_js_1.TAG_ID.FONT:\n        case html_js_1.TAG_ID.SMALL:\n        case html_js_1.TAG_ID.STRIKE:\n        case html_js_1.TAG_ID.STRONG:\n            {\n                bStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.A:\n            {\n                aStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.H1:\n        case html_js_1.TAG_ID.H2:\n        case html_js_1.TAG_ID.H3:\n        case html_js_1.TAG_ID.H4:\n        case html_js_1.TAG_ID.H5:\n        case html_js_1.TAG_ID.H6:\n            {\n                numberedHeaderStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.P:\n        case html_js_1.TAG_ID.DL:\n        case html_js_1.TAG_ID.OL:\n        case html_js_1.TAG_ID.UL:\n        case html_js_1.TAG_ID.DIV:\n        case html_js_1.TAG_ID.DIR:\n        case html_js_1.TAG_ID.NAV:\n        case html_js_1.TAG_ID.MAIN:\n        case html_js_1.TAG_ID.MENU:\n        case html_js_1.TAG_ID.ASIDE:\n        case html_js_1.TAG_ID.CENTER:\n        case html_js_1.TAG_ID.FIGURE:\n        case html_js_1.TAG_ID.FOOTER:\n        case html_js_1.TAG_ID.HEADER:\n        case html_js_1.TAG_ID.HGROUP:\n        case html_js_1.TAG_ID.DIALOG:\n        case html_js_1.TAG_ID.DETAILS:\n        case html_js_1.TAG_ID.ADDRESS:\n        case html_js_1.TAG_ID.ARTICLE:\n        case html_js_1.TAG_ID.SECTION:\n        case html_js_1.TAG_ID.SUMMARY:\n        case html_js_1.TAG_ID.FIELDSET:\n        case html_js_1.TAG_ID.BLOCKQUOTE:\n        case html_js_1.TAG_ID.FIGCAPTION:\n            {\n                addressStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.LI:\n        case html_js_1.TAG_ID.DD:\n        case html_js_1.TAG_ID.DT:\n            {\n                listItemStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BR:\n        case html_js_1.TAG_ID.IMG:\n        case html_js_1.TAG_ID.WBR:\n        case html_js_1.TAG_ID.AREA:\n        case html_js_1.TAG_ID.EMBED:\n        case html_js_1.TAG_ID.KEYGEN:\n            {\n                areaStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.HR:\n            {\n                hrStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.RB:\n        case html_js_1.TAG_ID.RTC:\n            {\n                rbStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.RT:\n        case html_js_1.TAG_ID.RP:\n            {\n                rtStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.PRE:\n        case html_js_1.TAG_ID.LISTING:\n            {\n                preStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.XMP:\n            {\n                xmpStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.SVG:\n            {\n                svgStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.HTML:\n            {\n                htmlStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BASE:\n        case html_js_1.TAG_ID.LINK:\n        case html_js_1.TAG_ID.META:\n        case html_js_1.TAG_ID.STYLE:\n        case html_js_1.TAG_ID.TITLE:\n        case html_js_1.TAG_ID.SCRIPT:\n        case html_js_1.TAG_ID.BGSOUND:\n        case html_js_1.TAG_ID.BASEFONT:\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n            {\n                bodyStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.FORM:\n            {\n                formStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.NOBR:\n            {\n                nobrStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.MATH:\n            {\n                mathStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TABLE:\n            {\n                tableStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.INPUT:\n            {\n                inputStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.PARAM:\n        case html_js_1.TAG_ID.TRACK:\n        case html_js_1.TAG_ID.SOURCE:\n            {\n                paramStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.IMAGE:\n            {\n                imageStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BUTTON:\n            {\n                buttonStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.APPLET:\n        case html_js_1.TAG_ID.OBJECT:\n        case html_js_1.TAG_ID.MARQUEE:\n            {\n                appletStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.IFRAME:\n            {\n                iframeStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.SELECT:\n            {\n                selectStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.OPTION:\n        case html_js_1.TAG_ID.OPTGROUP:\n            {\n                optgroupStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.NOEMBED:\n            {\n                noembedStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.FRAMESET:\n            {\n                framesetStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TEXTAREA:\n            {\n                textareaStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.NOSCRIPT:\n            {\n                if (p.options.scriptingEnabled) {\n                    noembedStartTagInBody(p, token);\n                } else {\n                    genericStartTagInBody(p, token);\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.PLAINTEXT:\n            {\n                plaintextStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.TH:\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TR:\n        case html_js_1.TAG_ID.HEAD:\n        case html_js_1.TAG_ID.FRAME:\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COLGROUP:\n            {\n                break;\n            }\n        default:\n            {\n                genericStartTagInBody(p, token);\n            }\n    }\n}\nfunction bodyEndTagInBody(p, token) {\n    if (p.openElements.hasInScope(html_js_1.TAG_ID.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        //NOTE: <body> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo) {\n            const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n            if (bodyElement) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n}\nfunction htmlEndTagInBody(p, token) {\n    if (p.openElements.hasInScope(html_js_1.TAG_ID.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        endTagAfterBody(p, token);\n    }\n}\nfunction addressEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction formEndTagInBody(p) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    const { formElement } = p;\n    if (!inTemplate) {\n        p.formElement = null;\n    }\n    if ((formElement || inTemplate) && p.openElements.hasInScope(html_js_1.TAG_ID.FORM)) {\n        p.openElements.generateImpliedEndTags();\n        if (inTemplate) {\n            p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.FORM);\n        } else if (formElement) {\n            p.openElements.remove(formElement);\n        }\n    }\n}\nfunction pEndTagInBody(p) {\n    if (!p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._insertFakeElement(html_js_1.TAG_NAMES.P, html_js_1.TAG_ID.P);\n    }\n    p._closePElement();\n}\nfunction liEndTagInBody(p) {\n    if (p.openElements.hasInListItemScope(html_js_1.TAG_ID.LI)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(html_js_1.TAG_ID.LI);\n        p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.LI);\n    }\n}\nfunction ddEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(tn);\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction numberedHeaderEndTagInBody(p) {\n    if (p.openElements.hasNumberedHeaderInScope()) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilNumberedHeaderPopped();\n    }\n}\nfunction appletEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n        p.activeFormattingElements.clearToLastMarker();\n    }\n}\nfunction brEndTagInBody(p) {\n    p._reconstructActiveFormattingElements();\n    p._insertFakeElement(html_js_1.TAG_NAMES.BR, html_js_1.TAG_ID.BR);\n    p.openElements.pop();\n    p.framesetOk = false;\n}\nfunction genericEndTagInBody(p, token) {\n    const tn = token.tagName;\n    const tid = token.tagID;\n    for(let i = p.openElements.stackTop; i > 0; i--){\n        const element = p.openElements.items[i];\n        const elementId = p.openElements.tagIDs[i];\n        // Compare the tag name here, as the tag might not be a known tag with an ID.\n        if (tid === elementId && (tid !== html_js_1.TAG_ID.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {\n            p.openElements.generateImpliedEndTagsWithExclusion(tid);\n            if (p.openElements.stackTop >= i) p.openElements.shortenToLength(i);\n            break;\n        }\n        if (p._isSpecialElement(element, elementId)) {\n            break;\n        }\n    }\n}\nfunction endTagInBody(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.A:\n        case html_js_1.TAG_ID.B:\n        case html_js_1.TAG_ID.I:\n        case html_js_1.TAG_ID.S:\n        case html_js_1.TAG_ID.U:\n        case html_js_1.TAG_ID.EM:\n        case html_js_1.TAG_ID.TT:\n        case html_js_1.TAG_ID.BIG:\n        case html_js_1.TAG_ID.CODE:\n        case html_js_1.TAG_ID.FONT:\n        case html_js_1.TAG_ID.NOBR:\n        case html_js_1.TAG_ID.SMALL:\n        case html_js_1.TAG_ID.STRIKE:\n        case html_js_1.TAG_ID.STRONG:\n            {\n                callAdoptionAgency(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.P:\n            {\n                pEndTagInBody(p);\n                break;\n            }\n        case html_js_1.TAG_ID.DL:\n        case html_js_1.TAG_ID.UL:\n        case html_js_1.TAG_ID.OL:\n        case html_js_1.TAG_ID.DIR:\n        case html_js_1.TAG_ID.DIV:\n        case html_js_1.TAG_ID.NAV:\n        case html_js_1.TAG_ID.PRE:\n        case html_js_1.TAG_ID.MAIN:\n        case html_js_1.TAG_ID.MENU:\n        case html_js_1.TAG_ID.ASIDE:\n        case html_js_1.TAG_ID.BUTTON:\n        case html_js_1.TAG_ID.CENTER:\n        case html_js_1.TAG_ID.FIGURE:\n        case html_js_1.TAG_ID.FOOTER:\n        case html_js_1.TAG_ID.HEADER:\n        case html_js_1.TAG_ID.HGROUP:\n        case html_js_1.TAG_ID.DIALOG:\n        case html_js_1.TAG_ID.ADDRESS:\n        case html_js_1.TAG_ID.ARTICLE:\n        case html_js_1.TAG_ID.DETAILS:\n        case html_js_1.TAG_ID.SECTION:\n        case html_js_1.TAG_ID.SUMMARY:\n        case html_js_1.TAG_ID.LISTING:\n        case html_js_1.TAG_ID.FIELDSET:\n        case html_js_1.TAG_ID.BLOCKQUOTE:\n        case html_js_1.TAG_ID.FIGCAPTION:\n            {\n                addressEndTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.LI:\n            {\n                liEndTagInBody(p);\n                break;\n            }\n        case html_js_1.TAG_ID.DD:\n        case html_js_1.TAG_ID.DT:\n            {\n                ddEndTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.H1:\n        case html_js_1.TAG_ID.H2:\n        case html_js_1.TAG_ID.H3:\n        case html_js_1.TAG_ID.H4:\n        case html_js_1.TAG_ID.H5:\n        case html_js_1.TAG_ID.H6:\n            {\n                numberedHeaderEndTagInBody(p);\n                break;\n            }\n        case html_js_1.TAG_ID.BR:\n            {\n                brEndTagInBody(p);\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n            {\n                bodyEndTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.HTML:\n            {\n                htmlEndTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.FORM:\n            {\n                formEndTagInBody(p);\n                break;\n            }\n        case html_js_1.TAG_ID.APPLET:\n        case html_js_1.TAG_ID.OBJECT:\n        case html_js_1.TAG_ID.MARQUEE:\n            {\n                appletEndTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                templateEndTagInHead(p, token);\n                break;\n            }\n        default:\n            {\n                genericEndTagInBody(p, token);\n            }\n    }\n}\nfunction eofInBody(p, token) {\n    if (p.tmplInsertionModeStack.length > 0) {\n        eofInTemplate(p, token);\n    } else {\n        stopParsing(p, token);\n    }\n}\n// The \"text\" insertion mode\n//------------------------------------------------------------------\nfunction endTagInText(p, token) {\n    var _a;\n    if (token.tagID === html_js_1.TAG_ID.SCRIPT) {\n        (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);\n    }\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n}\nfunction eofInText(p, token) {\n    p._err(token, error_codes_js_1.ERR.eofInElementThatCanContainOnlyText);\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n    p.onEof(token);\n}\n// The \"in table\" insertion mode\n//------------------------------------------------------------------\nfunction characterInTable(p, token) {\n    if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {\n        p.pendingCharacterTokens.length = 0;\n        p.hasNonWhitespacePendingCharacterToken = false;\n        p.originalInsertionMode = p.insertionMode;\n        p.insertionMode = InsertionMode.IN_TABLE_TEXT;\n        switch(token.type){\n            case token_js_1.TokenType.CHARACTER:\n                {\n                    characterInTableText(p, token);\n                    break;\n                }\n            case token_js_1.TokenType.WHITESPACE_CHARACTER:\n                {\n                    whitespaceCharacterInTableText(p, token);\n                    break;\n                }\n        }\n    } else {\n        tokenInTable(p, token);\n    }\n}\nfunction captionStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p.activeFormattingElements.insertMarker();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.insertionMode = InsertionMode.IN_CAPTION;\n}\nfunction colgroupStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n}\nfunction colStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(html_js_1.TAG_NAMES.COLGROUP, html_js_1.TAG_ID.COLGROUP);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n    startTagInColumnGroup(p, token);\n}\nfunction tbodyStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n}\nfunction tdStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(html_js_1.TAG_NAMES.TBODY, html_js_1.TAG_ID.TBODY);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n    startTagInTableBody(p, token);\n}\nfunction tableStartTagInTable(p, token) {\n    if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TABLE)) {\n        p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.TABLE);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n}\nfunction inputStartTagInTable(p, token) {\n    if (isHiddenInput(token)) {\n        p._appendElement(token, html_js_1.NS.HTML);\n    } else {\n        tokenInTable(p, token);\n    }\n    token.ackSelfClosing = true;\n}\nfunction formStartTagInTable(p, token) {\n    if (!p.formElement && p.openElements.tmplCount === 0) {\n        p._insertElement(token, html_js_1.NS.HTML);\n        p.formElement = p.openElements.current;\n        p.openElements.pop();\n    }\n}\nfunction startTagInTable(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TH:\n        case html_js_1.TAG_ID.TR:\n            {\n                tdStartTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.STYLE:\n        case html_js_1.TAG_ID.SCRIPT:\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.COL:\n            {\n                colStartTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.FORM:\n            {\n                formStartTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TABLE:\n            {\n                tableStartTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n            {\n                tbodyStartTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.INPUT:\n            {\n                inputStartTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.CAPTION:\n            {\n                captionStartTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.COLGROUP:\n            {\n                colgroupStartTagInTable(p, token);\n                break;\n            }\n        default:\n            {\n                tokenInTable(p, token);\n            }\n    }\n}\nfunction endTagInTable(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.TABLE:\n            {\n                if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TABLE)) {\n                    p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.TABLE);\n                    p._resetInsertionMode();\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                templateEndTagInHead(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.HTML:\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.TH:\n        case html_js_1.TAG_ID.THEAD:\n        case html_js_1.TAG_ID.TR:\n            {\n                break;\n            }\n        default:\n            {\n                tokenInTable(p, token);\n            }\n    }\n}\nfunction tokenInTable(p, token) {\n    const savedFosterParentingState = p.fosterParentingEnabled;\n    p.fosterParentingEnabled = true;\n    // Process token in `In Body` mode\n    modeInBody(p, token);\n    p.fosterParentingEnabled = savedFosterParentingState;\n}\n// The \"in table text\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n}\nfunction characterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n    p.hasNonWhitespacePendingCharacterToken = true;\n}\nfunction tokenInTableText(p, token) {\n    let i = 0;\n    if (p.hasNonWhitespacePendingCharacterToken) {\n        for(; i < p.pendingCharacterTokens.length; i++){\n            tokenInTable(p, p.pendingCharacterTokens[i]);\n        }\n    } else {\n        for(; i < p.pendingCharacterTokens.length; i++){\n            p._insertCharacters(p.pendingCharacterTokens[i]);\n        }\n    }\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n// The \"in caption\" insertion mode\n//------------------------------------------------------------------\nconst TABLE_VOID_ELEMENTS = new Set([\n    html_js_1.TAG_ID.CAPTION,\n    html_js_1.TAG_ID.COL,\n    html_js_1.TAG_ID.COLGROUP,\n    html_js_1.TAG_ID.TBODY,\n    html_js_1.TAG_ID.TD,\n    html_js_1.TAG_ID.TFOOT,\n    html_js_1.TAG_ID.TH,\n    html_js_1.TAG_ID.THEAD,\n    html_js_1.TAG_ID.TR\n]);\nfunction startTagInCaption(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope(html_js_1.TAG_ID.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n        }\n    } else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCaption(p, token) {\n    const tn = token.tagID;\n    switch(tn){\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.TABLE:\n            {\n                if (p.openElements.hasInTableScope(html_js_1.TAG_ID.CAPTION)) {\n                    p.openElements.generateImpliedEndTags();\n                    p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.CAPTION);\n                    p.activeFormattingElements.clearToLastMarker();\n                    p.insertionMode = InsertionMode.IN_TABLE;\n                    if (tn === html_js_1.TAG_ID.TABLE) {\n                        endTagInTable(p, token);\n                    }\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.HTML:\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.TH:\n        case html_js_1.TAG_ID.THEAD:\n        case html_js_1.TAG_ID.TR:\n            {\n                break;\n            }\n        default:\n            {\n                endTagInBody(p, token);\n            }\n    }\n}\n// The \"in column group\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInColumnGroup(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.COL:\n            {\n                p._appendElement(token, html_js_1.NS.HTML);\n                token.ackSelfClosing = true;\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        default:\n            {\n                tokenInColumnGroup(p, token);\n            }\n    }\n}\nfunction endTagInColumnGroup(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.COLGROUP:\n            {\n                if (p.openElements.currentTagId === html_js_1.TAG_ID.COLGROUP) {\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE;\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                templateEndTagInHead(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.COL:\n            {\n                break;\n            }\n        default:\n            {\n                tokenInColumnGroup(p, token);\n            }\n    }\n}\nfunction tokenInColumnGroup(p, token) {\n    if (p.openElements.currentTagId === html_js_1.TAG_ID.COLGROUP) {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.IN_TABLE;\n        p._processToken(token);\n    }\n}\n// The \"in table body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTableBody(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.TR:\n            {\n                p.openElements.clearBackToTableBodyContext();\n                p._insertElement(token, html_js_1.NS.HTML);\n                p.insertionMode = InsertionMode.IN_ROW;\n                break;\n            }\n        case html_js_1.TAG_ID.TH:\n        case html_js_1.TAG_ID.TD:\n            {\n                p.openElements.clearBackToTableBodyContext();\n                p._insertFakeElement(html_js_1.TAG_NAMES.TR, html_js_1.TAG_ID.TR);\n                p.insertionMode = InsertionMode.IN_ROW;\n                startTagInRow(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n            {\n                if (p.openElements.hasTableBodyContextInTableScope()) {\n                    p.openElements.clearBackToTableBodyContext();\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE;\n                    startTagInTable(p, token);\n                }\n                break;\n            }\n        default:\n            {\n                startTagInTable(p, token);\n            }\n    }\n}\nfunction endTagInTableBody(p, token) {\n    const tn = token.tagID;\n    switch(token.tagID){\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n            {\n                if (p.openElements.hasInTableScope(tn)) {\n                    p.openElements.clearBackToTableBodyContext();\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE;\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.TABLE:\n            {\n                if (p.openElements.hasTableBodyContextInTableScope()) {\n                    p.openElements.clearBackToTableBodyContext();\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE;\n                    endTagInTable(p, token);\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.HTML:\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TH:\n        case html_js_1.TAG_ID.TR:\n            {\n                break;\n            }\n        default:\n            {\n                endTagInTable(p, token);\n            }\n    }\n}\n// The \"in row\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInRow(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.TH:\n        case html_js_1.TAG_ID.TD:\n            {\n                p.openElements.clearBackToTableRowContext();\n                p._insertElement(token, html_js_1.NS.HTML);\n                p.insertionMode = InsertionMode.IN_CELL;\n                p.activeFormattingElements.insertMarker();\n                break;\n            }\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n        case html_js_1.TAG_ID.TR:\n            {\n                if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TR)) {\n                    p.openElements.clearBackToTableRowContext();\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                    startTagInTableBody(p, token);\n                }\n                break;\n            }\n        default:\n            {\n                startTagInTable(p, token);\n            }\n    }\n}\nfunction endTagInRow(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.TR:\n            {\n                if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TR)) {\n                    p.openElements.clearBackToTableRowContext();\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.TABLE:\n            {\n                if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TR)) {\n                    p.openElements.clearBackToTableRowContext();\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                    endTagInTableBody(p, token);\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n            {\n                if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope(html_js_1.TAG_ID.TR)) {\n                    p.openElements.clearBackToTableRowContext();\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                    endTagInTableBody(p, token);\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.HTML:\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TH:\n            {\n                break;\n            }\n        default:\n            {\n                endTagInTable(p, token);\n            }\n    }\n}\n// The \"in cell\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCell(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TD) || p.openElements.hasInTableScope(html_js_1.TAG_ID.TH)) {\n            p._closeTableCell();\n            startTagInRow(p, token);\n        }\n    } else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCell(p, token) {\n    const tn = token.tagID;\n    switch(tn){\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TH:\n            {\n                if (p.openElements.hasInTableScope(tn)) {\n                    p.openElements.generateImpliedEndTags();\n                    p.openElements.popUntilTagNamePopped(tn);\n                    p.activeFormattingElements.clearToLastMarker();\n                    p.insertionMode = InsertionMode.IN_ROW;\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.TABLE:\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n        case html_js_1.TAG_ID.TR:\n            {\n                if (p.openElements.hasInTableScope(tn)) {\n                    p._closeTableCell();\n                    endTagInRow(p, token);\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.HTML:\n            {\n                break;\n            }\n        default:\n            {\n                endTagInBody(p, token);\n            }\n    }\n}\n// The \"in select\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelect(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.OPTION:\n            {\n                if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTION) {\n                    p.openElements.pop();\n                }\n                p._insertElement(token, html_js_1.NS.HTML);\n                break;\n            }\n        case html_js_1.TAG_ID.OPTGROUP:\n            {\n                if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTION) {\n                    p.openElements.pop();\n                }\n                if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTGROUP) {\n                    p.openElements.pop();\n                }\n                p._insertElement(token, html_js_1.NS.HTML);\n                break;\n            }\n        case html_js_1.TAG_ID.INPUT:\n        case html_js_1.TAG_ID.KEYGEN:\n        case html_js_1.TAG_ID.TEXTAREA:\n        case html_js_1.TAG_ID.SELECT:\n            {\n                if (p.openElements.hasInSelectScope(html_js_1.TAG_ID.SELECT)) {\n                    p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.SELECT);\n                    p._resetInsertionMode();\n                    if (token.tagID !== html_js_1.TAG_ID.SELECT) {\n                        p._processStartTag(token);\n                    }\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.SCRIPT:\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        default:\n    }\n}\nfunction endTagInSelect(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.OPTGROUP:\n            {\n                if (p.openElements.stackTop > 0 && p.openElements.currentTagId === html_js_1.TAG_ID.OPTION && p.openElements.tagIDs[p.openElements.stackTop - 1] === html_js_1.TAG_ID.OPTGROUP) {\n                    p.openElements.pop();\n                }\n                if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTGROUP) {\n                    p.openElements.pop();\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.OPTION:\n            {\n                if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTION) {\n                    p.openElements.pop();\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.SELECT:\n            {\n                if (p.openElements.hasInSelectScope(html_js_1.TAG_ID.SELECT)) {\n                    p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.SELECT);\n                    p._resetInsertionMode();\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                templateEndTagInHead(p, token);\n                break;\n            }\n        default:\n    }\n}\n// The \"in select in table\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === html_js_1.TAG_ID.CAPTION || tn === html_js_1.TAG_ID.TABLE || tn === html_js_1.TAG_ID.TBODY || tn === html_js_1.TAG_ID.TFOOT || tn === html_js_1.TAG_ID.THEAD || tn === html_js_1.TAG_ID.TR || tn === html_js_1.TAG_ID.TD || tn === html_js_1.TAG_ID.TH) {\n        p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.SELECT);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    } else {\n        startTagInSelect(p, token);\n    }\n}\nfunction endTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === html_js_1.TAG_ID.CAPTION || tn === html_js_1.TAG_ID.TABLE || tn === html_js_1.TAG_ID.TBODY || tn === html_js_1.TAG_ID.TFOOT || tn === html_js_1.TAG_ID.THEAD || tn === html_js_1.TAG_ID.TR || tn === html_js_1.TAG_ID.TD || tn === html_js_1.TAG_ID.TH) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.SELECT);\n            p._resetInsertionMode();\n            p.onEndTag(token);\n        }\n    } else {\n        endTagInSelect(p, token);\n    }\n}\n// The \"in template\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTemplate(p, token) {\n    switch(token.tagID){\n        // First, handle tags that can start without a mode change\n        case html_js_1.TAG_ID.BASE:\n        case html_js_1.TAG_ID.BASEFONT:\n        case html_js_1.TAG_ID.BGSOUND:\n        case html_js_1.TAG_ID.LINK:\n        case html_js_1.TAG_ID.META:\n        case html_js_1.TAG_ID.NOFRAMES:\n        case html_js_1.TAG_ID.SCRIPT:\n        case html_js_1.TAG_ID.STYLE:\n        case html_js_1.TAG_ID.TEMPLATE:\n        case html_js_1.TAG_ID.TITLE:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        // Re-process the token in the appropriate mode\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n            {\n                p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;\n                p.insertionMode = InsertionMode.IN_TABLE;\n                startTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.COL:\n            {\n                p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;\n                p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n                startTagInColumnGroup(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TR:\n            {\n                p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                startTagInTableBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TH:\n            {\n                p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;\n                p.insertionMode = InsertionMode.IN_ROW;\n                startTagInRow(p, token);\n                break;\n            }\n        default:\n            {\n                p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;\n                p.insertionMode = InsertionMode.IN_BODY;\n                startTagInBody(p, token);\n            }\n    }\n}\nfunction endTagInTemplate(p, token) {\n    if (token.tagID === html_js_1.TAG_ID.TEMPLATE) {\n        templateEndTagInHead(p, token);\n    }\n}\nfunction eofInTemplate(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n        p.onEof(token);\n    } else {\n        stopParsing(p, token);\n    }\n}\n// The \"after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterBody(p, token) {\n    if (token.tagID === html_js_1.TAG_ID.HTML) {\n        startTagInBody(p, token);\n    } else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction endTagAfterBody(p, token) {\n    var _a;\n    if (token.tagID === html_js_1.TAG_ID.HTML) {\n        if (!p.fragmentContext) {\n            p.insertionMode = InsertionMode.AFTER_AFTER_BODY;\n        }\n        //NOTE: <html> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === html_js_1.TAG_ID.HTML) {\n            p._setEndLocation(p.openElements.items[0], token);\n            // Update the body element, if it doesn't have an end tag\n            const bodyElement = p.openElements.items[1];\n            if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    } else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction tokenAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInFrameset(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.FRAMESET:\n            {\n                p._insertElement(token, html_js_1.NS.HTML);\n                break;\n            }\n        case html_js_1.TAG_ID.FRAME:\n            {\n                p._appendElement(token, html_js_1.NS.HTML);\n                token.ackSelfClosing = true;\n                break;\n            }\n        case html_js_1.TAG_ID.NOFRAMES:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        default:\n    }\n}\nfunction endTagInFrameset(p, token) {\n    if (token.tagID === html_js_1.TAG_ID.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n        p.openElements.pop();\n        if (!p.fragmentContext && p.openElements.currentTagId !== html_js_1.TAG_ID.FRAMESET) {\n            p.insertionMode = InsertionMode.AFTER_FRAMESET;\n        }\n    }\n}\n// The \"after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterFrameset(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.NOFRAMES:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        default:\n    }\n}\nfunction endTagAfterFrameset(p, token) {\n    if (token.tagID === html_js_1.TAG_ID.HTML) {\n        p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;\n    }\n}\n// The \"after after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterBody(p, token) {\n    if (token.tagID === html_js_1.TAG_ID.HTML) {\n        startTagInBody(p, token);\n    } else {\n        tokenAfterAfterBody(p, token);\n    }\n}\nfunction tokenAfterAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterFrameset(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.NOFRAMES:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        default:\n    }\n}\n// The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\nfunction nullCharacterInForeignContent(p, token) {\n    token.chars = unicode.REPLACEMENT_CHARACTER;\n    p._insertCharacters(token);\n}\nfunction characterInForeignContent(p, token) {\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction popUntilHtmlOrIntegrationPoint(p) {\n    while(p.treeAdapter.getNamespaceURI(p.openElements.current) !== html_js_1.NS.HTML && !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)){\n        p.openElements.pop();\n    }\n}\nfunction startTagInForeignContent(p, token) {\n    if (foreignContent.causesExit(token)) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._startTagOutsideForeignContent(token);\n    } else {\n        const current = p._getAdjustedCurrentElement();\n        const currentNs = p.treeAdapter.getNamespaceURI(current);\n        if (currentNs === html_js_1.NS.MATHML) {\n            foreignContent.adjustTokenMathMLAttrs(token);\n        } else if (currentNs === html_js_1.NS.SVG) {\n            foreignContent.adjustTokenSVGTagName(token);\n            foreignContent.adjustTokenSVGAttrs(token);\n        }\n        foreignContent.adjustTokenXMLAttrs(token);\n        if (token.selfClosing) {\n            p._appendElement(token, currentNs);\n        } else {\n            p._insertElement(token, currentNs);\n        }\n        token.ackSelfClosing = true;\n    }\n}\nfunction endTagInForeignContent(p, token) {\n    if (token.tagID === html_js_1.TAG_ID.P || token.tagID === html_js_1.TAG_ID.BR) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._endTagOutsideForeignContent(token);\n        return;\n    }\n    for(let i = p.openElements.stackTop; i > 0; i--){\n        const element = p.openElements.items[i];\n        if (p.treeAdapter.getNamespaceURI(element) === html_js_1.NS.HTML) {\n            p._endTagOutsideForeignContent(token);\n            break;\n        }\n        const tagName = p.treeAdapter.getTagName(element);\n        if (tagName.toLowerCase() === token.tagName) {\n            //NOTE: update the token tag name for `_setEndLocation`.\n            token.tagName = tagName;\n            p.openElements.shortenToLength(i);\n            break;\n        }\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/parser/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/parser/open-element-stack.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/parser/open-element-stack.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OpenElementStack = void 0;\nconst html_js_1 = __webpack_require__(/*! ../common/html.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/html.js\");\n//Element utils\nconst IMPLICIT_END_TAG_REQUIRED = new Set([\n    html_js_1.TAG_ID.DD,\n    html_js_1.TAG_ID.DT,\n    html_js_1.TAG_ID.LI,\n    html_js_1.TAG_ID.OPTGROUP,\n    html_js_1.TAG_ID.OPTION,\n    html_js_1.TAG_ID.P,\n    html_js_1.TAG_ID.RB,\n    html_js_1.TAG_ID.RP,\n    html_js_1.TAG_ID.RT,\n    html_js_1.TAG_ID.RTC\n]);\nconst IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = new Set([\n    ...IMPLICIT_END_TAG_REQUIRED,\n    html_js_1.TAG_ID.CAPTION,\n    html_js_1.TAG_ID.COLGROUP,\n    html_js_1.TAG_ID.TBODY,\n    html_js_1.TAG_ID.TD,\n    html_js_1.TAG_ID.TFOOT,\n    html_js_1.TAG_ID.TH,\n    html_js_1.TAG_ID.THEAD,\n    html_js_1.TAG_ID.TR\n]);\nconst SCOPING_ELEMENT_NS = new Map([\n    [\n        html_js_1.TAG_ID.APPLET,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.CAPTION,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.HTML,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.MARQUEE,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.OBJECT,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.TABLE,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.TD,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.TEMPLATE,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.TH,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.ANNOTATION_XML,\n        html_js_1.NS.MATHML\n    ],\n    [\n        html_js_1.TAG_ID.MI,\n        html_js_1.NS.MATHML\n    ],\n    [\n        html_js_1.TAG_ID.MN,\n        html_js_1.NS.MATHML\n    ],\n    [\n        html_js_1.TAG_ID.MO,\n        html_js_1.NS.MATHML\n    ],\n    [\n        html_js_1.TAG_ID.MS,\n        html_js_1.NS.MATHML\n    ],\n    [\n        html_js_1.TAG_ID.MTEXT,\n        html_js_1.NS.MATHML\n    ],\n    [\n        html_js_1.TAG_ID.DESC,\n        html_js_1.NS.SVG\n    ],\n    [\n        html_js_1.TAG_ID.FOREIGN_OBJECT,\n        html_js_1.NS.SVG\n    ],\n    [\n        html_js_1.TAG_ID.TITLE,\n        html_js_1.NS.SVG\n    ]\n]);\nconst NAMED_HEADERS = [\n    html_js_1.TAG_ID.H1,\n    html_js_1.TAG_ID.H2,\n    html_js_1.TAG_ID.H3,\n    html_js_1.TAG_ID.H4,\n    html_js_1.TAG_ID.H5,\n    html_js_1.TAG_ID.H6\n];\nconst TABLE_ROW_CONTEXT = [\n    html_js_1.TAG_ID.TR,\n    html_js_1.TAG_ID.TEMPLATE,\n    html_js_1.TAG_ID.HTML\n];\nconst TABLE_BODY_CONTEXT = [\n    html_js_1.TAG_ID.TBODY,\n    html_js_1.TAG_ID.TFOOT,\n    html_js_1.TAG_ID.THEAD,\n    html_js_1.TAG_ID.TEMPLATE,\n    html_js_1.TAG_ID.HTML\n];\nconst TABLE_CONTEXT = [\n    html_js_1.TAG_ID.TABLE,\n    html_js_1.TAG_ID.TEMPLATE,\n    html_js_1.TAG_ID.HTML\n];\nconst TABLE_CELLS = [\n    html_js_1.TAG_ID.TD,\n    html_js_1.TAG_ID.TH\n];\n//Stack of open elements\nclass OpenElementStack {\n    get currentTmplContentOrNode() {\n        return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;\n    }\n    constructor(document, treeAdapter, handler){\n        this.treeAdapter = treeAdapter;\n        this.handler = handler;\n        this.items = [];\n        this.tagIDs = [];\n        this.stackTop = -1;\n        this.tmplCount = 0;\n        this.currentTagId = html_js_1.TAG_ID.UNKNOWN;\n        this.current = document;\n    }\n    //Index of element\n    _indexOf(element) {\n        return this.items.lastIndexOf(element, this.stackTop);\n    }\n    //Update current element\n    _isInTemplate() {\n        return this.currentTagId === html_js_1.TAG_ID.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === html_js_1.NS.HTML;\n    }\n    _updateCurrentElement() {\n        this.current = this.items[this.stackTop];\n        this.currentTagId = this.tagIDs[this.stackTop];\n    }\n    //Mutations\n    push(element, tagID) {\n        this.stackTop++;\n        this.items[this.stackTop] = element;\n        this.current = element;\n        this.tagIDs[this.stackTop] = tagID;\n        this.currentTagId = tagID;\n        if (this._isInTemplate()) {\n            this.tmplCount++;\n        }\n        this.handler.onItemPush(element, tagID, true);\n    }\n    pop() {\n        const popped = this.current;\n        if (this.tmplCount > 0 && this._isInTemplate()) {\n            this.tmplCount--;\n        }\n        this.stackTop--;\n        this._updateCurrentElement();\n        this.handler.onItemPop(popped, true);\n    }\n    replace(oldElement, newElement) {\n        const idx = this._indexOf(oldElement);\n        this.items[idx] = newElement;\n        if (idx === this.stackTop) {\n            this.current = newElement;\n        }\n    }\n    insertAfter(referenceElement, newElement, newElementID) {\n        const insertionIdx = this._indexOf(referenceElement) + 1;\n        this.items.splice(insertionIdx, 0, newElement);\n        this.tagIDs.splice(insertionIdx, 0, newElementID);\n        this.stackTop++;\n        if (insertionIdx === this.stackTop) {\n            this._updateCurrentElement();\n        }\n        this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);\n    }\n    popUntilTagNamePopped(tagName) {\n        let targetIdx = this.stackTop + 1;\n        do {\n            targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);\n        }while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== html_js_1.NS.HTML);\n        this.shortenToLength(targetIdx < 0 ? 0 : targetIdx);\n    }\n    shortenToLength(idx) {\n        while(this.stackTop >= idx){\n            const popped = this.current;\n            if (this.tmplCount > 0 && this._isInTemplate()) {\n                this.tmplCount -= 1;\n            }\n            this.stackTop--;\n            this._updateCurrentElement();\n            this.handler.onItemPop(popped, this.stackTop < idx);\n        }\n    }\n    popUntilElementPopped(element) {\n        const idx = this._indexOf(element);\n        this.shortenToLength(idx < 0 ? 0 : idx);\n    }\n    popUntilPopped(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(idx < 0 ? 0 : idx);\n    }\n    popUntilNumberedHeaderPopped() {\n        this.popUntilPopped(NAMED_HEADERS, html_js_1.NS.HTML);\n    }\n    popUntilTableCellPopped() {\n        this.popUntilPopped(TABLE_CELLS, html_js_1.NS.HTML);\n    }\n    popAllUpToHtmlElement() {\n        //NOTE: here we assume that the root <html> element is always first in the open element stack, so\n        //we perform this fast stack clean up.\n        this.tmplCount = 0;\n        this.shortenToLength(1);\n    }\n    _indexOfTagNames(tagNames, namespace) {\n        for(let i = this.stackTop; i >= 0; i--){\n            if (tagNames.includes(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    clearBackTo(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(idx + 1);\n    }\n    clearBackToTableContext() {\n        this.clearBackTo(TABLE_CONTEXT, html_js_1.NS.HTML);\n    }\n    clearBackToTableBodyContext() {\n        this.clearBackTo(TABLE_BODY_CONTEXT, html_js_1.NS.HTML);\n    }\n    clearBackToTableRowContext() {\n        this.clearBackTo(TABLE_ROW_CONTEXT, html_js_1.NS.HTML);\n    }\n    remove(element) {\n        const idx = this._indexOf(element);\n        if (idx >= 0) {\n            if (idx === this.stackTop) {\n                this.pop();\n            } else {\n                this.items.splice(idx, 1);\n                this.tagIDs.splice(idx, 1);\n                this.stackTop--;\n                this._updateCurrentElement();\n                this.handler.onItemPop(element, false);\n            }\n        }\n    }\n    //Search\n    tryPeekProperlyNestedBodyElement() {\n        //Properly nested <body> element (should be second element in stack).\n        return this.stackTop >= 1 && this.tagIDs[1] === html_js_1.TAG_ID.BODY ? this.items[1] : null;\n    }\n    contains(element) {\n        return this._indexOf(element) > -1;\n    }\n    getCommonAncestor(element) {\n        const elementIdx = this._indexOf(element) - 1;\n        return elementIdx >= 0 ? this.items[elementIdx] : null;\n    }\n    isRootHtmlElementCurrent() {\n        return this.stackTop === 0 && this.tagIDs[0] === html_js_1.TAG_ID.HTML;\n    }\n    //Element in scope\n    hasInScope(tagName) {\n        for(let i = this.stackTop; i >= 0; i--){\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (tn === tagName && ns === html_js_1.NS.HTML) {\n                return true;\n            }\n            if (SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasNumberedHeaderInScope() {\n        for(let i = this.stackTop; i >= 0; i--){\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if ((0, html_js_1.isNumberedHeader)(tn) && ns === html_js_1.NS.HTML) {\n                return true;\n            }\n            if (SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasInListItemScope(tagName) {\n        for(let i = this.stackTop; i >= 0; i--){\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (tn === tagName && ns === html_js_1.NS.HTML) {\n                return true;\n            }\n            if ((tn === html_js_1.TAG_ID.UL || tn === html_js_1.TAG_ID.OL) && ns === html_js_1.NS.HTML || SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasInButtonScope(tagName) {\n        for(let i = this.stackTop; i >= 0; i--){\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (tn === tagName && ns === html_js_1.NS.HTML) {\n                return true;\n            }\n            if (tn === html_js_1.TAG_ID.BUTTON && ns === html_js_1.NS.HTML || SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasInTableScope(tagName) {\n        for(let i = this.stackTop; i >= 0; i--){\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (ns !== html_js_1.NS.HTML) {\n                continue;\n            }\n            if (tn === tagName) {\n                return true;\n            }\n            if (tn === html_js_1.TAG_ID.TABLE || tn === html_js_1.TAG_ID.TEMPLATE || tn === html_js_1.TAG_ID.HTML) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasTableBodyContextInTableScope() {\n        for(let i = this.stackTop; i >= 0; i--){\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (ns !== html_js_1.NS.HTML) {\n                continue;\n            }\n            if (tn === html_js_1.TAG_ID.TBODY || tn === html_js_1.TAG_ID.THEAD || tn === html_js_1.TAG_ID.TFOOT) {\n                return true;\n            }\n            if (tn === html_js_1.TAG_ID.TABLE || tn === html_js_1.TAG_ID.HTML) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasInSelectScope(tagName) {\n        for(let i = this.stackTop; i >= 0; i--){\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (ns !== html_js_1.NS.HTML) {\n                continue;\n            }\n            if (tn === tagName) {\n                return true;\n            }\n            if (tn !== html_js_1.TAG_ID.OPTION && tn !== html_js_1.TAG_ID.OPTGROUP) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //Implied end tags\n    generateImpliedEndTags() {\n        while(IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)){\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsThoroughly() {\n        while(IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)){\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsWithExclusion(exclusionId) {\n        while(this.currentTagId !== exclusionId && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)){\n            this.pop();\n        }\n    }\n}\nexports.OpenElementStack = OpenElementStack; //# sourceMappingURL=open-element-stack.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/parser/open-element-stack.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/serializer/index.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/serializer/index.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.serializeOuter = exports.serialize = void 0;\nconst html_js_1 = __webpack_require__(/*! ../common/html.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/html.js\");\nconst escape_js_1 = __webpack_require__(/*! entities/lib/escape.js */ \"(rsc)/./node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/escape.js\");\nconst default_js_1 = __webpack_require__(/*! ../tree-adapters/default.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tree-adapters/default.js\");\n// Sets\nconst VOID_ELEMENTS = new Set([\n    html_js_1.TAG_NAMES.AREA,\n    html_js_1.TAG_NAMES.BASE,\n    html_js_1.TAG_NAMES.BASEFONT,\n    html_js_1.TAG_NAMES.BGSOUND,\n    html_js_1.TAG_NAMES.BR,\n    html_js_1.TAG_NAMES.COL,\n    html_js_1.TAG_NAMES.EMBED,\n    html_js_1.TAG_NAMES.FRAME,\n    html_js_1.TAG_NAMES.HR,\n    html_js_1.TAG_NAMES.IMG,\n    html_js_1.TAG_NAMES.INPUT,\n    html_js_1.TAG_NAMES.KEYGEN,\n    html_js_1.TAG_NAMES.LINK,\n    html_js_1.TAG_NAMES.META,\n    html_js_1.TAG_NAMES.PARAM,\n    html_js_1.TAG_NAMES.SOURCE,\n    html_js_1.TAG_NAMES.TRACK,\n    html_js_1.TAG_NAMES.WBR\n]);\nfunction isVoidElement(node, options) {\n    return options.treeAdapter.isElementNode(node) && options.treeAdapter.getNamespaceURI(node) === html_js_1.NS.HTML && VOID_ELEMENTS.has(options.treeAdapter.getTagName(node));\n}\nconst defaultOpts = {\n    treeAdapter: default_js_1.defaultTreeAdapter,\n    scriptingEnabled: true\n};\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */ function serialize(node, options) {\n    const opts = Object.assign(Object.assign({}, defaultOpts), options);\n    if (isVoidElement(node, opts)) {\n        return \"\";\n    }\n    return serializeChildNodes(node, opts);\n}\nexports.serialize = serialize;\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const html = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */ function serializeOuter(node, options) {\n    const opts = Object.assign(Object.assign({}, defaultOpts), options);\n    return serializeNode(node, opts);\n}\nexports.serializeOuter = serializeOuter;\nfunction serializeChildNodes(parentNode, options) {\n    let html = \"\";\n    // Get container of the child nodes\n    const container = options.treeAdapter.isElementNode(parentNode) && options.treeAdapter.getTagName(parentNode) === html_js_1.TAG_NAMES.TEMPLATE && options.treeAdapter.getNamespaceURI(parentNode) === html_js_1.NS.HTML ? options.treeAdapter.getTemplateContent(parentNode) : parentNode;\n    const childNodes = options.treeAdapter.getChildNodes(container);\n    if (childNodes) {\n        for (const currentNode of childNodes){\n            html += serializeNode(currentNode, options);\n        }\n    }\n    return html;\n}\nfunction serializeNode(node, options) {\n    if (options.treeAdapter.isElementNode(node)) {\n        return serializeElement(node, options);\n    }\n    if (options.treeAdapter.isTextNode(node)) {\n        return serializeTextNode(node, options);\n    }\n    if (options.treeAdapter.isCommentNode(node)) {\n        return serializeCommentNode(node, options);\n    }\n    if (options.treeAdapter.isDocumentTypeNode(node)) {\n        return serializeDocumentTypeNode(node, options);\n    }\n    // Return an empty string for unknown nodes\n    return \"\";\n}\nfunction serializeElement(node, options) {\n    const tn = options.treeAdapter.getTagName(node);\n    return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? \"\" : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, { treeAdapter }) {\n    let html = \"\";\n    for (const attr of treeAdapter.getAttrList(node)){\n        html += \" \";\n        if (!attr.namespace) {\n            html += attr.name;\n        } else switch(attr.namespace){\n            case html_js_1.NS.XML:\n                {\n                    html += `xml:${attr.name}`;\n                    break;\n                }\n            case html_js_1.NS.XMLNS:\n                {\n                    if (attr.name !== \"xmlns\") {\n                        html += \"xmlns:\";\n                    }\n                    html += attr.name;\n                    break;\n                }\n            case html_js_1.NS.XLINK:\n                {\n                    html += `xlink:${attr.name}`;\n                    break;\n                }\n            default:\n                {\n                    html += `${attr.prefix}:${attr.name}`;\n                }\n        }\n        html += `=\"${(0, escape_js_1.escapeAttribute)(attr.value)}\"`;\n    }\n    return html;\n}\nfunction serializeTextNode(node, options) {\n    const { treeAdapter } = options;\n    const content = treeAdapter.getTextNodeContent(node);\n    const parent = treeAdapter.getParentNode(node);\n    const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n    return parentTn && treeAdapter.getNamespaceURI(parent) === html_js_1.NS.HTML && (0, html_js_1.hasUnescapedText)(parentTn, options.scriptingEnabled) ? content : (0, escape_js_1.escapeText)(content);\n}\nfunction serializeCommentNode(node, { treeAdapter }) {\n    return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, { treeAdapter }) {\n    return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/serializer/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tokenizer/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tokenizer/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Tokenizer = exports.TokenizerMode = void 0;\nconst preprocessor_js_1 = __webpack_require__(/*! ./preprocessor.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tokenizer/preprocessor.js\");\nconst unicode_js_1 = __webpack_require__(/*! ../common/unicode.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/unicode.js\");\nconst token_js_1 = __webpack_require__(/*! ../common/token.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/token.js\");\nconst decode_js_1 = __webpack_require__(/*! entities/lib/decode.js */ \"(rsc)/./node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/decode.js\");\nconst error_codes_js_1 = __webpack_require__(/*! ../common/error-codes.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/error-codes.js\");\nconst html_js_1 = __webpack_require__(/*! ../common/html.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/html.js\");\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([\n    [\n        0x80,\n        8364\n    ],\n    [\n        0x82,\n        8218\n    ],\n    [\n        0x83,\n        402\n    ],\n    [\n        0x84,\n        8222\n    ],\n    [\n        0x85,\n        8230\n    ],\n    [\n        0x86,\n        8224\n    ],\n    [\n        0x87,\n        8225\n    ],\n    [\n        0x88,\n        710\n    ],\n    [\n        0x89,\n        8240\n    ],\n    [\n        0x8a,\n        352\n    ],\n    [\n        0x8b,\n        8249\n    ],\n    [\n        0x8c,\n        338\n    ],\n    [\n        0x8e,\n        381\n    ],\n    [\n        0x91,\n        8216\n    ],\n    [\n        0x92,\n        8217\n    ],\n    [\n        0x93,\n        8220\n    ],\n    [\n        0x94,\n        8221\n    ],\n    [\n        0x95,\n        8226\n    ],\n    [\n        0x96,\n        8211\n    ],\n    [\n        0x97,\n        8212\n    ],\n    [\n        0x98,\n        732\n    ],\n    [\n        0x99,\n        8482\n    ],\n    [\n        0x9a,\n        353\n    ],\n    [\n        0x9b,\n        8250\n    ],\n    [\n        0x9c,\n        339\n    ],\n    [\n        0x9e,\n        382\n    ],\n    [\n        0x9f,\n        376\n    ]\n]);\n//States\nvar State;\n(function(State) {\n    State[State[\"DATA\"] = 0] = \"DATA\";\n    State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n    State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n    State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n    State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n    State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n    State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n    State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n    State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n    State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n    State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n    State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n    State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n    State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n    State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n    State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n    State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n    State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n    State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n    State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n    State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n    State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n    State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n    State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n    State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n    State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n    State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n    State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n    State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n    State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n    State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n    State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n    State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n    State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n    State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n    State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n    State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n    State[State[\"NAMED_CHARACTER_REFERENCE\"] = 72] = \"NAMED_CHARACTER_REFERENCE\";\n    State[State[\"AMBIGUOUS_AMPERSAND\"] = 73] = \"AMBIGUOUS_AMPERSAND\";\n    State[State[\"NUMERIC_CHARACTER_REFERENCE\"] = 74] = \"NUMERIC_CHARACTER_REFERENCE\";\n    State[State[\"HEXADEMICAL_CHARACTER_REFERENCE_START\"] = 75] = \"HEXADEMICAL_CHARACTER_REFERENCE_START\";\n    State[State[\"HEXADEMICAL_CHARACTER_REFERENCE\"] = 76] = \"HEXADEMICAL_CHARACTER_REFERENCE\";\n    State[State[\"DECIMAL_CHARACTER_REFERENCE\"] = 77] = \"DECIMAL_CHARACTER_REFERENCE\";\n    State[State[\"NUMERIC_CHARACTER_REFERENCE_END\"] = 78] = \"NUMERIC_CHARACTER_REFERENCE_END\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexports.TokenizerMode = {\n    DATA: State.DATA,\n    RCDATA: State.RCDATA,\n    RAWTEXT: State.RAWTEXT,\n    SCRIPT_DATA: State.SCRIPT_DATA,\n    PLAINTEXT: State.PLAINTEXT,\n    CDATA_SECTION: State.CDATA_SECTION\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.DIGIT_0 && cp <= unicode_js_1.CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_SMALL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_SMALL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === unicode_js_1.CODE_POINTS.SPACE || cp === unicode_js_1.CODE_POINTS.LINE_FEED || cp === unicode_js_1.CODE_POINTS.TABULATION || cp === unicode_js_1.CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === unicode_js_1.CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === unicode_js_1.CODE_POINTS.SOLIDUS || cp === unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN;\n}\n//Tokenizer\nclass Tokenizer {\n    constructor(options, handler){\n        this.options = options;\n        this.handler = handler;\n        this.paused = false;\n        /** Ensures that the parsing loop isn't run multiple times at once. */ this.inLoop = false;\n        /**\n         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n         * and that it is not an integration point for either MathML or HTML.\n         *\n         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n         */ this.inForeignNode = false;\n        this.lastStartTagName = \"\";\n        this.active = false;\n        this.state = State.DATA;\n        this.returnState = State.DATA;\n        this.charRefCode = -1;\n        this.consumedAfterSnapshot = -1;\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = {\n            name: \"\",\n            value: \"\"\n        };\n        this.preprocessor = new preprocessor_js_1.Preprocessor(handler);\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    //Errors\n    _err(code) {\n        var _a, _b;\n        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n    getCurrentLocation(offset) {\n        if (!this.options.sourceCodeLocationInfo) {\n            return null;\n        }\n        return {\n            startLine: this.preprocessor.line,\n            startCol: this.preprocessor.col - offset,\n            startOffset: this.preprocessor.offset - offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1\n        };\n    }\n    _runParsingLoop() {\n        if (this.inLoop) return;\n        this.inLoop = true;\n        while(this.active && !this.paused){\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n        }\n        this.inLoop = false;\n    }\n    //API\n    pause() {\n        this.paused = true;\n    }\n    resume(writeCallback) {\n        if (!this.paused) {\n            throw new Error(\"Parser was already resumed\");\n        }\n        this.paused = false;\n        // Necessary for synchronous resume.\n        if (this.inLoop) return;\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    write(chunk, isLastChunk, writeCallback) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n        this._runParsingLoop();\n    }\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            this._unconsume(this.consumedAfterSnapshot);\n            this.active = false;\n            return true;\n        }\n        return false;\n    }\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n    _unconsume(count) {\n        this.consumedAfterSnapshot -= count;\n        this.preprocessor.retreat(count);\n    }\n    _reconsumeInState(state, cp) {\n        this.state = state;\n        this._callState(cp);\n    }\n    _advanceBy(count) {\n        this.consumedAfterSnapshot += count;\n        for(let i = 0; i < count; i++){\n            this.preprocessor.advance();\n        }\n    }\n    _consumeSequenceIfMatch(pattern, caseSensitive) {\n        if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n            // We will already have consumed one character before calling this method.\n            this._advanceBy(pattern.length - 1);\n            return true;\n        }\n        return false;\n    }\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: token_js_1.TokenType.START_TAG,\n            tagName: \"\",\n            tagID: html_js_1.TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(1)\n        };\n    }\n    _createEndTagToken() {\n        this.currentToken = {\n            type: token_js_1.TokenType.END_TAG,\n            tagName: \"\",\n            tagID: html_js_1.TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(2)\n        };\n    }\n    _createCommentToken(offset) {\n        this.currentToken = {\n            type: token_js_1.TokenType.COMMENT,\n            data: \"\",\n            location: this.getCurrentLocation(offset)\n        };\n    }\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: token_js_1.TokenType.DOCTYPE,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null,\n            location: this.currentLocation\n        };\n    }\n    _createCharacterToken(type, chars) {\n        this.currentCharacterToken = {\n            type,\n            chars,\n            location: this.currentLocation\n        };\n    }\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: \"\"\n        };\n        this.currentLocation = this.getCurrentLocation(0);\n    }\n    _leaveAttrName() {\n        var _a;\n        var _b;\n        const token = this.currentToken;\n        if ((0, token_js_1.getTokenAttr)(token, this.currentAttr.name) === null) {\n            token.attrs.push(this.currentAttr);\n            if (token.location && this.currentLocation) {\n                const attrLocations = (_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : _b.attrs = Object.create(null);\n                attrLocations[this.currentAttr.name] = this.currentLocation;\n                // Set end location\n                this._leaveAttrValue();\n            }\n        } else {\n            this._err(error_codes_js_1.ERR.duplicateAttribute);\n        }\n    }\n    _leaveAttrValue() {\n        if (this.currentLocation) {\n            this.currentLocation.endLine = this.preprocessor.line;\n            this.currentLocation.endCol = this.preprocessor.col;\n            this.currentLocation.endOffset = this.preprocessor.offset;\n        }\n    }\n    //Token emission\n    prepareToken(ct) {\n        this._emitCurrentCharacterToken(ct.location);\n        this.currentToken = null;\n        if (ct.location) {\n            ct.location.endLine = this.preprocessor.line;\n            ct.location.endCol = this.preprocessor.col + 1;\n            ct.location.endOffset = this.preprocessor.offset + 1;\n        }\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    emitCurrentTagToken() {\n        const ct = this.currentToken;\n        this.prepareToken(ct);\n        ct.tagID = (0, html_js_1.getTagID)(ct.tagName);\n        if (ct.type === token_js_1.TokenType.START_TAG) {\n            this.lastStartTagName = ct.tagName;\n            this.handler.onStartTag(ct);\n        } else {\n            if (ct.attrs.length > 0) {\n                this._err(error_codes_js_1.ERR.endTagWithAttributes);\n            }\n            if (ct.selfClosing) {\n                this._err(error_codes_js_1.ERR.endTagWithTrailingSolidus);\n            }\n            this.handler.onEndTag(ct);\n        }\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentComment(ct) {\n        this.prepareToken(ct);\n        this.handler.onComment(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentDoctype(ct) {\n        this.prepareToken(ct);\n        this.handler.onDoctype(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    _emitCurrentCharacterToken(nextLocation) {\n        if (this.currentCharacterToken) {\n            //NOTE: if we have a pending character token, make it's end location equal to the\n            //current token's start location.\n            if (nextLocation && this.currentCharacterToken.location) {\n                this.currentCharacterToken.location.endLine = nextLocation.startLine;\n                this.currentCharacterToken.location.endCol = nextLocation.startCol;\n                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n            }\n            switch(this.currentCharacterToken.type){\n                case token_js_1.TokenType.CHARACTER:\n                    {\n                        this.handler.onCharacter(this.currentCharacterToken);\n                        break;\n                    }\n                case token_js_1.TokenType.NULL_CHARACTER:\n                    {\n                        this.handler.onNullCharacter(this.currentCharacterToken);\n                        break;\n                    }\n                case token_js_1.TokenType.WHITESPACE_CHARACTER:\n                    {\n                        this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n                        break;\n                    }\n            }\n            this.currentCharacterToken = null;\n        }\n    }\n    _emitEOFToken() {\n        const location = this.getCurrentLocation(0);\n        if (location) {\n            location.endLine = location.startLine;\n            location.endCol = location.startCol;\n            location.endOffset = location.startOffset;\n        }\n        this._emitCurrentCharacterToken(location);\n        this.handler.onEof({\n            type: token_js_1.TokenType.EOF,\n            location\n        });\n        this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken) {\n            if (this.currentCharacterToken.type !== type) {\n                this.currentLocation = this.getCurrentLocation(0);\n                this._emitCurrentCharacterToken(this.currentLocation);\n                this.preprocessor.dropParsedChunk();\n            } else {\n                this.currentCharacterToken.chars += ch;\n                return;\n            }\n        }\n        this._createCharacterToken(type, ch);\n    }\n    _emitCodePoint(cp) {\n        const type = isWhitespace(cp) ? token_js_1.TokenType.WHITESPACE_CHARACTER : cp === unicode_js_1.CODE_POINTS.NULL ? token_js_1.TokenType.NULL_CHARACTER : token_js_1.TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(token_js_1.TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n    _matchNamedCharacterReference(cp) {\n        let result = null;\n        let excess = 0;\n        let withoutSemicolon = false;\n        for(let i = 0, current = decode_js_1.htmlDecodeTree[0]; i >= 0; cp = this._consume()){\n            i = (0, decode_js_1.determineBranch)(decode_js_1.htmlDecodeTree, current, i + 1, cp);\n            if (i < 0) break;\n            excess += 1;\n            current = decode_js_1.htmlDecodeTree[i];\n            const masked = current & decode_js_1.BinTrieFlags.VALUE_LENGTH;\n            // If the branch is a value, store it and continue\n            if (masked) {\n                // The mask is the number of bytes of the value, including the current byte.\n                const valueLength = (masked >> 14) - 1;\n                // Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n                // See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n                if (cp !== unicode_js_1.CODE_POINTS.SEMICOLON && this._isCharacterReferenceInAttribute() && isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {\n                    //NOTE: we don't flush all consumed code points here, and instead switch back to the original state after\n                    //emitting an ampersand. This is fine, as alphanumeric characters won't be parsed differently in attributes.\n                    result = [\n                        unicode_js_1.CODE_POINTS.AMPERSAND\n                    ];\n                    // Skip over the value.\n                    i += valueLength;\n                } else {\n                    // If this is a surrogate pair, consume the next two bytes.\n                    result = valueLength === 0 ? [\n                        decode_js_1.htmlDecodeTree[i] & ~decode_js_1.BinTrieFlags.VALUE_LENGTH\n                    ] : valueLength === 1 ? [\n                        decode_js_1.htmlDecodeTree[++i]\n                    ] : [\n                        decode_js_1.htmlDecodeTree[++i],\n                        decode_js_1.htmlDecodeTree[++i]\n                    ];\n                    excess = 0;\n                    withoutSemicolon = cp !== unicode_js_1.CODE_POINTS.SEMICOLON;\n                }\n                if (valueLength === 0) {\n                    // If the value is zero-length, we're done.\n                    this._consume();\n                    break;\n                }\n            }\n        }\n        this._unconsume(excess);\n        if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {\n            this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n        }\n        // We want to emit the error above on the code point after the entity.\n        // We always consume one code point too many in the loop, and we wait to\n        // unconsume it until after the error is emitted.\n        this._unconsume(1);\n        return result;\n    }\n    _isCharacterReferenceInAttribute() {\n        return this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED;\n    }\n    _flushCodePointConsumedAsCharacterReference(cp) {\n        if (this._isCharacterReferenceInAttribute()) {\n            this.currentAttr.value += String.fromCodePoint(cp);\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n    _callState(cp) {\n        switch(this.state){\n            case State.DATA:\n                {\n                    this._stateData(cp);\n                    break;\n                }\n            case State.RCDATA:\n                {\n                    this._stateRcdata(cp);\n                    break;\n                }\n            case State.RAWTEXT:\n                {\n                    this._stateRawtext(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA:\n                {\n                    this._stateScriptData(cp);\n                    break;\n                }\n            case State.PLAINTEXT:\n                {\n                    this._statePlaintext(cp);\n                    break;\n                }\n            case State.TAG_OPEN:\n                {\n                    this._stateTagOpen(cp);\n                    break;\n                }\n            case State.END_TAG_OPEN:\n                {\n                    this._stateEndTagOpen(cp);\n                    break;\n                }\n            case State.TAG_NAME:\n                {\n                    this._stateTagName(cp);\n                    break;\n                }\n            case State.RCDATA_LESS_THAN_SIGN:\n                {\n                    this._stateRcdataLessThanSign(cp);\n                    break;\n                }\n            case State.RCDATA_END_TAG_OPEN:\n                {\n                    this._stateRcdataEndTagOpen(cp);\n                    break;\n                }\n            case State.RCDATA_END_TAG_NAME:\n                {\n                    this._stateRcdataEndTagName(cp);\n                    break;\n                }\n            case State.RAWTEXT_LESS_THAN_SIGN:\n                {\n                    this._stateRawtextLessThanSign(cp);\n                    break;\n                }\n            case State.RAWTEXT_END_TAG_OPEN:\n                {\n                    this._stateRawtextEndTagOpen(cp);\n                    break;\n                }\n            case State.RAWTEXT_END_TAG_NAME:\n                {\n                    this._stateRawtextEndTagName(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_LESS_THAN_SIGN:\n                {\n                    this._stateScriptDataLessThanSign(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_END_TAG_OPEN:\n                {\n                    this._stateScriptDataEndTagOpen(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_END_TAG_NAME:\n                {\n                    this._stateScriptDataEndTagName(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPE_START:\n                {\n                    this._stateScriptDataEscapeStart(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPE_START_DASH:\n                {\n                    this._stateScriptDataEscapeStartDash(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPED:\n                {\n                    this._stateScriptDataEscaped(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPED_DASH:\n                {\n                    this._stateScriptDataEscapedDash(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPED_DASH_DASH:\n                {\n                    this._stateScriptDataEscapedDashDash(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:\n                {\n                    this._stateScriptDataEscapedLessThanSign(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:\n                {\n                    this._stateScriptDataEscapedEndTagOpen(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME:\n                {\n                    this._stateScriptDataEscapedEndTagName(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START:\n                {\n                    this._stateScriptDataDoubleEscapeStart(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED:\n                {\n                    this._stateScriptDataDoubleEscaped(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:\n                {\n                    this._stateScriptDataDoubleEscapedDash(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:\n                {\n                    this._stateScriptDataDoubleEscapedDashDash(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:\n                {\n                    this._stateScriptDataDoubleEscapedLessThanSign(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END:\n                {\n                    this._stateScriptDataDoubleEscapeEnd(cp);\n                    break;\n                }\n            case State.BEFORE_ATTRIBUTE_NAME:\n                {\n                    this._stateBeforeAttributeName(cp);\n                    break;\n                }\n            case State.ATTRIBUTE_NAME:\n                {\n                    this._stateAttributeName(cp);\n                    break;\n                }\n            case State.AFTER_ATTRIBUTE_NAME:\n                {\n                    this._stateAfterAttributeName(cp);\n                    break;\n                }\n            case State.BEFORE_ATTRIBUTE_VALUE:\n                {\n                    this._stateBeforeAttributeValue(cp);\n                    break;\n                }\n            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED:\n                {\n                    this._stateAttributeValueDoubleQuoted(cp);\n                    break;\n                }\n            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED:\n                {\n                    this._stateAttributeValueSingleQuoted(cp);\n                    break;\n                }\n            case State.ATTRIBUTE_VALUE_UNQUOTED:\n                {\n                    this._stateAttributeValueUnquoted(cp);\n                    break;\n                }\n            case State.AFTER_ATTRIBUTE_VALUE_QUOTED:\n                {\n                    this._stateAfterAttributeValueQuoted(cp);\n                    break;\n                }\n            case State.SELF_CLOSING_START_TAG:\n                {\n                    this._stateSelfClosingStartTag(cp);\n                    break;\n                }\n            case State.BOGUS_COMMENT:\n                {\n                    this._stateBogusComment(cp);\n                    break;\n                }\n            case State.MARKUP_DECLARATION_OPEN:\n                {\n                    this._stateMarkupDeclarationOpen(cp);\n                    break;\n                }\n            case State.COMMENT_START:\n                {\n                    this._stateCommentStart(cp);\n                    break;\n                }\n            case State.COMMENT_START_DASH:\n                {\n                    this._stateCommentStartDash(cp);\n                    break;\n                }\n            case State.COMMENT:\n                {\n                    this._stateComment(cp);\n                    break;\n                }\n            case State.COMMENT_LESS_THAN_SIGN:\n                {\n                    this._stateCommentLessThanSign(cp);\n                    break;\n                }\n            case State.COMMENT_LESS_THAN_SIGN_BANG:\n                {\n                    this._stateCommentLessThanSignBang(cp);\n                    break;\n                }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH:\n                {\n                    this._stateCommentLessThanSignBangDash(cp);\n                    break;\n                }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:\n                {\n                    this._stateCommentLessThanSignBangDashDash(cp);\n                    break;\n                }\n            case State.COMMENT_END_DASH:\n                {\n                    this._stateCommentEndDash(cp);\n                    break;\n                }\n            case State.COMMENT_END:\n                {\n                    this._stateCommentEnd(cp);\n                    break;\n                }\n            case State.COMMENT_END_BANG:\n                {\n                    this._stateCommentEndBang(cp);\n                    break;\n                }\n            case State.DOCTYPE:\n                {\n                    this._stateDoctype(cp);\n                    break;\n                }\n            case State.BEFORE_DOCTYPE_NAME:\n                {\n                    this._stateBeforeDoctypeName(cp);\n                    break;\n                }\n            case State.DOCTYPE_NAME:\n                {\n                    this._stateDoctypeName(cp);\n                    break;\n                }\n            case State.AFTER_DOCTYPE_NAME:\n                {\n                    this._stateAfterDoctypeName(cp);\n                    break;\n                }\n            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD:\n                {\n                    this._stateAfterDoctypePublicKeyword(cp);\n                    break;\n                }\n            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:\n                {\n                    this._stateBeforeDoctypePublicIdentifier(cp);\n                    break;\n                }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:\n                {\n                    this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n                    break;\n                }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:\n                {\n                    this._stateDoctypePublicIdentifierSingleQuoted(cp);\n                    break;\n                }\n            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:\n                {\n                    this._stateAfterDoctypePublicIdentifier(cp);\n                    break;\n                }\n            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:\n                {\n                    this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n                    break;\n                }\n            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD:\n                {\n                    this._stateAfterDoctypeSystemKeyword(cp);\n                    break;\n                }\n            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:\n                {\n                    this._stateBeforeDoctypeSystemIdentifier(cp);\n                    break;\n                }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:\n                {\n                    this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n                    break;\n                }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:\n                {\n                    this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n                    break;\n                }\n            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:\n                {\n                    this._stateAfterDoctypeSystemIdentifier(cp);\n                    break;\n                }\n            case State.BOGUS_DOCTYPE:\n                {\n                    this._stateBogusDoctype(cp);\n                    break;\n                }\n            case State.CDATA_SECTION:\n                {\n                    this._stateCdataSection(cp);\n                    break;\n                }\n            case State.CDATA_SECTION_BRACKET:\n                {\n                    this._stateCdataSectionBracket(cp);\n                    break;\n                }\n            case State.CDATA_SECTION_END:\n                {\n                    this._stateCdataSectionEnd(cp);\n                    break;\n                }\n            case State.CHARACTER_REFERENCE:\n                {\n                    this._stateCharacterReference(cp);\n                    break;\n                }\n            case State.NAMED_CHARACTER_REFERENCE:\n                {\n                    this._stateNamedCharacterReference(cp);\n                    break;\n                }\n            case State.AMBIGUOUS_AMPERSAND:\n                {\n                    this._stateAmbiguousAmpersand(cp);\n                    break;\n                }\n            case State.NUMERIC_CHARACTER_REFERENCE:\n                {\n                    this._stateNumericCharacterReference(cp);\n                    break;\n                }\n            case State.HEXADEMICAL_CHARACTER_REFERENCE_START:\n                {\n                    this._stateHexademicalCharacterReferenceStart(cp);\n                    break;\n                }\n            case State.HEXADEMICAL_CHARACTER_REFERENCE:\n                {\n                    this._stateHexademicalCharacterReference(cp);\n                    break;\n                }\n            case State.DECIMAL_CHARACTER_REFERENCE:\n                {\n                    this._stateDecimalCharacterReference(cp);\n                    break;\n                }\n            case State.NUMERIC_CHARACTER_REFERENCE_END:\n                {\n                    this._stateNumericCharacterReferenceEnd(cp);\n                    break;\n                }\n            default:\n                {\n                    throw new Error(\"Unknown state\");\n                }\n        }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n    _stateData(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.TAG_OPEN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.AMPERSAND:\n                {\n                    this.returnState = State.DATA;\n                    this.state = State.CHARACTER_REFERENCE;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._emitCodePoint(cp);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n    _stateRcdata(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.AMPERSAND:\n                {\n                    this.returnState = State.RCDATA;\n                    this.state = State.CHARACTER_REFERENCE;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.RCDATA_LESS_THAN_SIGN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    _stateRawtext(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.RAWTEXT_LESS_THAN_SIGN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n    _stateScriptData(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    _statePlaintext(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n    _stateTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        } else switch(cp){\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n                {\n                    this.state = State.MARKUP_DECLARATION_OPEN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n                {\n                    this.state = State.END_TAG_OPEN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUESTION_MARK:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedQuestionMarkInsteadOfTagName);\n                    this._createCommentToken(1);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofBeforeTagName);\n                    this._emitChars(\"<\");\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n                    this._emitChars(\"<\");\n                    this.state = State.DATA;\n                    this._stateData(cp);\n                }\n        }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n    _stateEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        } else switch(cp){\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.missingEndTagName);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofBeforeTagName);\n                    this._emitChars(\"</\");\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n                    this._createCommentToken(2);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                }\n        }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n    _stateTagName(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this.state = State.BEFORE_ATTRIBUTE_NAME;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n                {\n                    this.state = State.SELF_CLOSING_START_TAG;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    this.emitCurrentTagToken();\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.tagName += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInTag);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n                }\n        }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    _stateRcdataLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.RCDATA_END_TAG_OPEN;\n        } else {\n            this._emitChars(\"<\");\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RCDATA_END_TAG_NAME;\n            this._stateRcdataEndTagName(cp);\n        } else {\n            this._emitChars(\"</\");\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    handleSpecialEndTag(_cp) {\n        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n            return !this._ensureHibernation();\n        }\n        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this._advanceBy(this.lastStartTagName.length);\n                    this.state = State.BEFORE_ATTRIBUTE_NAME;\n                    return false;\n                }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n                {\n                    this._advanceBy(this.lastStartTagName.length);\n                    this.state = State.SELF_CLOSING_START_TAG;\n                    return false;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._advanceBy(this.lastStartTagName.length);\n                    this.emitCurrentTagToken();\n                    this.state = State.DATA;\n                    return false;\n                }\n            default:\n                {\n                    return !this._ensureHibernation();\n                }\n        }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars(\"</\");\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    _stateRawtextLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.RAWTEXT_END_TAG_OPEN;\n        } else {\n            this._emitChars(\"<\");\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RAWTEXT_END_TAG_NAME;\n            this._stateRawtextEndTagName(cp);\n        } else {\n            this._emitChars(\"</\");\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars(\"</\");\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataLessThanSign(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n                {\n                    this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPE_START;\n                    this._emitChars(\"<!\");\n                    break;\n                }\n            default:\n                {\n                    this._emitChars(\"<\");\n                    this.state = State.SCRIPT_DATA;\n                    this._stateScriptData(cp);\n                }\n        }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_END_TAG_NAME;\n            this._stateScriptDataEndTagName(cp);\n        } else {\n            this._emitChars(\"</\");\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars(\"</\");\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStart(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n            this._emitChars(\"-\");\n        } else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStartDash(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars(\"-\");\n        } else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataEscaped(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n                    this._emitChars(\"-\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDash(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n                    this._emitChars(\"-\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.state = State.SCRIPT_DATA_ESCAPED;\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPED;\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDashDash(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this._emitChars(\"-\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA;\n                    this._emitChars(\">\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.state = State.SCRIPT_DATA_ESCAPED;\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPED;\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n        } else if (isAsciiLetter(cp)) {\n            this._emitChars(\"<\");\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n            this._stateScriptDataDoubleEscapeStart(cp);\n        } else {\n            this._emitChars(\"<\");\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n            this._stateScriptDataEscapedEndTagName(cp);\n        } else {\n            this._emitChars(\"</\");\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars(\"</\");\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeStart(cp) {\n        if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for(let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++){\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        } else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscaped(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n                    this._emitChars(\"-\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                    this._emitChars(\"<\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDash(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n                    this._emitChars(\"-\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                    this._emitChars(\"<\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDashDash(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this._emitChars(\"-\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                    this._emitChars(\"<\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA;\n                    this._emitChars(\">\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n            this._emitChars(\"/\");\n        } else {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeEnd(cp) {\n        if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for(let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++){\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_ESCAPED;\n        } else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeName(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this.state = State.AFTER_ATTRIBUTE_NAME;\n                    this._stateAfterAttributeName(cp);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedEqualsSignBeforeAttributeName);\n                    this._createAttr(\"=\");\n                    this.state = State.ATTRIBUTE_NAME;\n                    break;\n                }\n            default:\n                {\n                    this._createAttr(\"\");\n                    this.state = State.ATTRIBUTE_NAME;\n                    this._stateAttributeName(cp);\n                }\n        }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n    _stateAttributeName(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._leaveAttrName();\n                    this.state = State.AFTER_ATTRIBUTE_NAME;\n                    this._stateAfterAttributeName(cp);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n                {\n                    this._leaveAttrName();\n                    this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedCharacterInAttributeName);\n                    this.currentAttr.name += String.fromCodePoint(cp);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.currentAttr.name += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            default:\n                {\n                    this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n                }\n        }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n    _stateAfterAttributeName(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n                {\n                    this.state = State.SELF_CLOSING_START_TAG;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n                {\n                    this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    this.emitCurrentTagToken();\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInTag);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._createAttr(\"\");\n                    this.state = State.ATTRIBUTE_NAME;\n                    this._stateAttributeName(cp);\n                }\n        }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeValue(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.missingAttributeValue);\n                    this.state = State.DATA;\n                    this.emitCurrentTagToken();\n                    break;\n                }\n            default:\n                {\n                    this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n                    this._stateAttributeValueUnquoted(cp);\n                }\n        }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueDoubleQuoted(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.AMPERSAND:\n                {\n                    this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                    this.state = State.CHARACTER_REFERENCE;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInTag);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this.currentAttr.value += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueSingleQuoted(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.AMPERSAND:\n                {\n                    this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                    this.state = State.CHARACTER_REFERENCE;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInTag);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this.currentAttr.value += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueUnquoted(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this._leaveAttrValue();\n                    this.state = State.BEFORE_ATTRIBUTE_NAME;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.AMPERSAND:\n                {\n                    this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;\n                    this.state = State.CHARACTER_REFERENCE;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._leaveAttrValue();\n                    this.state = State.DATA;\n                    this.emitCurrentTagToken();\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n            case unicode_js_1.CODE_POINTS.GRAVE_ACCENT:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedCharacterInUnquotedAttributeValue);\n                    this.currentAttr.value += String.fromCodePoint(cp);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInTag);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this.currentAttr.value += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    _stateAfterAttributeValueQuoted(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this._leaveAttrValue();\n                    this.state = State.BEFORE_ATTRIBUTE_NAME;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n                {\n                    this._leaveAttrValue();\n                    this.state = State.SELF_CLOSING_START_TAG;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._leaveAttrValue();\n                    this.state = State.DATA;\n                    this.emitCurrentTagToken();\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInTag);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceBetweenAttributes);\n                    this.state = State.BEFORE_ATTRIBUTE_NAME;\n                    this._stateBeforeAttributeName(cp);\n                }\n        }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    _stateSelfClosingStartTag(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    const token = this.currentToken;\n                    token.selfClosing = true;\n                    this.state = State.DATA;\n                    this.emitCurrentTagToken();\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInTag);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedSolidusInTag);\n                    this.state = State.BEFORE_ATTRIBUTE_NAME;\n                    this._stateBeforeAttributeName(cp);\n                }\n        }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n    _stateBogusComment(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    this.emitCurrentComment(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this.emitCurrentComment(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            default:\n                {\n                    token.data += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    _stateMarkupDeclarationOpen(cp) {\n        if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DASH_DASH, true)) {\n            this._createCommentToken(unicode_js_1.SEQUENCES.DASH_DASH.length + 1);\n            this.state = State.COMMENT_START;\n        } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DOCTYPE, false)) {\n            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n            this.currentLocation = this.getCurrentLocation(unicode_js_1.SEQUENCES.DOCTYPE.length + 1);\n            this.state = State.DOCTYPE;\n        } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.CDATA_START, true)) {\n            if (this.inForeignNode) {\n                this.state = State.CDATA_SECTION;\n            } else {\n                this._err(error_codes_js_1.ERR.cdataInHtmlContent);\n                this._createCommentToken(unicode_js_1.SEQUENCES.CDATA_START.length + 1);\n                this.currentToken.data = \"[CDATA[\";\n                this.state = State.BOGUS_COMMENT;\n            }\n        } else if (!this._ensureHibernation()) {\n            this._err(error_codes_js_1.ERR.incorrectlyOpenedComment);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n        }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n    _stateCommentStart(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.COMMENT_START_DASH;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n                    this.state = State.DATA;\n                    const token = this.currentToken;\n                    this.emitCurrentComment(token);\n                    break;\n                }\n            default:\n                {\n                    this.state = State.COMMENT;\n                    this._stateComment(cp);\n                }\n        }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n    _stateCommentStartDash(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.COMMENT_END;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n                    this.state = State.DATA;\n                    this.emitCurrentComment(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInComment);\n                    this.emitCurrentComment(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.data += \"-\";\n                    this.state = State.COMMENT;\n                    this._stateComment(cp);\n                }\n        }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n    _stateComment(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.COMMENT_END_DASH;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    token.data += \"<\";\n                    this.state = State.COMMENT_LESS_THAN_SIGN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInComment);\n                    this.emitCurrentComment(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.data += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSign(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n                {\n                    token.data += \"!\";\n                    this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    token.data += \"<\";\n                    break;\n                }\n            default:\n                {\n                    this.state = State.COMMENT;\n                    this._stateComment(cp);\n                }\n        }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBang(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n        } else {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n        }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDash(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n        } else {\n            this.state = State.COMMENT_END_DASH;\n            this._stateCommentEndDash(cp);\n        }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN && cp !== unicode_js_1.CODE_POINTS.EOF) {\n            this._err(error_codes_js_1.ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n        this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n    _stateCommentEndDash(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.COMMENT_END;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInComment);\n                    this.emitCurrentComment(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.data += \"-\";\n                    this.state = State.COMMENT;\n                    this._stateComment(cp);\n                }\n        }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n    _stateCommentEnd(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    this.emitCurrentComment(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n                {\n                    this.state = State.COMMENT_END_BANG;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    token.data += \"-\";\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInComment);\n                    this.emitCurrentComment(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.data += \"--\";\n                    this.state = State.COMMENT;\n                    this._stateComment(cp);\n                }\n        }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n    _stateCommentEndBang(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    token.data += \"--!\";\n                    this.state = State.COMMENT_END_DASH;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.incorrectlyClosedComment);\n                    this.state = State.DATA;\n                    this.emitCurrentComment(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInComment);\n                    this.emitCurrentComment(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.data += \"--!\";\n                    this.state = State.COMMENT;\n                    this._stateComment(cp);\n                }\n        }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    _stateDoctype(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this.state = State.BEFORE_DOCTYPE_NAME;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.BEFORE_DOCTYPE_NAME;\n                    this._stateBeforeDoctypeName(cp);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceBeforeDoctypeName);\n                    this.state = State.BEFORE_DOCTYPE_NAME;\n                    this._stateBeforeDoctypeName(cp);\n                }\n        }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeName(cp) {\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n            this.state = State.DOCTYPE_NAME;\n        } else switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._createDoctypeToken(unicode_js_1.REPLACEMENT_CHARACTER);\n                    this.state = State.DOCTYPE_NAME;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.missingDoctypeName);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._createDoctypeToken(String.fromCodePoint(cp));\n                    this.state = State.DOCTYPE_NAME;\n                }\n        }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateDoctypeName(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this.state = State.AFTER_DOCTYPE_NAME;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    this.emitCurrentDoctype(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.name += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n                }\n        }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeName(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    this.emitCurrentDoctype(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.PUBLIC, false)) {\n                        this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n                    } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.SYSTEM, false)) {\n                        this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n                    } else if (!this._ensureHibernation()) {\n                        this._err(error_codes_js_1.ERR.invalidCharacterSequenceAfterDoctypeName);\n                        token.forceQuirks = true;\n                        this.state = State.BOGUS_DOCTYPE;\n                        this._stateBogusDoctype(cp);\n                    }\n                }\n        }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicKeyword(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                    token.publicId = \"\";\n                    this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                    token.publicId = \"\";\n                    this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.DATA;\n                    this.emitCurrentDoctype(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    token.publicId = \"\";\n                    this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    token.publicId = \"\";\n                    this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.DATA;\n                    this.emitCurrentDoctype(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.publicId += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.publicId += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    this.emitCurrentDoctype(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemKeyword(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.DATA;\n                    this.emitCurrentDoctype(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.DATA;\n                    this.emitCurrentDoctype(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.systemId += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.systemId += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    _stateBogusDoctype(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n        }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n    _stateCdataSection(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET:\n                {\n                    this.state = State.CDATA_SECTION_BRACKET;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInCdata);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    _stateCdataSectionBracket(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET) {\n            this.state = State.CDATA_SECTION_END;\n        } else {\n            this._emitChars(\"]\");\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n        }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n    _stateCdataSectionEnd(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET:\n                {\n                    this._emitChars(\"]\");\n                    break;\n                }\n            default:\n                {\n                    this._emitChars(\"]]\");\n                    this.state = State.CDATA_SECTION;\n                    this._stateCdataSection(cp);\n                }\n        }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n    _stateCharacterReference(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.NUMBER_SIGN) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE;\n        } else if (isAsciiAlphaNumeric(cp)) {\n            this.state = State.NAMED_CHARACTER_REFERENCE;\n            this._stateNamedCharacterReference(cp);\n        } else {\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Named character reference state\n    //------------------------------------------------------------------\n    _stateNamedCharacterReference(cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n        //NOTE: Matching can be abrupted by hibernation. In that case, match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n        // Stay in the state, try again.\n        } else if (matchResult) {\n            for(let i = 0; i < matchResult.length; i++){\n                this._flushCodePointConsumedAsCharacterReference(matchResult[i]);\n            }\n            this.state = this.returnState;\n        } else {\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this.state = State.AMBIGUOUS_AMPERSAND;\n        }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    _stateAmbiguousAmpersand(cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        } else {\n            if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n                this._err(error_codes_js_1.ERR.unknownNamedCharacterReference);\n            }\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    _stateNumericCharacterReference(cp) {\n        this.charRefCode = 0;\n        if (cp === unicode_js_1.CODE_POINTS.LATIN_SMALL_X || cp === unicode_js_1.CODE_POINTS.LATIN_CAPITAL_X) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;\n        } else if (isAsciiDigit(cp)) {\n            this.state = State.DECIMAL_CHARACTER_REFERENCE;\n            this._stateDecimalCharacterReference(cp);\n        } else {\n            this._err(error_codes_js_1.ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.NUMBER_SIGN);\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    _stateHexademicalCharacterReferenceStart(cp) {\n        if (isAsciiHexDigit(cp)) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;\n            this._stateHexademicalCharacterReference(cp);\n        } else {\n            this._err(error_codes_js_1.ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.NUMBER_SIGN);\n            this._unconsume(2);\n            this.state = this.returnState;\n        }\n    }\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    _stateHexademicalCharacterReference(cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        } else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        } else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        } else if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        } else {\n            this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n            this._stateNumericCharacterReferenceEnd(cp);\n        }\n    }\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    _stateDecimalCharacterReference(cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        } else if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        } else {\n            this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n            this._stateNumericCharacterReferenceEnd(cp);\n        }\n    }\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    _stateNumericCharacterReferenceEnd(cp) {\n        if (this.charRefCode === unicode_js_1.CODE_POINTS.NULL) {\n            this._err(error_codes_js_1.ERR.nullCharacterReference);\n            this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n        } else if (this.charRefCode > 1114111) {\n            this._err(error_codes_js_1.ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n        } else if ((0, unicode_js_1.isSurrogate)(this.charRefCode)) {\n            this._err(error_codes_js_1.ERR.surrogateCharacterReference);\n            this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n        } else if ((0, unicode_js_1.isUndefinedCodePoint)(this.charRefCode)) {\n            this._err(error_codes_js_1.ERR.noncharacterCharacterReference);\n        } else if ((0, unicode_js_1.isControlCodePoint)(this.charRefCode) || this.charRefCode === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN) {\n            this._err(error_codes_js_1.ERR.controlCharacterReference);\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);\n            if (replacement !== undefined) {\n                this.charRefCode = replacement;\n            }\n        }\n        this._flushCodePointConsumedAsCharacterReference(this.charRefCode);\n        this._reconsumeInState(this.returnState, cp);\n    }\n}\nexports.Tokenizer = Tokenizer; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tokenizer/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tokenizer/preprocessor.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tokenizer/preprocessor.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Preprocessor = void 0;\nconst unicode_js_1 = __webpack_require__(/*! ../common/unicode.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/unicode.js\");\nconst error_codes_js_1 = __webpack_require__(/*! ../common/error-codes.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/error-codes.js\");\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nclass Preprocessor {\n    constructor(handler){\n        this.handler = handler;\n        this.html = \"\";\n        this.pos = -1;\n        // NOTE: Initial `lastGapPos` is -2, to ensure `col` on initialisation is 0\n        this.lastGapPos = -2;\n        this.gapStack = [];\n        this.skipNextNewLine = false;\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n        this.isEol = false;\n        this.lineStartPos = 0;\n        this.droppedBufferSize = 0;\n        this.line = 1;\n        //NOTE: avoid reporting errors twice on advance/retreat\n        this.lastErrOffset = -1;\n    }\n    /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */ get col() {\n        return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);\n    }\n    get offset() {\n        return this.droppedBufferSize + this.pos;\n    }\n    getError(code) {\n        const { line, col, offset } = this;\n        return {\n            code,\n            startLine: line,\n            endLine: line,\n            startCol: col,\n            endCol: col,\n            startOffset: offset,\n            endOffset: offset\n        };\n    }\n    _err(code) {\n        if (this.handler.onParseError && this.lastErrOffset !== this.offset) {\n            this.lastErrOffset = this.offset;\n            this.handler.onParseError(this.getError(code));\n        }\n    }\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.html.length - 1) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n            if ((0, unicode_js_1.isSurrogatePair)(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n                //NOTE: add a gap that should be avoided during retreat\n                this._addGap();\n                return (0, unicode_js_1.getSurrogatePairCodePoint)(cp, nextCp);\n            }\n        } else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return unicode_js_1.CODE_POINTS.EOF;\n        }\n        //NOTE: isolated surrogate\n        this._err(error_codes_js_1.ERR.surrogateInInputStream);\n        return cp;\n    }\n    willDropParsedChunk() {\n        return this.pos > this.bufferWaterline;\n    }\n    dropParsedChunk() {\n        if (this.willDropParsedChunk()) {\n            this.html = this.html.substring(this.pos);\n            this.lineStartPos -= this.pos;\n            this.droppedBufferSize += this.pos;\n            this.pos = 0;\n            this.lastGapPos = -2;\n            this.gapStack.length = 0;\n        }\n    }\n    write(chunk, isLastChunk) {\n        if (this.html.length > 0) {\n            this.html += chunk;\n        } else {\n            this.html = chunk;\n        }\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);\n        this.endOfChunkHit = false;\n    }\n    startsWith(pattern, caseSensitive) {\n        // Check if our buffer has enough characters\n        if (this.pos + pattern.length > this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return false;\n        }\n        if (caseSensitive) {\n            return this.html.startsWith(pattern, this.pos);\n        }\n        for(let i = 0; i < pattern.length; i++){\n            const cp = this.html.charCodeAt(this.pos + i) | 0x20;\n            if (cp !== pattern.charCodeAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    peek(offset) {\n        const pos = this.pos + offset;\n        if (pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return unicode_js_1.CODE_POINTS.EOF;\n        }\n        const code = this.html.charCodeAt(pos);\n        return code === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN ? unicode_js_1.CODE_POINTS.LINE_FEED : code;\n    }\n    advance() {\n        this.pos++;\n        //NOTE: LF should be in the last column of the line\n        if (this.isEol) {\n            this.isEol = false;\n            this.line++;\n            this.lineStartPos = this.pos;\n        }\n        if (this.pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return unicode_js_1.CODE_POINTS.EOF;\n        }\n        let cp = this.html.charCodeAt(this.pos);\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN) {\n            this.isEol = true;\n            this.skipNextNewLine = true;\n            return unicode_js_1.CODE_POINTS.LINE_FEED;\n        }\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (cp === unicode_js_1.CODE_POINTS.LINE_FEED) {\n            this.isEol = true;\n            if (this.skipNextNewLine) {\n                // `line` will be bumped again in the recursive call.\n                this.line--;\n                this.skipNextNewLine = false;\n                this._addGap();\n                return this.advance();\n            }\n        }\n        this.skipNextNewLine = false;\n        if ((0, unicode_js_1.isSurrogate)(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null || cp > 0x1f && cp < 0x7f || cp === unicode_js_1.CODE_POINTS.LINE_FEED || cp === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN || cp > 0x9f && cp < 64976;\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n        return cp;\n    }\n    _checkForProblematicCharacters(cp) {\n        if ((0, unicode_js_1.isControlCodePoint)(cp)) {\n            this._err(error_codes_js_1.ERR.controlCharacterInInputStream);\n        } else if ((0, unicode_js_1.isUndefinedCodePoint)(cp)) {\n            this._err(error_codes_js_1.ERR.noncharacterInInputStream);\n        }\n    }\n    retreat(count) {\n        this.pos -= count;\n        while(this.pos < this.lastGapPos){\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n        this.isEol = false;\n    }\n}\nexports.Preprocessor = Preprocessor; //# sourceMappingURL=preprocessor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tokenizer/preprocessor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tree-adapters/default.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tree-adapters/default.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defaultTreeAdapter = void 0;\nconst html_js_1 = __webpack_require__(/*! ../common/html.js */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/common/html.js\");\nfunction createTextNode(value) {\n    return {\n        nodeName: \"#text\",\n        value,\n        parentNode: null\n    };\n}\nexports.defaultTreeAdapter = {\n    //Node construction\n    createDocument () {\n        return {\n            nodeName: \"#document\",\n            mode: html_js_1.DOCUMENT_MODE.NO_QUIRKS,\n            childNodes: []\n        };\n    },\n    createDocumentFragment () {\n        return {\n            nodeName: \"#document-fragment\",\n            childNodes: []\n        };\n    },\n    createElement (tagName, namespaceURI, attrs) {\n        return {\n            nodeName: tagName,\n            tagName,\n            attrs,\n            namespaceURI,\n            childNodes: [],\n            parentNode: null\n        };\n    },\n    createCommentNode (data) {\n        return {\n            nodeName: \"#comment\",\n            data,\n            parentNode: null\n        };\n    },\n    //Tree mutation\n    appendChild (parentNode, newNode) {\n        parentNode.childNodes.push(newNode);\n        newNode.parentNode = parentNode;\n    },\n    insertBefore (parentNode, newNode, referenceNode) {\n        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n        parentNode.childNodes.splice(insertionIdx, 0, newNode);\n        newNode.parentNode = parentNode;\n    },\n    setTemplateContent (templateElement, contentElement) {\n        templateElement.content = contentElement;\n    },\n    getTemplateContent (templateElement) {\n        return templateElement.content;\n    },\n    setDocumentType (document, name, publicId, systemId) {\n        const doctypeNode = document.childNodes.find((node)=>node.nodeName === \"#documentType\");\n        if (doctypeNode) {\n            doctypeNode.name = name;\n            doctypeNode.publicId = publicId;\n            doctypeNode.systemId = systemId;\n        } else {\n            const node = {\n                nodeName: \"#documentType\",\n                name,\n                publicId,\n                systemId,\n                parentNode: null\n            };\n            exports.defaultTreeAdapter.appendChild(document, node);\n        }\n    },\n    setDocumentMode (document, mode) {\n        document.mode = mode;\n    },\n    getDocumentMode (document) {\n        return document.mode;\n    },\n    detachNode (node) {\n        if (node.parentNode) {\n            const idx = node.parentNode.childNodes.indexOf(node);\n            node.parentNode.childNodes.splice(idx, 1);\n            node.parentNode = null;\n        }\n    },\n    insertText (parentNode, text) {\n        if (parentNode.childNodes.length > 0) {\n            const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n            if (exports.defaultTreeAdapter.isTextNode(prevNode)) {\n                prevNode.value += text;\n                return;\n            }\n        }\n        exports.defaultTreeAdapter.appendChild(parentNode, createTextNode(text));\n    },\n    insertTextBefore (parentNode, text, referenceNode) {\n        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n        if (prevNode && exports.defaultTreeAdapter.isTextNode(prevNode)) {\n            prevNode.value += text;\n        } else {\n            exports.defaultTreeAdapter.insertBefore(parentNode, createTextNode(text), referenceNode);\n        }\n    },\n    adoptAttributes (recipient, attrs) {\n        const recipientAttrsMap = new Set(recipient.attrs.map((attr)=>attr.name));\n        for(let j = 0; j < attrs.length; j++){\n            if (!recipientAttrsMap.has(attrs[j].name)) {\n                recipient.attrs.push(attrs[j]);\n            }\n        }\n    },\n    //Tree traversing\n    getFirstChild (node) {\n        return node.childNodes[0];\n    },\n    getChildNodes (node) {\n        return node.childNodes;\n    },\n    getParentNode (node) {\n        return node.parentNode;\n    },\n    getAttrList (element) {\n        return element.attrs;\n    },\n    //Node data\n    getTagName (element) {\n        return element.tagName;\n    },\n    getNamespaceURI (element) {\n        return element.namespaceURI;\n    },\n    getTextNodeContent (textNode) {\n        return textNode.value;\n    },\n    getCommentNodeContent (commentNode) {\n        return commentNode.data;\n    },\n    getDocumentTypeNodeName (doctypeNode) {\n        return doctypeNode.name;\n    },\n    getDocumentTypeNodePublicId (doctypeNode) {\n        return doctypeNode.publicId;\n    },\n    getDocumentTypeNodeSystemId (doctypeNode) {\n        return doctypeNode.systemId;\n    },\n    //Node types\n    isTextNode (node) {\n        return node.nodeName === \"#text\";\n    },\n    isCommentNode (node) {\n        return node.nodeName === \"#comment\";\n    },\n    isDocumentTypeNode (node) {\n        return node.nodeName === \"#documentType\";\n    },\n    isElementNode (node) {\n        return Object.prototype.hasOwnProperty.call(node, \"tagName\");\n    },\n    // Source code location\n    setNodeSourceCodeLocation (node, location) {\n        node.sourceCodeLocation = location;\n    },\n    getNodeSourceCodeLocation (node) {\n        return node.sourceCodeLocation;\n    },\n    updateNodeSourceCodeLocation (node, endLocation) {\n        node.sourceCodeLocation = Object.assign(Object.assign({}, node.sourceCodeLocation), endLocation);\n    }\n}; //# sourceMappingURL=default.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/cjs/tree-adapters/default.js\n");

/***/ })

};
;